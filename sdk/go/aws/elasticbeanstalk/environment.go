// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Elastic Beanstalk Environment Resource. Elastic Beanstalk allows
// you to deploy and manage applications in the AWS cloud without worrying about
// the infrastructure that runs those applications.
// 
// Environments are often things such as `development`, `integration`, or
// `production`.
// 
// ## Option Settings
// 
// Some options can be stack-specific, check [AWS Docs](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html)
// for supported options and examples.
// 
// The `setting` and `allSettings` mappings support the following format:
// 
// * `namespace` - unique namespace identifying the option's associated AWS resource
// * `name` - name of the configuration option
// * `value` - value for the configuration option
// * `resource` - (Optional) resource name for [scheduled action](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html#command-options-general-autoscalingscheduledaction)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/elastic_beanstalk_environment.html.markdown.
type Environment struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// List of all option settings configured in this Environment. These
	// are a combination of default settings and their overrides from `setting` in
	// the configuration.
	AllSettings pulumi.ArrayOutput `pulumi:"allSettings"`

	// Name of the application that contains the version
	// to be deployed
	Application pulumi.StringOutput `pulumi:"application"`

	Arn pulumi.StringOutput `pulumi:"arn"`

	// The autoscaling groups used by this Environment.
	AutoscalingGroups pulumi.ArrayOutput `pulumi:"autoscalingGroups"`

	// Fully qualified DNS name for this Environment.
	Cname pulumi.StringOutput `pulumi:"cname"`

	// Prefix to use for the fully qualified DNS name of
	// the Environment.
	CnamePrefix pulumi.StringOutput `pulumi:"cnamePrefix"`

	// Short description of the Environment
	Description pulumi.StringOutput `pulumi:"description"`

	// The URL to the Load Balancer for this Environment
	EndpointUrl pulumi.StringOutput `pulumi:"endpointUrl"`

	// Instances used by this Environment.
	Instances pulumi.ArrayOutput `pulumi:"instances"`

	// Launch configurations in use by this Environment.
	LaunchConfigurations pulumi.ArrayOutput `pulumi:"launchConfigurations"`

	// Elastic load balancers in use by this Environment.
	LoadBalancers pulumi.ArrayOutput `pulumi:"loadBalancers"`

	// A unique name for this Environment. This name is used
	// in the application URL
	Name pulumi.StringOutput `pulumi:"name"`

	// The [ARN][2] of the Elastic Beanstalk [Platform][3]
	// to use in deployment
	PlatformArn pulumi.StringOutput `pulumi:"platformArn"`

	// The time between polling the AWS API to
	// check if changes have been applied. Use this to adjust the rate of API calls
	// for any `create` or `update` action. Minimum `10s`, maximum `180s`. Omit this to
	// use the default behavior, which is an exponential backoff
	PollInterval pulumi.StringOutput `pulumi:"pollInterval"`

	// SQS queues in use by this Environment.
	Queues pulumi.ArrayOutput `pulumi:"queues"`

	// Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in Option Settings
	Settings pulumi.ArrayOutput `pulumi:"settings"`

	// A solution stack to base your environment
	// off of. Example stacks can be found in the [Amazon API documentation][1]
	SolutionStackName pulumi.StringOutput `pulumi:"solutionStackName"`

	// A set of tags to apply to the Environment.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The name of the Elastic Beanstalk Configuration
	// template to use in deployment
	TemplateName pulumi.StringOutput `pulumi:"templateName"`

	// Elastic Beanstalk Environment tier. Valid values are `Worker`
	// or `WebServer`. If tier is left blank `WebServer` will be used.
	Tier pulumi.StringOutput `pulumi:"tier"`

	// Autoscaling triggers in use by this Environment.
	Triggers pulumi.ArrayOutput `pulumi:"triggers"`

	// The name of the Elastic Beanstalk Application Version
	// to use in deployment.
	Version pulumi.StringOutput `pulumi:"version"`

	// The maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
	// wait for an Elastic Beanstalk Environment to be in a ready state before timing
	// out.
	WaitForReadyTimeout pulumi.StringOutput `pulumi:"waitForReadyTimeout"`
}

// NewEnvironment registers a new resource with the given unique name, arguments, and options.
func NewEnvironment(ctx *pulumi.Context,
	name string, args *EnvironmentArgs, opts ...pulumi.ResourceOpt) (*Environment, error) {
	if args == nil || args.Application == nil {
		return nil, errors.New("missing required argument 'Application'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["application"] = args.Application
		inputs["cnamePrefix"] = args.CnamePrefix
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["platformArn"] = args.PlatformArn
		inputs["pollInterval"] = args.PollInterval
		inputs["settings"] = args.Settings
		inputs["solutionStackName"] = args.SolutionStackName
		inputs["tags"] = args.Tags
		inputs["templateName"] = args.TemplateName
		inputs["tier"] = args.Tier
		inputs["version"] = args.Version
		inputs["waitForReadyTimeout"] = args.WaitForReadyTimeout
	}
	var resource Environment
	err := ctx.RegisterResource("aws:elasticbeanstalk/environment:Environment", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnvironment gets an existing Environment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnvironment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EnvironmentState, opts ...pulumi.ResourceOpt) (*Environment, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["allSettings"] = state.AllSettings
		inputs["application"] = state.Application
		inputs["arn"] = state.Arn
		inputs["autoscalingGroups"] = state.AutoscalingGroups
		inputs["cname"] = state.Cname
		inputs["cnamePrefix"] = state.CnamePrefix
		inputs["description"] = state.Description
		inputs["endpointUrl"] = state.EndpointUrl
		inputs["instances"] = state.Instances
		inputs["launchConfigurations"] = state.LaunchConfigurations
		inputs["loadBalancers"] = state.LoadBalancers
		inputs["name"] = state.Name
		inputs["platformArn"] = state.PlatformArn
		inputs["pollInterval"] = state.PollInterval
		inputs["queues"] = state.Queues
		inputs["settings"] = state.Settings
		inputs["solutionStackName"] = state.SolutionStackName
		inputs["tags"] = state.Tags
		inputs["templateName"] = state.TemplateName
		inputs["tier"] = state.Tier
		inputs["triggers"] = state.Triggers
		inputs["version"] = state.Version
		inputs["waitForReadyTimeout"] = state.WaitForReadyTimeout
	}
	var resource Environment
	err := ctx.ReadResource("aws:elasticbeanstalk/environment:Environment", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Environment) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Environment) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Environment resources.
type EnvironmentState struct {
	// List of all option settings configured in this Environment. These
	// are a combination of default settings and their overrides from `setting` in
	// the configuration.
	AllSettings pulumi.ArrayInput `pulumi:"allSettings"`
	// Name of the application that contains the version
	// to be deployed
	Application pulumi.StringInput `pulumi:"application"`
	Arn pulumi.StringInput `pulumi:"arn"`
	// The autoscaling groups used by this Environment.
	AutoscalingGroups pulumi.ArrayInput `pulumi:"autoscalingGroups"`
	// Fully qualified DNS name for this Environment.
	Cname pulumi.StringInput `pulumi:"cname"`
	// Prefix to use for the fully qualified DNS name of
	// the Environment.
	CnamePrefix pulumi.StringInput `pulumi:"cnamePrefix"`
	// Short description of the Environment
	Description pulumi.StringInput `pulumi:"description"`
	// The URL to the Load Balancer for this Environment
	EndpointUrl pulumi.StringInput `pulumi:"endpointUrl"`
	// Instances used by this Environment.
	Instances pulumi.ArrayInput `pulumi:"instances"`
	// Launch configurations in use by this Environment.
	LaunchConfigurations pulumi.ArrayInput `pulumi:"launchConfigurations"`
	// Elastic load balancers in use by this Environment.
	LoadBalancers pulumi.ArrayInput `pulumi:"loadBalancers"`
	// A unique name for this Environment. This name is used
	// in the application URL
	Name pulumi.StringInput `pulumi:"name"`
	// The [ARN][2] of the Elastic Beanstalk [Platform][3]
	// to use in deployment
	PlatformArn pulumi.StringInput `pulumi:"platformArn"`
	// The time between polling the AWS API to
	// check if changes have been applied. Use this to adjust the rate of API calls
	// for any `create` or `update` action. Minimum `10s`, maximum `180s`. Omit this to
	// use the default behavior, which is an exponential backoff
	PollInterval pulumi.StringInput `pulumi:"pollInterval"`
	// SQS queues in use by this Environment.
	Queues pulumi.ArrayInput `pulumi:"queues"`
	// Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in Option Settings
	Settings pulumi.ArrayInput `pulumi:"settings"`
	// A solution stack to base your environment
	// off of. Example stacks can be found in the [Amazon API documentation][1]
	SolutionStackName pulumi.StringInput `pulumi:"solutionStackName"`
	// A set of tags to apply to the Environment.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The name of the Elastic Beanstalk Configuration
	// template to use in deployment
	TemplateName pulumi.StringInput `pulumi:"templateName"`
	// Elastic Beanstalk Environment tier. Valid values are `Worker`
	// or `WebServer`. If tier is left blank `WebServer` will be used.
	Tier pulumi.StringInput `pulumi:"tier"`
	// Autoscaling triggers in use by this Environment.
	Triggers pulumi.ArrayInput `pulumi:"triggers"`
	// The name of the Elastic Beanstalk Application Version
	// to use in deployment.
	Version pulumi.StringInput `pulumi:"version"`
	// The maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
	// wait for an Elastic Beanstalk Environment to be in a ready state before timing
	// out.
	WaitForReadyTimeout pulumi.StringInput `pulumi:"waitForReadyTimeout"`
}

// The set of arguments for constructing a Environment resource.
type EnvironmentArgs struct {
	// Name of the application that contains the version
	// to be deployed
	Application pulumi.StringInput `pulumi:"application"`
	// Prefix to use for the fully qualified DNS name of
	// the Environment.
	CnamePrefix pulumi.StringInput `pulumi:"cnamePrefix"`
	// Short description of the Environment
	Description pulumi.StringInput `pulumi:"description"`
	// A unique name for this Environment. This name is used
	// in the application URL
	Name pulumi.StringInput `pulumi:"name"`
	// The [ARN][2] of the Elastic Beanstalk [Platform][3]
	// to use in deployment
	PlatformArn pulumi.StringInput `pulumi:"platformArn"`
	// The time between polling the AWS API to
	// check if changes have been applied. Use this to adjust the rate of API calls
	// for any `create` or `update` action. Minimum `10s`, maximum `180s`. Omit this to
	// use the default behavior, which is an exponential backoff
	PollInterval pulumi.StringInput `pulumi:"pollInterval"`
	// Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in Option Settings
	Settings pulumi.ArrayInput `pulumi:"settings"`
	// A solution stack to base your environment
	// off of. Example stacks can be found in the [Amazon API documentation][1]
	SolutionStackName pulumi.StringInput `pulumi:"solutionStackName"`
	// A set of tags to apply to the Environment.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The name of the Elastic Beanstalk Configuration
	// template to use in deployment
	TemplateName pulumi.StringInput `pulumi:"templateName"`
	// Elastic Beanstalk Environment tier. Valid values are `Worker`
	// or `WebServer`. If tier is left blank `WebServer` will be used.
	Tier pulumi.StringInput `pulumi:"tier"`
	// The name of the Elastic Beanstalk Application Version
	// to use in deployment.
	Version pulumi.StringInput `pulumi:"version"`
	// The maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
	// wait for an Elastic Beanstalk Environment to be in a ready state before timing
	// out.
	WaitForReadyTimeout pulumi.StringInput `pulumi:"waitForReadyTimeout"`
}
