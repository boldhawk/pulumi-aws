// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Elastic Beanstalk Configuration Template, which are associated with
// a specific application and are used to deploy different versions of the
// application with the same configuration settings.
// 
// ## Option Settings
// 
// The `setting` field supports the following format:
// 
// * `namespace` - unique namespace identifying the option's associated AWS resource
// * `name` - name of the configuration option
// * `value` - value for the configuration option
// * `resource` - (Optional) resource name for [scheduled action](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html#command-options-general-autoscalingscheduledaction)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/elastic_beanstalk_configuration_template.html.markdown.
type ConfigurationTemplate struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// name of the application to associate with this configuration template
	Application pulumi.StringOutput `pulumi:"application"`

	// Short description of the Template
	Description pulumi.StringOutput `pulumi:"description"`

	// The ID of the environment used with this configuration template
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`

	// A unique name for this Template.
	Name pulumi.StringOutput `pulumi:"name"`

	// Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in Option Settings
	Settings pulumi.ArrayOutput `pulumi:"settings"`

	// A solution stack to base your Template
	// off of. Example stacks can be found in the [Amazon API documentation][1]
	SolutionStackName pulumi.StringOutput `pulumi:"solutionStackName"`
}

// NewConfigurationTemplate registers a new resource with the given unique name, arguments, and options.
func NewConfigurationTemplate(ctx *pulumi.Context,
	name string, args *ConfigurationTemplateArgs, opts ...pulumi.ResourceOpt) (*ConfigurationTemplate, error) {
	if args == nil || args.Application == nil {
		return nil, errors.New("missing required argument 'Application'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["application"] = args.Application
		inputs["description"] = args.Description
		inputs["environmentId"] = args.EnvironmentId
		inputs["name"] = args.Name
		inputs["settings"] = args.Settings
		inputs["solutionStackName"] = args.SolutionStackName
	}
	var resource ConfigurationTemplate
	err := ctx.RegisterResource("aws:elasticbeanstalk/configurationTemplate:ConfigurationTemplate", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationTemplate gets an existing ConfigurationTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationTemplate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ConfigurationTemplateState, opts ...pulumi.ResourceOpt) (*ConfigurationTemplate, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["application"] = state.Application
		inputs["description"] = state.Description
		inputs["environmentId"] = state.EnvironmentId
		inputs["name"] = state.Name
		inputs["settings"] = state.Settings
		inputs["solutionStackName"] = state.SolutionStackName
	}
	var resource ConfigurationTemplate
	err := ctx.ReadResource("aws:elasticbeanstalk/configurationTemplate:ConfigurationTemplate", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *ConfigurationTemplate) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *ConfigurationTemplate) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering ConfigurationTemplate resources.
type ConfigurationTemplateState struct {
	// name of the application to associate with this configuration template
	Application pulumi.StringInput `pulumi:"application"`
	// Short description of the Template
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the environment used with this configuration template
	EnvironmentId pulumi.StringInput `pulumi:"environmentId"`
	// A unique name for this Template.
	Name pulumi.StringInput `pulumi:"name"`
	// Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in Option Settings
	Settings pulumi.ArrayInput `pulumi:"settings"`
	// A solution stack to base your Template
	// off of. Example stacks can be found in the [Amazon API documentation][1]
	SolutionStackName pulumi.StringInput `pulumi:"solutionStackName"`
}

// The set of arguments for constructing a ConfigurationTemplate resource.
type ConfigurationTemplateArgs struct {
	// name of the application to associate with this configuration template
	Application pulumi.StringInput `pulumi:"application"`
	// Short description of the Template
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the environment used with this configuration template
	EnvironmentId pulumi.StringInput `pulumi:"environmentId"`
	// A unique name for this Template.
	Name pulumi.StringInput `pulumi:"name"`
	// Option settings to configure the new Environment. These
	// override specific values that are set as defaults. The format is detailed
	// below in Option Settings
	Settings pulumi.ArrayInput `pulumi:"settings"`
	// A solution stack to base your Template
	// off of. Example stacks can be found in the [Amazon API documentation][1]
	SolutionStackName pulumi.StringInput `pulumi:"solutionStackName"`
}
