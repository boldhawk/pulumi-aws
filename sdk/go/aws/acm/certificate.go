// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package acm

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The ACM certificate resource allows requesting and management of certificates
// from the Amazon Certificate Manager.
// 
// It deals with requesting certificates and managing their attributes and life-cycle.
// This resource does not deal with validation of a certificate but can provide inputs
// for other resources implementing the validation. It does not wait for a certificate to be issued.
// Use a `acm.CertificateValidation` resource for this.
// 
// Most commonly, this resource is used to together with `route53.Record` and
// `acm.CertificateValidation` to request a DNS validated certificate,
// deploy the required validation records and wait for validation to complete.
// 
// Domain validation through E-Mail is also supported but should be avoided as it requires a manual step outside
// of this provider.
// 
// It's recommended to specify `createBeforeDestroy = true` in a [lifecycle][1] block to replace a certificate
// which is currently in use (eg, by `lb.Listener`).
// 
// ## options Configuration Block
// 
// Supported nested arguments for the `options` configuration block:
// 
// * `certificateTransparencyLoggingPreference` - (Optional) Specifies whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/acm_certificate.html.markdown.
type Certificate struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ARN of the certificate
	Arn pulumi.StringOutput `pulumi:"arn"`

	// ARN of an ACMPCA
	CertificateAuthorityArn pulumi.StringOutput `pulumi:"certificateAuthorityArn"`

	// The certificate's PEM-formatted public key
	CertificateBody pulumi.StringOutput `pulumi:"certificateBody"`

	// The certificate's PEM-formatted chain
	// * Creating a private CA issued certificate
	CertificateChain pulumi.StringOutput `pulumi:"certificateChain"`

	// A domain name for which the certificate should be issued
	DomainName pulumi.StringOutput `pulumi:"domainName"`

	// A list of attributes to feed into other resources to complete certificate validation. Can have more than one element, e.g. if SANs are defined. Only set if `DNS`-validation was used.
	DomainValidationOptions pulumi.ArrayOutput `pulumi:"domainValidationOptions"`

	Options pulumi.AnyOutput `pulumi:"options"`

	// The certificate's PEM-formatted private key
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`

	// A list of domains that should be SANs in the issued certificate
	SubjectAlternativeNames pulumi.ArrayOutput `pulumi:"subjectAlternativeNames"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// A list of addresses that received a validation E-Mail. Only set if `EMAIL`-validation was used.
	ValidationEmails pulumi.ArrayOutput `pulumi:"validationEmails"`

	// Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into state managed by this provider.
	// * Importing an existing certificate
	ValidationMethod pulumi.StringOutput `pulumi:"validationMethod"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOpt) (*Certificate, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["certificateAuthorityArn"] = args.CertificateAuthorityArn
		inputs["certificateBody"] = args.CertificateBody
		inputs["certificateChain"] = args.CertificateChain
		inputs["domainName"] = args.DomainName
		inputs["options"] = args.Options
		inputs["privateKey"] = args.PrivateKey
		inputs["subjectAlternativeNames"] = args.SubjectAlternativeNames
		inputs["tags"] = args.Tags
		inputs["validationMethod"] = args.ValidationMethod
	}
	var resource Certificate
	err := ctx.RegisterResource("aws:acm/certificate:Certificate", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CertificateState, opts ...pulumi.ResourceOpt) (*Certificate, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["certificateAuthorityArn"] = state.CertificateAuthorityArn
		inputs["certificateBody"] = state.CertificateBody
		inputs["certificateChain"] = state.CertificateChain
		inputs["domainName"] = state.DomainName
		inputs["domainValidationOptions"] = state.DomainValidationOptions
		inputs["options"] = state.Options
		inputs["privateKey"] = state.PrivateKey
		inputs["subjectAlternativeNames"] = state.SubjectAlternativeNames
		inputs["tags"] = state.Tags
		inputs["validationEmails"] = state.ValidationEmails
		inputs["validationMethod"] = state.ValidationMethod
	}
	var resource Certificate
	err := ctx.ReadResource("aws:acm/certificate:Certificate", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Certificate) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Certificate) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Certificate resources.
type CertificateState struct {
	// The ARN of the certificate
	Arn pulumi.StringInput `pulumi:"arn"`
	// ARN of an ACMPCA
	CertificateAuthorityArn pulumi.StringInput `pulumi:"certificateAuthorityArn"`
	// The certificate's PEM-formatted public key
	CertificateBody pulumi.StringInput `pulumi:"certificateBody"`
	// The certificate's PEM-formatted chain
	// * Creating a private CA issued certificate
	CertificateChain pulumi.StringInput `pulumi:"certificateChain"`
	// A domain name for which the certificate should be issued
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// A list of attributes to feed into other resources to complete certificate validation. Can have more than one element, e.g. if SANs are defined. Only set if `DNS`-validation was used.
	DomainValidationOptions pulumi.ArrayInput `pulumi:"domainValidationOptions"`
	Options pulumi.AnyInput `pulumi:"options"`
	// The certificate's PEM-formatted private key
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// A list of domains that should be SANs in the issued certificate
	SubjectAlternativeNames pulumi.ArrayInput `pulumi:"subjectAlternativeNames"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// A list of addresses that received a validation E-Mail. Only set if `EMAIL`-validation was used.
	ValidationEmails pulumi.ArrayInput `pulumi:"validationEmails"`
	// Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into state managed by this provider.
	// * Importing an existing certificate
	ValidationMethod pulumi.StringInput `pulumi:"validationMethod"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// ARN of an ACMPCA
	CertificateAuthorityArn pulumi.StringInput `pulumi:"certificateAuthorityArn"`
	// The certificate's PEM-formatted public key
	CertificateBody pulumi.StringInput `pulumi:"certificateBody"`
	// The certificate's PEM-formatted chain
	// * Creating a private CA issued certificate
	CertificateChain pulumi.StringInput `pulumi:"certificateChain"`
	// A domain name for which the certificate should be issued
	DomainName pulumi.StringInput `pulumi:"domainName"`
	Options pulumi.AnyInput `pulumi:"options"`
	// The certificate's PEM-formatted private key
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// A list of domains that should be SANs in the issued certificate
	SubjectAlternativeNames pulumi.ArrayInput `pulumi:"subjectAlternativeNames"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into state managed by this provider.
	// * Importing an existing certificate
	ValidationMethod pulumi.StringInput `pulumi:"validationMethod"`
}
