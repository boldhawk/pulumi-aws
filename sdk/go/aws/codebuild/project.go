// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CodeBuild Project resource. See also the [`codebuild.Webhook` resource](https://www.terraform.io/docs/providers/aws/r/codebuild_webhook.html), which manages the webhook to the source (e.g. the "rebuild every time a code change is pushed" option in the CodeBuild web console).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/codebuild_project.html.markdown.
type Project struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ARN of the CodeBuild project.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// Information about the project's build output artifacts. Artifact blocks are documented below.
	Artifacts pulumi.AnyOutput `pulumi:"artifacts"`

	// Generates a publicly-accessible URL for the projects build badge. Available as `badgeUrl` attribute when enabled.
	BadgeEnabled pulumi.BoolOutput `pulumi:"badgeEnabled"`

	// The URL of the build badge when `badgeEnabled` is enabled.
	BadgeUrl pulumi.StringOutput `pulumi:"badgeUrl"`

	// How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
	BuildTimeout pulumi.IntOutput `pulumi:"buildTimeout"`

	// Information about the cache storage for the project. Cache blocks are documented below.
	Cache pulumi.AnyOutput `pulumi:"cache"`

	// A short description of the project.
	Description pulumi.StringOutput `pulumi:"description"`

	// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts.
	EncryptionKey pulumi.StringOutput `pulumi:"encryptionKey"`

	// Information about the project's build environment. Environment blocks are documented below.
	Environment pulumi.AnyOutput `pulumi:"environment"`

	// Configuration for the builds to store log data to CloudWatch or S3.
	LogsConfig pulumi.AnyOutput `pulumi:"logsConfig"`

	// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
	Name pulumi.StringOutput `pulumi:"name"`

	// A set of secondary artifacts to be used inside the build. Secondary artifacts blocks are documented below.
	SecondaryArtifacts pulumi.ArrayOutput `pulumi:"secondaryArtifacts"`

	// A set of secondary sources to be used inside the build. Secondary sources blocks are documented below.
	SecondarySources pulumi.ArrayOutput `pulumi:"secondarySources"`

	// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
	ServiceRole pulumi.StringOutput `pulumi:"serviceRole"`

	// Information about the project's input source code. Source blocks are documented below.
	Source pulumi.AnyOutput `pulumi:"source"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Configuration for the builds to run inside a VPC. VPC config blocks are documented below.
	VpcConfig pulumi.AnyOutput `pulumi:"vpcConfig"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOpt) (*Project, error) {
	if args == nil || args.Artifacts == nil {
		return nil, errors.New("missing required argument 'Artifacts'")
	}
	if args == nil || args.Environment == nil {
		return nil, errors.New("missing required argument 'Environment'")
	}
	if args == nil || args.ServiceRole == nil {
		return nil, errors.New("missing required argument 'ServiceRole'")
	}
	if args == nil || args.Source == nil {
		return nil, errors.New("missing required argument 'Source'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["artifacts"] = args.Artifacts
		inputs["badgeEnabled"] = args.BadgeEnabled
		inputs["buildTimeout"] = args.BuildTimeout
		inputs["cache"] = args.Cache
		inputs["description"] = args.Description
		inputs["encryptionKey"] = args.EncryptionKey
		inputs["environment"] = args.Environment
		inputs["logsConfig"] = args.LogsConfig
		inputs["name"] = args.Name
		inputs["secondaryArtifacts"] = args.SecondaryArtifacts
		inputs["secondarySources"] = args.SecondarySources
		inputs["serviceRole"] = args.ServiceRole
		inputs["source"] = args.Source
		inputs["tags"] = args.Tags
		inputs["vpcConfig"] = args.VpcConfig
	}
	var resource Project
	err := ctx.RegisterResource("aws:codebuild/project:Project", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProjectState, opts ...pulumi.ResourceOpt) (*Project, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["artifacts"] = state.Artifacts
		inputs["badgeEnabled"] = state.BadgeEnabled
		inputs["badgeUrl"] = state.BadgeUrl
		inputs["buildTimeout"] = state.BuildTimeout
		inputs["cache"] = state.Cache
		inputs["description"] = state.Description
		inputs["encryptionKey"] = state.EncryptionKey
		inputs["environment"] = state.Environment
		inputs["logsConfig"] = state.LogsConfig
		inputs["name"] = state.Name
		inputs["secondaryArtifacts"] = state.SecondaryArtifacts
		inputs["secondarySources"] = state.SecondarySources
		inputs["serviceRole"] = state.ServiceRole
		inputs["source"] = state.Source
		inputs["tags"] = state.Tags
		inputs["vpcConfig"] = state.VpcConfig
	}
	var resource Project
	err := ctx.ReadResource("aws:codebuild/project:Project", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Project) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Project) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Project resources.
type ProjectState struct {
	// The ARN of the CodeBuild project.
	Arn pulumi.StringInput `pulumi:"arn"`
	// Information about the project's build output artifacts. Artifact blocks are documented below.
	Artifacts pulumi.AnyInput `pulumi:"artifacts"`
	// Generates a publicly-accessible URL for the projects build badge. Available as `badgeUrl` attribute when enabled.
	BadgeEnabled pulumi.BoolInput `pulumi:"badgeEnabled"`
	// The URL of the build badge when `badgeEnabled` is enabled.
	BadgeUrl pulumi.StringInput `pulumi:"badgeUrl"`
	// How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
	BuildTimeout pulumi.IntInput `pulumi:"buildTimeout"`
	// Information about the cache storage for the project. Cache blocks are documented below.
	Cache pulumi.AnyInput `pulumi:"cache"`
	// A short description of the project.
	Description pulumi.StringInput `pulumi:"description"`
	// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts.
	EncryptionKey pulumi.StringInput `pulumi:"encryptionKey"`
	// Information about the project's build environment. Environment blocks are documented below.
	Environment pulumi.AnyInput `pulumi:"environment"`
	// Configuration for the builds to store log data to CloudWatch or S3.
	LogsConfig pulumi.AnyInput `pulumi:"logsConfig"`
	// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
	Name pulumi.StringInput `pulumi:"name"`
	// A set of secondary artifacts to be used inside the build. Secondary artifacts blocks are documented below.
	SecondaryArtifacts pulumi.ArrayInput `pulumi:"secondaryArtifacts"`
	// A set of secondary sources to be used inside the build. Secondary sources blocks are documented below.
	SecondarySources pulumi.ArrayInput `pulumi:"secondarySources"`
	// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
	ServiceRole pulumi.StringInput `pulumi:"serviceRole"`
	// Information about the project's input source code. Source blocks are documented below.
	Source pulumi.AnyInput `pulumi:"source"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Configuration for the builds to run inside a VPC. VPC config blocks are documented below.
	VpcConfig pulumi.AnyInput `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Information about the project's build output artifacts. Artifact blocks are documented below.
	Artifacts pulumi.AnyInput `pulumi:"artifacts"`
	// Generates a publicly-accessible URL for the projects build badge. Available as `badgeUrl` attribute when enabled.
	BadgeEnabled pulumi.BoolInput `pulumi:"badgeEnabled"`
	// How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
	BuildTimeout pulumi.IntInput `pulumi:"buildTimeout"`
	// Information about the cache storage for the project. Cache blocks are documented below.
	Cache pulumi.AnyInput `pulumi:"cache"`
	// A short description of the project.
	Description pulumi.StringInput `pulumi:"description"`
	// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts.
	EncryptionKey pulumi.StringInput `pulumi:"encryptionKey"`
	// Information about the project's build environment. Environment blocks are documented below.
	Environment pulumi.AnyInput `pulumi:"environment"`
	// Configuration for the builds to store log data to CloudWatch or S3.
	LogsConfig pulumi.AnyInput `pulumi:"logsConfig"`
	// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
	Name pulumi.StringInput `pulumi:"name"`
	// A set of secondary artifacts to be used inside the build. Secondary artifacts blocks are documented below.
	SecondaryArtifacts pulumi.ArrayInput `pulumi:"secondaryArtifacts"`
	// A set of secondary sources to be used inside the build. Secondary sources blocks are documented below.
	SecondarySources pulumi.ArrayInput `pulumi:"secondarySources"`
	// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
	ServiceRole pulumi.StringInput `pulumi:"serviceRole"`
	// Information about the project's input source code. Source blocks are documented below.
	Source pulumi.AnyInput `pulumi:"source"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Configuration for the builds to run inside a VPC. VPC config blocks are documented below.
	VpcConfig pulumi.AnyInput `pulumi:"vpcConfig"`
}
