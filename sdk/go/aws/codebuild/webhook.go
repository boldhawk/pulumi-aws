// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codebuild

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a CodeBuild webhook, which is an endpoint accepted by the CodeBuild service to trigger builds from source code repositories. Depending on the source type of the CodeBuild project, the CodeBuild service may also automatically create and delete the actual repository webhook as well.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/codebuild_webhook.html.markdown.
type Webhook struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// A regular expression used to determine which branches get built. Default is all branches are built. It is recommended to use `filterGroup` over `branchFilter`.
	BranchFilter pulumi.StringOutput `pulumi:"branchFilter"`

	// Information about the webhook's trigger. Filter group blocks are documented below.
	FilterGroups pulumi.ArrayOutput `pulumi:"filterGroups"`

	// The CodeBuild endpoint where webhook events are sent.
	PayloadUrl pulumi.StringOutput `pulumi:"payloadUrl"`

	// The name of the build project.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`

	// The secret token of the associated repository. Not returned by the CodeBuild API for all source types.
	Secret pulumi.StringOutput `pulumi:"secret"`

	// The URL to the webhook.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewWebhook registers a new resource with the given unique name, arguments, and options.
func NewWebhook(ctx *pulumi.Context,
	name string, args *WebhookArgs, opts ...pulumi.ResourceOpt) (*Webhook, error) {
	if args == nil || args.ProjectName == nil {
		return nil, errors.New("missing required argument 'ProjectName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["branchFilter"] = args.BranchFilter
		inputs["filterGroups"] = args.FilterGroups
		inputs["projectName"] = args.ProjectName
	}
	var resource Webhook
	err := ctx.RegisterResource("aws:codebuild/webhook:Webhook", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebhook gets an existing Webhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebhook(ctx *pulumi.Context,
	name string, id pulumi.ID, state *WebhookState, opts ...pulumi.ResourceOpt) (*Webhook, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["branchFilter"] = state.BranchFilter
		inputs["filterGroups"] = state.FilterGroups
		inputs["payloadUrl"] = state.PayloadUrl
		inputs["projectName"] = state.ProjectName
		inputs["secret"] = state.Secret
		inputs["url"] = state.Url
	}
	var resource Webhook
	err := ctx.ReadResource("aws:codebuild/webhook:Webhook", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Webhook) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Webhook) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Webhook resources.
type WebhookState struct {
	// A regular expression used to determine which branches get built. Default is all branches are built. It is recommended to use `filterGroup` over `branchFilter`.
	BranchFilter pulumi.StringInput `pulumi:"branchFilter"`
	// Information about the webhook's trigger. Filter group blocks are documented below.
	FilterGroups pulumi.ArrayInput `pulumi:"filterGroups"`
	// The CodeBuild endpoint where webhook events are sent.
	PayloadUrl pulumi.StringInput `pulumi:"payloadUrl"`
	// The name of the build project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The secret token of the associated repository. Not returned by the CodeBuild API for all source types.
	Secret pulumi.StringInput `pulumi:"secret"`
	// The URL to the webhook.
	Url pulumi.StringInput `pulumi:"url"`
}

// The set of arguments for constructing a Webhook resource.
type WebhookArgs struct {
	// A regular expression used to determine which branches get built. Default is all branches are built. It is recommended to use `filterGroup` over `branchFilter`.
	BranchFilter pulumi.StringInput `pulumi:"branchFilter"`
	// Information about the webhook's trigger. Filter group blocks are documented below.
	FilterGroups pulumi.ArrayInput `pulumi:"filterGroups"`
	// The name of the build project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
}
