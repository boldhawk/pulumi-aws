// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package docdb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a DocDB database cluster snapshot for DocDB clusters.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/docdb_cluster_snapshot.html.markdown.
type ClusterSnapshot struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// List of EC2 Availability Zones that instances in the DocDB cluster snapshot can be restored in.
	AvailabilityZones pulumi.ArrayOutput `pulumi:"availabilityZones"`

	// The DocDB Cluster Identifier from which to take the snapshot.
	DbClusterIdentifier pulumi.StringOutput `pulumi:"dbClusterIdentifier"`

	// The Amazon Resource Name (ARN) for the DocDB Cluster Snapshot.
	DbClusterSnapshotArn pulumi.StringOutput `pulumi:"dbClusterSnapshotArn"`

	// The Identifier for the snapshot.
	DbClusterSnapshotIdentifier pulumi.StringOutput `pulumi:"dbClusterSnapshotIdentifier"`

	// Specifies the name of the database engine.
	Engine pulumi.StringOutput `pulumi:"engine"`

	// Version of the database engine for this DocDB cluster snapshot.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`

	// If storageEncrypted is true, the AWS KMS key identifier for the encrypted DocDB cluster snapshot.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`

	// Port that the DocDB cluster was listening on at the time of the snapshot.
	Port pulumi.IntOutput `pulumi:"port"`

	SnapshotType pulumi.StringOutput `pulumi:"snapshotType"`

	SourceDbClusterSnapshotArn pulumi.StringOutput `pulumi:"sourceDbClusterSnapshotArn"`

	// The status of this DocDB Cluster Snapshot.
	Status pulumi.StringOutput `pulumi:"status"`

	// Specifies whether the DocDB cluster snapshot is encrypted.
	StorageEncrypted pulumi.BoolOutput `pulumi:"storageEncrypted"`

	// The VPC ID associated with the DocDB cluster snapshot.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewClusterSnapshot registers a new resource with the given unique name, arguments, and options.
func NewClusterSnapshot(ctx *pulumi.Context,
	name string, args *ClusterSnapshotArgs, opts ...pulumi.ResourceOpt) (*ClusterSnapshot, error) {
	if args == nil || args.DbClusterIdentifier == nil {
		return nil, errors.New("missing required argument 'DbClusterIdentifier'")
	}
	if args == nil || args.DbClusterSnapshotIdentifier == nil {
		return nil, errors.New("missing required argument 'DbClusterSnapshotIdentifier'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["dbClusterIdentifier"] = args.DbClusterIdentifier
		inputs["dbClusterSnapshotIdentifier"] = args.DbClusterSnapshotIdentifier
	}
	var resource ClusterSnapshot
	err := ctx.RegisterResource("aws:docdb/clusterSnapshot:ClusterSnapshot", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterSnapshot gets an existing ClusterSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterSnapshot(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClusterSnapshotState, opts ...pulumi.ResourceOpt) (*ClusterSnapshot, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["availabilityZones"] = state.AvailabilityZones
		inputs["dbClusterIdentifier"] = state.DbClusterIdentifier
		inputs["dbClusterSnapshotArn"] = state.DbClusterSnapshotArn
		inputs["dbClusterSnapshotIdentifier"] = state.DbClusterSnapshotIdentifier
		inputs["engine"] = state.Engine
		inputs["engineVersion"] = state.EngineVersion
		inputs["kmsKeyId"] = state.KmsKeyId
		inputs["port"] = state.Port
		inputs["snapshotType"] = state.SnapshotType
		inputs["sourceDbClusterSnapshotArn"] = state.SourceDbClusterSnapshotArn
		inputs["status"] = state.Status
		inputs["storageEncrypted"] = state.StorageEncrypted
		inputs["vpcId"] = state.VpcId
	}
	var resource ClusterSnapshot
	err := ctx.ReadResource("aws:docdb/clusterSnapshot:ClusterSnapshot", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *ClusterSnapshot) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *ClusterSnapshot) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering ClusterSnapshot resources.
type ClusterSnapshotState struct {
	// List of EC2 Availability Zones that instances in the DocDB cluster snapshot can be restored in.
	AvailabilityZones pulumi.ArrayInput `pulumi:"availabilityZones"`
	// The DocDB Cluster Identifier from which to take the snapshot.
	DbClusterIdentifier pulumi.StringInput `pulumi:"dbClusterIdentifier"`
	// The Amazon Resource Name (ARN) for the DocDB Cluster Snapshot.
	DbClusterSnapshotArn pulumi.StringInput `pulumi:"dbClusterSnapshotArn"`
	// The Identifier for the snapshot.
	DbClusterSnapshotIdentifier pulumi.StringInput `pulumi:"dbClusterSnapshotIdentifier"`
	// Specifies the name of the database engine.
	Engine pulumi.StringInput `pulumi:"engine"`
	// Version of the database engine for this DocDB cluster snapshot.
	EngineVersion pulumi.StringInput `pulumi:"engineVersion"`
	// If storageEncrypted is true, the AWS KMS key identifier for the encrypted DocDB cluster snapshot.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// Port that the DocDB cluster was listening on at the time of the snapshot.
	Port pulumi.IntInput `pulumi:"port"`
	SnapshotType pulumi.StringInput `pulumi:"snapshotType"`
	SourceDbClusterSnapshotArn pulumi.StringInput `pulumi:"sourceDbClusterSnapshotArn"`
	// The status of this DocDB Cluster Snapshot.
	Status pulumi.StringInput `pulumi:"status"`
	// Specifies whether the DocDB cluster snapshot is encrypted.
	StorageEncrypted pulumi.BoolInput `pulumi:"storageEncrypted"`
	// The VPC ID associated with the DocDB cluster snapshot.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

// The set of arguments for constructing a ClusterSnapshot resource.
type ClusterSnapshotArgs struct {
	// The DocDB Cluster Identifier from which to take the snapshot.
	DbClusterIdentifier pulumi.StringInput `pulumi:"dbClusterIdentifier"`
	// The Identifier for the snapshot.
	DbClusterSnapshotIdentifier pulumi.StringInput `pulumi:"dbClusterSnapshotIdentifier"`
}
