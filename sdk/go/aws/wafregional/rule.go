// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package wafregional

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an WAF Regional Rule Resource for use with Application Load Balancer.
// 
// ## Nested Fields
// 
// ### `predicate`
// 
// See the [WAF Documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_Predicate.html) for more information.
// 
// #### Arguments
// 
// * `type` - (Required) The type of predicate in a rule. Valid values: `ByteMatch`, `GeoMatch`, `IPMatch`, `RegexMatch`, `SizeConstraint`, `SqlInjectionMatch`, or `XssMatch`
// * `dataId` - (Required) The unique identifier of a predicate, such as the ID of a `ByteMatchSet` or `IPSet`.
// * `negated` - (Required) Whether to use the settings or the negated settings that you specified in the objects.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/wafregional_rule.html.markdown.
type Rule struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The name or description for the Amazon CloudWatch metric of this rule.
	MetricName pulumi.StringOutput `pulumi:"metricName"`

	// The name or description of the rule.
	Name pulumi.StringOutput `pulumi:"name"`

	// The objects to include in a rule (documented below).
	Predicates pulumi.ArrayOutput `pulumi:"predicates"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOpt) (*Rule, error) {
	if args == nil || args.MetricName == nil {
		return nil, errors.New("missing required argument 'MetricName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["metricName"] = args.MetricName
		inputs["name"] = args.Name
		inputs["predicates"] = args.Predicates
	}
	var resource Rule
	err := ctx.RegisterResource("aws:wafregional/rule:Rule", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RuleState, opts ...pulumi.ResourceOpt) (*Rule, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["metricName"] = state.MetricName
		inputs["name"] = state.Name
		inputs["predicates"] = state.Predicates
	}
	var resource Rule
	err := ctx.ReadResource("aws:wafregional/rule:Rule", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Rule) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Rule) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Rule resources.
type RuleState struct {
	// The name or description for the Amazon CloudWatch metric of this rule.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// The name or description of the rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The objects to include in a rule (documented below).
	Predicates pulumi.ArrayInput `pulumi:"predicates"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	// The name or description for the Amazon CloudWatch metric of this rule.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// The name or description of the rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The objects to include in a rule (documented below).
	Predicates pulumi.ArrayInput `pulumi:"predicates"`
}
