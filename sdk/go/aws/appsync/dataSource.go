// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AppSync DataSource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/appsync_datasource.html.markdown.
type DataSource struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The API ID for the GraphQL API for the DataSource.
	ApiId pulumi.StringOutput `pulumi:"apiId"`

	// The ARN
	Arn pulumi.StringOutput `pulumi:"arn"`

	// A description of the DataSource.
	Description pulumi.StringOutput `pulumi:"description"`

	// DynamoDB settings. See below
	DynamodbConfig pulumi.AnyOutput `pulumi:"dynamodbConfig"`

	// Amazon Elasticsearch settings. See below
	ElasticsearchConfig pulumi.AnyOutput `pulumi:"elasticsearchConfig"`

	// HTTP settings. See below
	HttpConfig pulumi.AnyOutput `pulumi:"httpConfig"`

	// AWS Lambda settings. See below
	LambdaConfig pulumi.AnyOutput `pulumi:"lambdaConfig"`

	// A user-supplied name for the DataSource.
	Name pulumi.StringOutput `pulumi:"name"`

	// The IAM service role ARN for the data source.
	ServiceRoleArn pulumi.StringOutput `pulumi:"serviceRoleArn"`

	// The type of the DataSource. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDataSource registers a new resource with the given unique name, arguments, and options.
func NewDataSource(ctx *pulumi.Context,
	name string, args *DataSourceArgs, opts ...pulumi.ResourceOpt) (*DataSource, error) {
	if args == nil || args.ApiId == nil {
		return nil, errors.New("missing required argument 'ApiId'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["apiId"] = args.ApiId
		inputs["description"] = args.Description
		inputs["dynamodbConfig"] = args.DynamodbConfig
		inputs["elasticsearchConfig"] = args.ElasticsearchConfig
		inputs["httpConfig"] = args.HttpConfig
		inputs["lambdaConfig"] = args.LambdaConfig
		inputs["name"] = args.Name
		inputs["serviceRoleArn"] = args.ServiceRoleArn
		inputs["type"] = args.Type
	}
	var resource DataSource
	err := ctx.RegisterResource("aws:appsync/dataSource:DataSource", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSource gets an existing DataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSource(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DataSourceState, opts ...pulumi.ResourceOpt) (*DataSource, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["apiId"] = state.ApiId
		inputs["arn"] = state.Arn
		inputs["description"] = state.Description
		inputs["dynamodbConfig"] = state.DynamodbConfig
		inputs["elasticsearchConfig"] = state.ElasticsearchConfig
		inputs["httpConfig"] = state.HttpConfig
		inputs["lambdaConfig"] = state.LambdaConfig
		inputs["name"] = state.Name
		inputs["serviceRoleArn"] = state.ServiceRoleArn
		inputs["type"] = state.Type
	}
	var resource DataSource
	err := ctx.ReadResource("aws:appsync/dataSource:DataSource", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *DataSource) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *DataSource) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering DataSource resources.
type DataSourceState struct {
	// The API ID for the GraphQL API for the DataSource.
	ApiId pulumi.StringInput `pulumi:"apiId"`
	// The ARN
	Arn pulumi.StringInput `pulumi:"arn"`
	// A description of the DataSource.
	Description pulumi.StringInput `pulumi:"description"`
	// DynamoDB settings. See below
	DynamodbConfig pulumi.AnyInput `pulumi:"dynamodbConfig"`
	// Amazon Elasticsearch settings. See below
	ElasticsearchConfig pulumi.AnyInput `pulumi:"elasticsearchConfig"`
	// HTTP settings. See below
	HttpConfig pulumi.AnyInput `pulumi:"httpConfig"`
	// AWS Lambda settings. See below
	LambdaConfig pulumi.AnyInput `pulumi:"lambdaConfig"`
	// A user-supplied name for the DataSource.
	Name pulumi.StringInput `pulumi:"name"`
	// The IAM service role ARN for the data source.
	ServiceRoleArn pulumi.StringInput `pulumi:"serviceRoleArn"`
	// The type of the DataSource. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`.
	Type pulumi.StringInput `pulumi:"type"`
}

// The set of arguments for constructing a DataSource resource.
type DataSourceArgs struct {
	// The API ID for the GraphQL API for the DataSource.
	ApiId pulumi.StringInput `pulumi:"apiId"`
	// A description of the DataSource.
	Description pulumi.StringInput `pulumi:"description"`
	// DynamoDB settings. See below
	DynamodbConfig pulumi.AnyInput `pulumi:"dynamodbConfig"`
	// Amazon Elasticsearch settings. See below
	ElasticsearchConfig pulumi.AnyInput `pulumi:"elasticsearchConfig"`
	// HTTP settings. See below
	HttpConfig pulumi.AnyInput `pulumi:"httpConfig"`
	// AWS Lambda settings. See below
	LambdaConfig pulumi.AnyInput `pulumi:"lambdaConfig"`
	// A user-supplied name for the DataSource.
	Name pulumi.StringInput `pulumi:"name"`
	// The IAM service role ARN for the data source.
	ServiceRoleArn pulumi.StringInput `pulumi:"serviceRoleArn"`
	// The type of the DataSource. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`.
	Type pulumi.StringInput `pulumi:"type"`
}
