// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appsync

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AppSync Resolver.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/appsync_resolver.html.markdown.
type Resolver struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The API ID for the GraphQL API.
	ApiId pulumi.StringOutput `pulumi:"apiId"`

	// The ARN
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The DataSource name.
	DataSource pulumi.StringOutput `pulumi:"dataSource"`

	// The field name from the schema defined in the GraphQL API.
	Field pulumi.StringOutput `pulumi:"field"`

	// The resolver type. Valid values are `UNIT` and `PIPELINE`.
	Kind pulumi.StringOutput `pulumi:"kind"`

	// The PipelineConfig. A `pipelineConfig` block is documented below.
	PipelineConfig pulumi.AnyOutput `pulumi:"pipelineConfig"`

	// The request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver.
	RequestTemplate pulumi.StringOutput `pulumi:"requestTemplate"`

	// The response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver.
	ResponseTemplate pulumi.StringOutput `pulumi:"responseTemplate"`

	// The type name from the schema defined in the GraphQL API.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewResolver registers a new resource with the given unique name, arguments, and options.
func NewResolver(ctx *pulumi.Context,
	name string, args *ResolverArgs, opts ...pulumi.ResourceOpt) (*Resolver, error) {
	if args == nil || args.ApiId == nil {
		return nil, errors.New("missing required argument 'ApiId'")
	}
	if args == nil || args.Field == nil {
		return nil, errors.New("missing required argument 'Field'")
	}
	if args == nil || args.RequestTemplate == nil {
		return nil, errors.New("missing required argument 'RequestTemplate'")
	}
	if args == nil || args.ResponseTemplate == nil {
		return nil, errors.New("missing required argument 'ResponseTemplate'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["apiId"] = args.ApiId
		inputs["dataSource"] = args.DataSource
		inputs["field"] = args.Field
		inputs["kind"] = args.Kind
		inputs["pipelineConfig"] = args.PipelineConfig
		inputs["requestTemplate"] = args.RequestTemplate
		inputs["responseTemplate"] = args.ResponseTemplate
		inputs["type"] = args.Type
	}
	var resource Resolver
	err := ctx.RegisterResource("aws:appsync/resolver:Resolver", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolver gets an existing Resolver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolver(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ResolverState, opts ...pulumi.ResourceOpt) (*Resolver, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["apiId"] = state.ApiId
		inputs["arn"] = state.Arn
		inputs["dataSource"] = state.DataSource
		inputs["field"] = state.Field
		inputs["kind"] = state.Kind
		inputs["pipelineConfig"] = state.PipelineConfig
		inputs["requestTemplate"] = state.RequestTemplate
		inputs["responseTemplate"] = state.ResponseTemplate
		inputs["type"] = state.Type
	}
	var resource Resolver
	err := ctx.ReadResource("aws:appsync/resolver:Resolver", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Resolver) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Resolver) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Resolver resources.
type ResolverState struct {
	// The API ID for the GraphQL API.
	ApiId pulumi.StringInput `pulumi:"apiId"`
	// The ARN
	Arn pulumi.StringInput `pulumi:"arn"`
	// The DataSource name.
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// The field name from the schema defined in the GraphQL API.
	Field pulumi.StringInput `pulumi:"field"`
	// The resolver type. Valid values are `UNIT` and `PIPELINE`.
	Kind pulumi.StringInput `pulumi:"kind"`
	// The PipelineConfig. A `pipelineConfig` block is documented below.
	PipelineConfig pulumi.AnyInput `pulumi:"pipelineConfig"`
	// The request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver.
	RequestTemplate pulumi.StringInput `pulumi:"requestTemplate"`
	// The response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver.
	ResponseTemplate pulumi.StringInput `pulumi:"responseTemplate"`
	// The type name from the schema defined in the GraphQL API.
	Type pulumi.StringInput `pulumi:"type"`
}

// The set of arguments for constructing a Resolver resource.
type ResolverArgs struct {
	// The API ID for the GraphQL API.
	ApiId pulumi.StringInput `pulumi:"apiId"`
	// The DataSource name.
	DataSource pulumi.StringInput `pulumi:"dataSource"`
	// The field name from the schema defined in the GraphQL API.
	Field pulumi.StringInput `pulumi:"field"`
	// The resolver type. Valid values are `UNIT` and `PIPELINE`.
	Kind pulumi.StringInput `pulumi:"kind"`
	// The PipelineConfig. A `pipelineConfig` block is documented below.
	PipelineConfig pulumi.AnyInput `pulumi:"pipelineConfig"`
	// The request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver.
	RequestTemplate pulumi.StringInput `pulumi:"requestTemplate"`
	// The response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver.
	ResponseTemplate pulumi.StringInput `pulumi:"responseTemplate"`
	// The type name from the schema defined in the GraphQL API.
	Type pulumi.StringInput `pulumi:"type"`
}
