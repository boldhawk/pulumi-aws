// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticloadbalancing

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Elastic Load Balancer resource, also known as a "Classic
// Load Balancer" after the release of
// [Application/Network Load Balancers](https://www.terraform.io/docs/providers/aws/r/lb.html).
// 
// > **NOTE on ELB Instances and ELB Attachments:** This provider currently
// provides both a standalone ELB Attachment resource
// (describing an instance attached to an ELB), and an ELB resource with
// `instances` defined in-line. At this time you cannot use an ELB with in-line
// instances in conjunction with a ELB Attachment resources. Doing so will cause a
// conflict and will overwrite attachments.
// 
// ## Note on ECDSA Key Algorithm
// 
// If the ARN of the `sslCertificateId` that is pointed to references a
// certificate that was signed by an ECDSA key, note that ELB only supports the
// P256 and P384 curves.  Using a certificate signed by a key using a different
// curve could produce the error `ERR_SSL_VERSION_OR_CIPHER_MISMATCH` in your
// browser.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/elb_legacy.html.markdown.
type LoadBalancer struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// An Access Logs block. Access Logs documented below.
	AccessLogs pulumi.AnyOutput `pulumi:"accessLogs"`

	// The ARN of the ELB
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The AZ's to serve traffic in.
	AvailabilityZones pulumi.ArrayOutput `pulumi:"availabilityZones"`

	// Boolean to enable connection draining. Default: `false`
	ConnectionDraining pulumi.BoolOutput `pulumi:"connectionDraining"`

	// The time in seconds to allow for connections to drain. Default: `300`
	ConnectionDrainingTimeout pulumi.IntOutput `pulumi:"connectionDrainingTimeout"`

	// Enable cross-zone load balancing. Default: `true`
	CrossZoneLoadBalancing pulumi.BoolOutput `pulumi:"crossZoneLoadBalancing"`

	// The DNS name of the ELB
	DnsName pulumi.StringOutput `pulumi:"dnsName"`

	// A healthCheck block. Health Check documented below.
	HealthCheck pulumi.AnyOutput `pulumi:"healthCheck"`

	// The time in seconds that the connection is allowed to be idle. Default: `60`
	IdleTimeout pulumi.IntOutput `pulumi:"idleTimeout"`

	// A list of instance ids to place in the ELB pool.
	Instances pulumi.ArrayOutput `pulumi:"instances"`

	// If true, ELB will be an internal ELB.
	Internal pulumi.BoolOutput `pulumi:"internal"`

	// A list of listener blocks. Listeners documented below.
	Listeners pulumi.ArrayOutput `pulumi:"listeners"`

	// The name of the ELB. By default generated by this provider.
	Name pulumi.StringOutput `pulumi:"name"`

	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`

	// A list of security group IDs to assign to the ELB.
	// Only valid if creating an ELB within a VPC
	SecurityGroups pulumi.ArrayOutput `pulumi:"securityGroups"`

	// The name of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Use this for Classic or Default VPC only.
	SourceSecurityGroup pulumi.StringOutput `pulumi:"sourceSecurityGroup"`

	// The ID of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Only available on ELBs launched in a VPC.
	SourceSecurityGroupId pulumi.StringOutput `pulumi:"sourceSecurityGroupId"`

	// A list of subnet IDs to attach to the ELB.
	Subnets pulumi.ArrayOutput `pulumi:"subnets"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOpt) (*LoadBalancer, error) {
	if args == nil || args.Listeners == nil {
		return nil, errors.New("missing required argument 'Listeners'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["accessLogs"] = args.AccessLogs
		inputs["availabilityZones"] = args.AvailabilityZones
		inputs["connectionDraining"] = args.ConnectionDraining
		inputs["connectionDrainingTimeout"] = args.ConnectionDrainingTimeout
		inputs["crossZoneLoadBalancing"] = args.CrossZoneLoadBalancing
		inputs["healthCheck"] = args.HealthCheck
		inputs["idleTimeout"] = args.IdleTimeout
		inputs["instances"] = args.Instances
		inputs["internal"] = args.Internal
		inputs["listeners"] = args.Listeners
		inputs["name"] = args.Name
		inputs["namePrefix"] = args.NamePrefix
		inputs["securityGroups"] = args.SecurityGroups
		inputs["sourceSecurityGroup"] = args.SourceSecurityGroup
		inputs["subnets"] = args.Subnets
		inputs["tags"] = args.Tags
	}
	var resource LoadBalancer
	err := ctx.RegisterResource("aws:elasticloadbalancing/loadBalancer:LoadBalancer", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LoadBalancerState, opts ...pulumi.ResourceOpt) (*LoadBalancer, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["accessLogs"] = state.AccessLogs
		inputs["arn"] = state.Arn
		inputs["availabilityZones"] = state.AvailabilityZones
		inputs["connectionDraining"] = state.ConnectionDraining
		inputs["connectionDrainingTimeout"] = state.ConnectionDrainingTimeout
		inputs["crossZoneLoadBalancing"] = state.CrossZoneLoadBalancing
		inputs["dnsName"] = state.DnsName
		inputs["healthCheck"] = state.HealthCheck
		inputs["idleTimeout"] = state.IdleTimeout
		inputs["instances"] = state.Instances
		inputs["internal"] = state.Internal
		inputs["listeners"] = state.Listeners
		inputs["name"] = state.Name
		inputs["namePrefix"] = state.NamePrefix
		inputs["securityGroups"] = state.SecurityGroups
		inputs["sourceSecurityGroup"] = state.SourceSecurityGroup
		inputs["sourceSecurityGroupId"] = state.SourceSecurityGroupId
		inputs["subnets"] = state.Subnets
		inputs["tags"] = state.Tags
		inputs["zoneId"] = state.ZoneId
	}
	var resource LoadBalancer
	err := ctx.ReadResource("aws:elasticloadbalancing/loadBalancer:LoadBalancer", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *LoadBalancer) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *LoadBalancer) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering LoadBalancer resources.
type LoadBalancerState struct {
	// An Access Logs block. Access Logs documented below.
	AccessLogs pulumi.AnyInput `pulumi:"accessLogs"`
	// The ARN of the ELB
	Arn pulumi.StringInput `pulumi:"arn"`
	// The AZ's to serve traffic in.
	AvailabilityZones pulumi.ArrayInput `pulumi:"availabilityZones"`
	// Boolean to enable connection draining. Default: `false`
	ConnectionDraining pulumi.BoolInput `pulumi:"connectionDraining"`
	// The time in seconds to allow for connections to drain. Default: `300`
	ConnectionDrainingTimeout pulumi.IntInput `pulumi:"connectionDrainingTimeout"`
	// Enable cross-zone load balancing. Default: `true`
	CrossZoneLoadBalancing pulumi.BoolInput `pulumi:"crossZoneLoadBalancing"`
	// The DNS name of the ELB
	DnsName pulumi.StringInput `pulumi:"dnsName"`
	// A healthCheck block. Health Check documented below.
	HealthCheck pulumi.AnyInput `pulumi:"healthCheck"`
	// The time in seconds that the connection is allowed to be idle. Default: `60`
	IdleTimeout pulumi.IntInput `pulumi:"idleTimeout"`
	// A list of instance ids to place in the ELB pool.
	Instances pulumi.ArrayInput `pulumi:"instances"`
	// If true, ELB will be an internal ELB.
	Internal pulumi.BoolInput `pulumi:"internal"`
	// A list of listener blocks. Listeners documented below.
	Listeners pulumi.ArrayInput `pulumi:"listeners"`
	// The name of the ELB. By default generated by this provider.
	Name pulumi.StringInput `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
	// A list of security group IDs to assign to the ELB.
	// Only valid if creating an ELB within a VPC
	SecurityGroups pulumi.ArrayInput `pulumi:"securityGroups"`
	// The name of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Use this for Classic or Default VPC only.
	SourceSecurityGroup pulumi.StringInput `pulumi:"sourceSecurityGroup"`
	// The ID of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Only available on ELBs launched in a VPC.
	SourceSecurityGroupId pulumi.StringInput `pulumi:"sourceSecurityGroupId"`
	// A list of subnet IDs to attach to the ELB.
	Subnets pulumi.ArrayInput `pulumi:"subnets"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// An Access Logs block. Access Logs documented below.
	AccessLogs pulumi.AnyInput `pulumi:"accessLogs"`
	// The AZ's to serve traffic in.
	AvailabilityZones pulumi.ArrayInput `pulumi:"availabilityZones"`
	// Boolean to enable connection draining. Default: `false`
	ConnectionDraining pulumi.BoolInput `pulumi:"connectionDraining"`
	// The time in seconds to allow for connections to drain. Default: `300`
	ConnectionDrainingTimeout pulumi.IntInput `pulumi:"connectionDrainingTimeout"`
	// Enable cross-zone load balancing. Default: `true`
	CrossZoneLoadBalancing pulumi.BoolInput `pulumi:"crossZoneLoadBalancing"`
	// A healthCheck block. Health Check documented below.
	HealthCheck pulumi.AnyInput `pulumi:"healthCheck"`
	// The time in seconds that the connection is allowed to be idle. Default: `60`
	IdleTimeout pulumi.IntInput `pulumi:"idleTimeout"`
	// A list of instance ids to place in the ELB pool.
	Instances pulumi.ArrayInput `pulumi:"instances"`
	// If true, ELB will be an internal ELB.
	Internal pulumi.BoolInput `pulumi:"internal"`
	// A list of listener blocks. Listeners documented below.
	Listeners pulumi.ArrayInput `pulumi:"listeners"`
	// The name of the ELB. By default generated by this provider.
	Name pulumi.StringInput `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
	// A list of security group IDs to assign to the ELB.
	// Only valid if creating an ELB within a VPC
	SecurityGroups pulumi.ArrayInput `pulumi:"securityGroups"`
	// The name of the security group that you can use as
	// part of your inbound rules for your load balancer's back-end application
	// instances. Use this for Classic or Default VPC only.
	SourceSecurityGroup pulumi.StringInput `pulumi:"sourceSecurityGroup"`
	// A list of subnet IDs to attach to the ELB.
	Subnets pulumi.ArrayInput `pulumi:"subnets"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
