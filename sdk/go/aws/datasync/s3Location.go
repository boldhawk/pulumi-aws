// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an S3 Location within AWS DataSync.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/datasync_location_s3.html.markdown.
type S3Location struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// Amazon Resource Name (ARN) of the S3 Bucket.
	S3BucketArn pulumi.StringOutput `pulumi:"s3BucketArn"`

	// Configuration block containing information for connecting to S3.
	S3Config pulumi.AnyOutput `pulumi:"s3Config"`

	// Prefix to perform actions as source or destination.
	Subdirectory pulumi.StringOutput `pulumi:"subdirectory"`

	// Key-value pairs of resource tags to assign to the DataSync Location.
	Tags pulumi.MapOutput `pulumi:"tags"`

	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewS3Location registers a new resource with the given unique name, arguments, and options.
func NewS3Location(ctx *pulumi.Context,
	name string, args *S3LocationArgs, opts ...pulumi.ResourceOpt) (*S3Location, error) {
	if args == nil || args.S3BucketArn == nil {
		return nil, errors.New("missing required argument 'S3BucketArn'")
	}
	if args == nil || args.S3Config == nil {
		return nil, errors.New("missing required argument 'S3Config'")
	}
	if args == nil || args.Subdirectory == nil {
		return nil, errors.New("missing required argument 'Subdirectory'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["s3BucketArn"] = args.S3BucketArn
		inputs["s3Config"] = args.S3Config
		inputs["subdirectory"] = args.Subdirectory
		inputs["tags"] = args.Tags
	}
	var resource S3Location
	err := ctx.RegisterResource("aws:datasync/s3Location:S3Location", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3Location gets an existing S3Location resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3Location(ctx *pulumi.Context,
	name string, id pulumi.ID, state *S3LocationState, opts ...pulumi.ResourceOpt) (*S3Location, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["s3BucketArn"] = state.S3BucketArn
		inputs["s3Config"] = state.S3Config
		inputs["subdirectory"] = state.Subdirectory
		inputs["tags"] = state.Tags
		inputs["uri"] = state.Uri
	}
	var resource S3Location
	err := ctx.ReadResource("aws:datasync/s3Location:S3Location", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *S3Location) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *S3Location) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering S3Location resources.
type S3LocationState struct {
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumi.StringInput `pulumi:"arn"`
	// Amazon Resource Name (ARN) of the S3 Bucket.
	S3BucketArn pulumi.StringInput `pulumi:"s3BucketArn"`
	// Configuration block containing information for connecting to S3.
	S3Config pulumi.AnyInput `pulumi:"s3Config"`
	// Prefix to perform actions as source or destination.
	Subdirectory pulumi.StringInput `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location.
	Tags pulumi.MapInput `pulumi:"tags"`
	Uri pulumi.StringInput `pulumi:"uri"`
}

// The set of arguments for constructing a S3Location resource.
type S3LocationArgs struct {
	// Amazon Resource Name (ARN) of the S3 Bucket.
	S3BucketArn pulumi.StringInput `pulumi:"s3BucketArn"`
	// Configuration block containing information for connecting to S3.
	S3Config pulumi.AnyInput `pulumi:"s3Config"`
	// Prefix to perform actions as source or destination.
	Subdirectory pulumi.StringInput `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location.
	Tags pulumi.MapInput `pulumi:"tags"`
}
