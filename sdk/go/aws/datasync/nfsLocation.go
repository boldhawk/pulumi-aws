// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datasync

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an NFS Location within AWS DataSync.
// 
// > **NOTE:** The DataSync Agents must be available before creating this resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/datasync_location_nfs.html.markdown.
type NfsLocation struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// Configuration block containing information for connecting to the NFS File System.
	OnPremConfig pulumi.AnyOutput `pulumi:"onPremConfig"`

	// Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
	ServerHostname pulumi.StringOutput `pulumi:"serverHostname"`

	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory pulumi.StringOutput `pulumi:"subdirectory"`

	// Key-value pairs of resource tags to assign to the DataSync Location.
	Tags pulumi.MapOutput `pulumi:"tags"`

	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewNfsLocation registers a new resource with the given unique name, arguments, and options.
func NewNfsLocation(ctx *pulumi.Context,
	name string, args *NfsLocationArgs, opts ...pulumi.ResourceOpt) (*NfsLocation, error) {
	if args == nil || args.OnPremConfig == nil {
		return nil, errors.New("missing required argument 'OnPremConfig'")
	}
	if args == nil || args.ServerHostname == nil {
		return nil, errors.New("missing required argument 'ServerHostname'")
	}
	if args == nil || args.Subdirectory == nil {
		return nil, errors.New("missing required argument 'Subdirectory'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["onPremConfig"] = args.OnPremConfig
		inputs["serverHostname"] = args.ServerHostname
		inputs["subdirectory"] = args.Subdirectory
		inputs["tags"] = args.Tags
	}
	var resource NfsLocation
	err := ctx.RegisterResource("aws:datasync/nfsLocation:NfsLocation", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNfsLocation gets an existing NfsLocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNfsLocation(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NfsLocationState, opts ...pulumi.ResourceOpt) (*NfsLocation, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["onPremConfig"] = state.OnPremConfig
		inputs["serverHostname"] = state.ServerHostname
		inputs["subdirectory"] = state.Subdirectory
		inputs["tags"] = state.Tags
		inputs["uri"] = state.Uri
	}
	var resource NfsLocation
	err := ctx.ReadResource("aws:datasync/nfsLocation:NfsLocation", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *NfsLocation) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *NfsLocation) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering NfsLocation resources.
type NfsLocationState struct {
	// Amazon Resource Name (ARN) of the DataSync Location.
	Arn pulumi.StringInput `pulumi:"arn"`
	// Configuration block containing information for connecting to the NFS File System.
	OnPremConfig pulumi.AnyInput `pulumi:"onPremConfig"`
	// Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
	ServerHostname pulumi.StringInput `pulumi:"serverHostname"`
	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory pulumi.StringInput `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location.
	Tags pulumi.MapInput `pulumi:"tags"`
	Uri pulumi.StringInput `pulumi:"uri"`
}

// The set of arguments for constructing a NfsLocation resource.
type NfsLocationArgs struct {
	// Configuration block containing information for connecting to the NFS File System.
	OnPremConfig pulumi.AnyInput `pulumi:"onPremConfig"`
	// Specifies the IP address or DNS name of the NFS server. The DataSync Agent(s) use this to mount the NFS server.
	ServerHostname pulumi.StringInput `pulumi:"serverHostname"`
	// Subdirectory to perform actions as source or destination. Should be exported by the NFS server.
	Subdirectory pulumi.StringInput `pulumi:"subdirectory"`
	// Key-value pairs of resource tags to assign to the DataSync Location.
	Tags pulumi.MapInput `pulumi:"tags"`
}
