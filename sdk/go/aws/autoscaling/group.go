// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AutoScaling Group resource.
// 
// > **Note:** You must specify either `launchConfiguration`, `launchTemplate`, or `mixedInstancesPolicy`.
// 
// ## Waiting for Capacity
// 
// A newly-created ASG is initially empty and begins to scale to `minSize` (or
// `desiredCapacity`, if specified) by launching instances using the provided
// Launch Configuration. These instances take time to launch and boot.
// 
// On ASG Update, changes to these values also take time to result in the target
// number of instances providing service.
// 
// This provider provides two mechanisms to help consistently manage ASG scale up
// time across dependent resources.
// 
// #### Waiting for ASG Capacity
// 
// The first is default behavior. This provider waits after ASG creation for
// `minSize` (or `desiredCapacity`, if specified) healthy instances to show up
// in the ASG before continuing.
// 
// If `minSize` or `desiredCapacity` are changed in a subsequent update,
// this provider will also wait for the correct number of healthy instances before
// continuing.
// 
// This provider considers an instance "healthy" when the ASG reports `HealthStatus:
// "Healthy"` and `LifecycleState: "InService"`. See the [AWS AutoScaling
// Docs](https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/AutoScalingGroupLifecycle.html)
// for more information on an ASG's lifecycle.
// 
// This provider will wait for healthy instances for up to
// `waitForCapacityTimeout`. If ASG creation is taking more than a few minutes,
// it's worth investigating for scaling activity errors, which can be caused by
// problems with the selected Launch Configuration.
// 
// Setting `waitForCapacityTimeout` to `"0"` disables ASG Capacity waiting.
// 
// #### Waiting for ELB Capacity
// 
// The second mechanism is optional, and affects ASGs with attached ELBs specified
// via the `loadBalancers` attribute or with ALBs specified with `targetGroupArns`.
// 
// The `minElbCapacity` parameter causes this provider to wait for at least the
// requested number of instances to show up `"InService"` in all attached ELBs
// during ASG creation.  It has no effect on ASG updates.
// 
// If `waitForElbCapacity` is set, this provider will wait for exactly that number
// of Instances to be `"InService"` in all attached ELBs on both creation and
// updates.
// 
// These parameters can be used to ensure that service is being provided before
// this provider moves on. If new instances don't pass the ELB's health checks for any
// reason, the deployment will time out, and the ASG will be marked as
// tainted (i.e. marked to be destroyed in a follow up run).
// 
// As with ASG Capacity, this provider will wait for up to `waitForCapacityTimeout`
// for the proper number of instances to be healthy.
// 
// #### Troubleshooting Capacity Waiting Timeouts
// 
// If ASG creation takes more than a few minutes, this could indicate one of a
// number of configuration problems. See the [AWS Docs on Load Balancer
// Troubleshooting](https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-troubleshooting.html)
// for more information.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/autoscaling_group.html.markdown.
type Group struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ARN for this AutoScaling Group
	Arn pulumi.StringOutput `pulumi:"arn"`

	// A list of one or more availability zones for the group. This parameter should not be specified when using `vpcZoneIdentifier`.
	AvailabilityZones pulumi.ArrayOutput `pulumi:"availabilityZones"`

	// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
	DefaultCooldown pulumi.IntOutput `pulumi:"defaultCooldown"`

	// The number of Amazon EC2 instances that
	// should be running in the group. (See also Waiting for
	// Capacity below.)
	DesiredCapacity pulumi.IntOutput `pulumi:"desiredCapacity"`

	// A list of metrics to collect. The allowed values are `GroupMinSize`, `GroupMaxSize`, `GroupDesiredCapacity`, `GroupInServiceInstances`, `GroupPendingInstances`, `GroupStandbyInstances`, `GroupTerminatingInstances`, `GroupTotalInstances`.
	// * `waitForCapacityTimeout` (Default: "10m") A maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
	// wait for ASG instances to be healthy before timing out.  (See also Waiting
	// for Capacity below.) Setting this to "0" causes
	// this provider to skip all Capacity Waiting behavior.
	EnabledMetrics pulumi.ArrayOutput `pulumi:"enabledMetrics"`

	// Allows deleting the autoscaling group without waiting
	// for all instances in the pool to terminate.  You can force an autoscaling group to delete
	// even if it's in the process of scaling a resource. Normally, this provider
	// drains all the instances before deleting the group.  This bypasses that
	// behavior and potentially leaves resources dangling.
	ForceDelete pulumi.BoolOutput `pulumi:"forceDelete"`

	// Time (in seconds) after instance comes into service before checking health.
	HealthCheckGracePeriod pulumi.IntOutput `pulumi:"healthCheckGracePeriod"`

	// "EC2" or "ELB". Controls how health checking is done.
	HealthCheckType pulumi.StringOutput `pulumi:"healthCheckType"`

	// One or more
	// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
	// to attach to the autoscaling group **before** instances are launched. The
	// syntax is exactly the same as the separate
	// [`autoscaling.LifecycleHook`](https://www.terraform.io/docs/providers/aws/r/autoscaling_lifecycle_hooks.html)
	// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
	// a new autoscaling group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
	InitialLifecycleHooks pulumi.ArrayOutput `pulumi:"initialLifecycleHooks"`

	// The name of the launch configuration to use.
	LaunchConfiguration pulumi.StringOutput `pulumi:"launchConfiguration"`

	// Nested argument containing launch template settings along with the overrides to specify multiple instance types. Defined below.
	LaunchTemplate pulumi.AnyOutput `pulumi:"launchTemplate"`

	// A list of elastic load balancer names to add to the autoscaling
	// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead.
	LoadBalancers pulumi.ArrayOutput `pulumi:"loadBalancers"`

	// The maximum size of the auto scale group.
	MaxSize pulumi.IntOutput `pulumi:"maxSize"`

	// The granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
	MetricsGranularity pulumi.StringOutput `pulumi:"metricsGranularity"`

	// Setting this causes this provider to wait for
	// this number of instances from this autoscaling group to show up healthy in the
	// ELB only on creation. Updates will not wait on ELB instance number changes.
	// (See also Waiting for Capacity below.)
	MinElbCapacity pulumi.IntOutput `pulumi:"minElbCapacity"`

	// The minimum size of the auto scale group.
	// (See also Waiting for Capacity below.)
	MinSize pulumi.IntOutput `pulumi:"minSize"`

	// Configuration block containing settings to define launch targets for Auto Scaling groups. Defined below.
	MixedInstancesPolicy pulumi.AnyOutput `pulumi:"mixedInstancesPolicy"`

	// The name of the auto scaling group. By default generated by this provider.
	Name pulumi.StringOutput `pulumi:"name"`

	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`

	// The name of the placement group into which you'll launch your instances, if any.
	PlacementGroup pulumi.StringOutput `pulumi:"placementGroup"`

	// Allows setting instance protection. The
	// autoscaling group will not select instances with this setting for terminination
	// during scale in events.
	ProtectFromScaleIn pulumi.BoolOutput `pulumi:"protectFromScaleIn"`

	// The ARN of the service-linked role that the ASG will use to call other AWS services
	ServiceLinkedRoleArn pulumi.StringOutput `pulumi:"serviceLinkedRoleArn"`

	// A list of processes to suspend for the AutoScaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`.
	// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your autoscaling group from functioning properly.
	SuspendedProcesses pulumi.ArrayOutput `pulumi:"suspendedProcesses"`

	// A list of tag blocks. Tags documented below.
	Tags pulumi.ArrayOutput `pulumi:"tags"`

	// A list of tag blocks (maps). Tags documented below.
	TagsCollection pulumi.ArrayOutput `pulumi:"tagsCollection"`

	// A list of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing.
	TargetGroupArns pulumi.ArrayOutput `pulumi:"targetGroupArns"`

	// A list of policies to decide how the instances in the auto scale group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`.
	TerminationPolicies pulumi.ArrayOutput `pulumi:"terminationPolicies"`

	// A list of subnet IDs to launch resources in.
	VpcZoneIdentifiers pulumi.ArrayOutput `pulumi:"vpcZoneIdentifiers"`

	WaitForCapacityTimeout pulumi.StringOutput `pulumi:"waitForCapacityTimeout"`

	// Setting this will cause this provider to wait
	// for exactly this number of healthy instances from this autoscaling group in
	// all attached load balancers on both create and update operations. (Takes
	// precedence over `minElbCapacity` behavior.)
	// (See also Waiting for Capacity below.)
	WaitForElbCapacity pulumi.IntOutput `pulumi:"waitForElbCapacity"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOpt) (*Group, error) {
	if args == nil || args.MaxSize == nil {
		return nil, errors.New("missing required argument 'MaxSize'")
	}
	if args == nil || args.MinSize == nil {
		return nil, errors.New("missing required argument 'MinSize'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["availabilityZones"] = args.AvailabilityZones
		inputs["defaultCooldown"] = args.DefaultCooldown
		inputs["desiredCapacity"] = args.DesiredCapacity
		inputs["enabledMetrics"] = args.EnabledMetrics
		inputs["forceDelete"] = args.ForceDelete
		inputs["healthCheckGracePeriod"] = args.HealthCheckGracePeriod
		inputs["healthCheckType"] = args.HealthCheckType
		inputs["initialLifecycleHooks"] = args.InitialLifecycleHooks
		inputs["launchConfiguration"] = args.LaunchConfiguration
		inputs["launchTemplate"] = args.LaunchTemplate
		inputs["loadBalancers"] = args.LoadBalancers
		inputs["maxSize"] = args.MaxSize
		inputs["metricsGranularity"] = args.MetricsGranularity
		inputs["minElbCapacity"] = args.MinElbCapacity
		inputs["minSize"] = args.MinSize
		inputs["mixedInstancesPolicy"] = args.MixedInstancesPolicy
		inputs["name"] = args.Name
		inputs["namePrefix"] = args.NamePrefix
		inputs["placementGroup"] = args.PlacementGroup
		inputs["protectFromScaleIn"] = args.ProtectFromScaleIn
		inputs["serviceLinkedRoleArn"] = args.ServiceLinkedRoleArn
		inputs["suspendedProcesses"] = args.SuspendedProcesses
		inputs["tags"] = args.Tags
		inputs["tagsCollection"] = args.TagsCollection
		inputs["targetGroupArns"] = args.TargetGroupArns
		inputs["terminationPolicies"] = args.TerminationPolicies
		inputs["vpcZoneIdentifiers"] = args.VpcZoneIdentifiers
		inputs["waitForCapacityTimeout"] = args.WaitForCapacityTimeout
		inputs["waitForElbCapacity"] = args.WaitForElbCapacity
	}
	var resource Group
	err := ctx.RegisterResource("aws:autoscaling/group:Group", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupState, opts ...pulumi.ResourceOpt) (*Group, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["availabilityZones"] = state.AvailabilityZones
		inputs["defaultCooldown"] = state.DefaultCooldown
		inputs["desiredCapacity"] = state.DesiredCapacity
		inputs["enabledMetrics"] = state.EnabledMetrics
		inputs["forceDelete"] = state.ForceDelete
		inputs["healthCheckGracePeriod"] = state.HealthCheckGracePeriod
		inputs["healthCheckType"] = state.HealthCheckType
		inputs["initialLifecycleHooks"] = state.InitialLifecycleHooks
		inputs["launchConfiguration"] = state.LaunchConfiguration
		inputs["launchTemplate"] = state.LaunchTemplate
		inputs["loadBalancers"] = state.LoadBalancers
		inputs["maxSize"] = state.MaxSize
		inputs["metricsGranularity"] = state.MetricsGranularity
		inputs["minElbCapacity"] = state.MinElbCapacity
		inputs["minSize"] = state.MinSize
		inputs["mixedInstancesPolicy"] = state.MixedInstancesPolicy
		inputs["name"] = state.Name
		inputs["namePrefix"] = state.NamePrefix
		inputs["placementGroup"] = state.PlacementGroup
		inputs["protectFromScaleIn"] = state.ProtectFromScaleIn
		inputs["serviceLinkedRoleArn"] = state.ServiceLinkedRoleArn
		inputs["suspendedProcesses"] = state.SuspendedProcesses
		inputs["tags"] = state.Tags
		inputs["tagsCollection"] = state.TagsCollection
		inputs["targetGroupArns"] = state.TargetGroupArns
		inputs["terminationPolicies"] = state.TerminationPolicies
		inputs["vpcZoneIdentifiers"] = state.VpcZoneIdentifiers
		inputs["waitForCapacityTimeout"] = state.WaitForCapacityTimeout
		inputs["waitForElbCapacity"] = state.WaitForElbCapacity
	}
	var resource Group
	err := ctx.ReadResource("aws:autoscaling/group:Group", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Group) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Group) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Group resources.
type GroupState struct {
	// The ARN for this AutoScaling Group
	Arn pulumi.StringInput `pulumi:"arn"`
	// A list of one or more availability zones for the group. This parameter should not be specified when using `vpcZoneIdentifier`.
	AvailabilityZones pulumi.ArrayInput `pulumi:"availabilityZones"`
	// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
	DefaultCooldown pulumi.IntInput `pulumi:"defaultCooldown"`
	// The number of Amazon EC2 instances that
	// should be running in the group. (See also Waiting for
	// Capacity below.)
	DesiredCapacity pulumi.IntInput `pulumi:"desiredCapacity"`
	// A list of metrics to collect. The allowed values are `GroupMinSize`, `GroupMaxSize`, `GroupDesiredCapacity`, `GroupInServiceInstances`, `GroupPendingInstances`, `GroupStandbyInstances`, `GroupTerminatingInstances`, `GroupTotalInstances`.
	// * `waitForCapacityTimeout` (Default: "10m") A maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
	// wait for ASG instances to be healthy before timing out.  (See also Waiting
	// for Capacity below.) Setting this to "0" causes
	// this provider to skip all Capacity Waiting behavior.
	EnabledMetrics pulumi.ArrayInput `pulumi:"enabledMetrics"`
	// Allows deleting the autoscaling group without waiting
	// for all instances in the pool to terminate.  You can force an autoscaling group to delete
	// even if it's in the process of scaling a resource. Normally, this provider
	// drains all the instances before deleting the group.  This bypasses that
	// behavior and potentially leaves resources dangling.
	ForceDelete pulumi.BoolInput `pulumi:"forceDelete"`
	// Time (in seconds) after instance comes into service before checking health.
	HealthCheckGracePeriod pulumi.IntInput `pulumi:"healthCheckGracePeriod"`
	// "EC2" or "ELB". Controls how health checking is done.
	HealthCheckType pulumi.StringInput `pulumi:"healthCheckType"`
	// One or more
	// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
	// to attach to the autoscaling group **before** instances are launched. The
	// syntax is exactly the same as the separate
	// [`autoscaling.LifecycleHook`](https://www.terraform.io/docs/providers/aws/r/autoscaling_lifecycle_hooks.html)
	// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
	// a new autoscaling group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
	InitialLifecycleHooks pulumi.ArrayInput `pulumi:"initialLifecycleHooks"`
	// The name of the launch configuration to use.
	LaunchConfiguration pulumi.StringInput `pulumi:"launchConfiguration"`
	// Nested argument containing launch template settings along with the overrides to specify multiple instance types. Defined below.
	LaunchTemplate pulumi.AnyInput `pulumi:"launchTemplate"`
	// A list of elastic load balancer names to add to the autoscaling
	// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead.
	LoadBalancers pulumi.ArrayInput `pulumi:"loadBalancers"`
	// The maximum size of the auto scale group.
	MaxSize pulumi.IntInput `pulumi:"maxSize"`
	// The granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
	MetricsGranularity pulumi.StringInput `pulumi:"metricsGranularity"`
	// Setting this causes this provider to wait for
	// this number of instances from this autoscaling group to show up healthy in the
	// ELB only on creation. Updates will not wait on ELB instance number changes.
	// (See also Waiting for Capacity below.)
	MinElbCapacity pulumi.IntInput `pulumi:"minElbCapacity"`
	// The minimum size of the auto scale group.
	// (See also Waiting for Capacity below.)
	MinSize pulumi.IntInput `pulumi:"minSize"`
	// Configuration block containing settings to define launch targets for Auto Scaling groups. Defined below.
	MixedInstancesPolicy pulumi.AnyInput `pulumi:"mixedInstancesPolicy"`
	// The name of the auto scaling group. By default generated by this provider.
	Name pulumi.StringInput `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
	// The name of the placement group into which you'll launch your instances, if any.
	PlacementGroup pulumi.StringInput `pulumi:"placementGroup"`
	// Allows setting instance protection. The
	// autoscaling group will not select instances with this setting for terminination
	// during scale in events.
	ProtectFromScaleIn pulumi.BoolInput `pulumi:"protectFromScaleIn"`
	// The ARN of the service-linked role that the ASG will use to call other AWS services
	ServiceLinkedRoleArn pulumi.StringInput `pulumi:"serviceLinkedRoleArn"`
	// A list of processes to suspend for the AutoScaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`.
	// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your autoscaling group from functioning properly.
	SuspendedProcesses pulumi.ArrayInput `pulumi:"suspendedProcesses"`
	// A list of tag blocks. Tags documented below.
	Tags pulumi.ArrayInput `pulumi:"tags"`
	// A list of tag blocks (maps). Tags documented below.
	TagsCollection pulumi.ArrayInput `pulumi:"tagsCollection"`
	// A list of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing.
	TargetGroupArns pulumi.ArrayInput `pulumi:"targetGroupArns"`
	// A list of policies to decide how the instances in the auto scale group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`.
	TerminationPolicies pulumi.ArrayInput `pulumi:"terminationPolicies"`
	// A list of subnet IDs to launch resources in.
	VpcZoneIdentifiers pulumi.ArrayInput `pulumi:"vpcZoneIdentifiers"`
	WaitForCapacityTimeout pulumi.StringInput `pulumi:"waitForCapacityTimeout"`
	// Setting this will cause this provider to wait
	// for exactly this number of healthy instances from this autoscaling group in
	// all attached load balancers on both create and update operations. (Takes
	// precedence over `minElbCapacity` behavior.)
	// (See also Waiting for Capacity below.)
	WaitForElbCapacity pulumi.IntInput `pulumi:"waitForElbCapacity"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// A list of one or more availability zones for the group. This parameter should not be specified when using `vpcZoneIdentifier`.
	AvailabilityZones pulumi.ArrayInput `pulumi:"availabilityZones"`
	// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
	DefaultCooldown pulumi.IntInput `pulumi:"defaultCooldown"`
	// The number of Amazon EC2 instances that
	// should be running in the group. (See also Waiting for
	// Capacity below.)
	DesiredCapacity pulumi.IntInput `pulumi:"desiredCapacity"`
	// A list of metrics to collect. The allowed values are `GroupMinSize`, `GroupMaxSize`, `GroupDesiredCapacity`, `GroupInServiceInstances`, `GroupPendingInstances`, `GroupStandbyInstances`, `GroupTerminatingInstances`, `GroupTotalInstances`.
	// * `waitForCapacityTimeout` (Default: "10m") A maximum
	// [duration](https://golang.org/pkg/time/#ParseDuration) that this provider should
	// wait for ASG instances to be healthy before timing out.  (See also Waiting
	// for Capacity below.) Setting this to "0" causes
	// this provider to skip all Capacity Waiting behavior.
	EnabledMetrics pulumi.ArrayInput `pulumi:"enabledMetrics"`
	// Allows deleting the autoscaling group without waiting
	// for all instances in the pool to terminate.  You can force an autoscaling group to delete
	// even if it's in the process of scaling a resource. Normally, this provider
	// drains all the instances before deleting the group.  This bypasses that
	// behavior and potentially leaves resources dangling.
	ForceDelete pulumi.BoolInput `pulumi:"forceDelete"`
	// Time (in seconds) after instance comes into service before checking health.
	HealthCheckGracePeriod pulumi.IntInput `pulumi:"healthCheckGracePeriod"`
	// "EC2" or "ELB". Controls how health checking is done.
	HealthCheckType pulumi.StringInput `pulumi:"healthCheckType"`
	// One or more
	// [Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)
	// to attach to the autoscaling group **before** instances are launched. The
	// syntax is exactly the same as the separate
	// [`autoscaling.LifecycleHook`](https://www.terraform.io/docs/providers/aws/r/autoscaling_lifecycle_hooks.html)
	// resource, without the `autoscalingGroupName` attribute. Please note that this will only work when creating
	// a new autoscaling group. For all other use-cases, please use `autoscaling.LifecycleHook` resource.
	InitialLifecycleHooks pulumi.ArrayInput `pulumi:"initialLifecycleHooks"`
	// The name of the launch configuration to use.
	LaunchConfiguration pulumi.StringInput `pulumi:"launchConfiguration"`
	// Nested argument containing launch template settings along with the overrides to specify multiple instance types. Defined below.
	LaunchTemplate pulumi.AnyInput `pulumi:"launchTemplate"`
	// A list of elastic load balancer names to add to the autoscaling
	// group names. Only valid for classic load balancers. For ALBs, use `targetGroupArns` instead.
	LoadBalancers pulumi.ArrayInput `pulumi:"loadBalancers"`
	// The maximum size of the auto scale group.
	MaxSize pulumi.IntInput `pulumi:"maxSize"`
	// The granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.
	MetricsGranularity pulumi.StringInput `pulumi:"metricsGranularity"`
	// Setting this causes this provider to wait for
	// this number of instances from this autoscaling group to show up healthy in the
	// ELB only on creation. Updates will not wait on ELB instance number changes.
	// (See also Waiting for Capacity below.)
	MinElbCapacity pulumi.IntInput `pulumi:"minElbCapacity"`
	// The minimum size of the auto scale group.
	// (See also Waiting for Capacity below.)
	MinSize pulumi.IntInput `pulumi:"minSize"`
	// Configuration block containing settings to define launch targets for Auto Scaling groups. Defined below.
	MixedInstancesPolicy pulumi.AnyInput `pulumi:"mixedInstancesPolicy"`
	// The name of the auto scaling group. By default generated by this provider.
	Name pulumi.StringInput `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
	// The name of the placement group into which you'll launch your instances, if any.
	PlacementGroup pulumi.StringInput `pulumi:"placementGroup"`
	// Allows setting instance protection. The
	// autoscaling group will not select instances with this setting for terminination
	// during scale in events.
	ProtectFromScaleIn pulumi.BoolInput `pulumi:"protectFromScaleIn"`
	// The ARN of the service-linked role that the ASG will use to call other AWS services
	ServiceLinkedRoleArn pulumi.StringInput `pulumi:"serviceLinkedRoleArn"`
	// A list of processes to suspend for the AutoScaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`.
	// Note that if you suspend either the `Launch` or `Terminate` process types, it can prevent your autoscaling group from functioning properly.
	SuspendedProcesses pulumi.ArrayInput `pulumi:"suspendedProcesses"`
	// A list of tag blocks. Tags documented below.
	Tags pulumi.ArrayInput `pulumi:"tags"`
	// A list of tag blocks (maps). Tags documented below.
	TagsCollection pulumi.ArrayInput `pulumi:"tagsCollection"`
	// A list of `alb.TargetGroup` ARNs, for use with Application or Network Load Balancing.
	TargetGroupArns pulumi.ArrayInput `pulumi:"targetGroupArns"`
	// A list of policies to decide how the instances in the auto scale group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`.
	TerminationPolicies pulumi.ArrayInput `pulumi:"terminationPolicies"`
	// A list of subnet IDs to launch resources in.
	VpcZoneIdentifiers pulumi.ArrayInput `pulumi:"vpcZoneIdentifiers"`
	WaitForCapacityTimeout pulumi.StringInput `pulumi:"waitForCapacityTimeout"`
	// Setting this will cause this provider to wait
	// for exactly this number of healthy instances from this autoscaling group in
	// all attached load balancers on both create and update operations. (Takes
	// precedence over `minElbCapacity` behavior.)
	// (See also Waiting for Capacity below.)
	WaitForElbCapacity pulumi.IntInput `pulumi:"waitForElbCapacity"`
}
