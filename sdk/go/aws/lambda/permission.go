// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates a Lambda permission to allow external sources invoking the Lambda function
// (e.g. CloudWatch Event Rule, SNS or S3).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/lambda_permission.html.markdown.
type Permission struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
	Action pulumi.StringOutput `pulumi:"action"`

	// The Event Source Token to validate.  Used with [Alexa Skills][1].
	EventSourceToken pulumi.StringOutput `pulumi:"eventSourceToken"`

	// Name of the Lambda function whose resource policy you are updating
	Function pulumi.StringOutput `pulumi:"function"`

	// The principal who is getting this permission.
	// e.g. `s3.amazonaws.com`, an AWS account ID, or any valid AWS service principal
	// such as `events.amazonaws.com` or `sns.amazonaws.com`.
	Principal pulumi.StringOutput `pulumi:"principal"`

	// Query parameter to specify function version or alias name.
	// The permission will then apply to the specific qualified ARN.
	// e.g. `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
	Qualifier pulumi.StringOutput `pulumi:"qualifier"`

	// This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
	SourceAccount pulumi.StringOutput `pulumi:"sourceAccount"`

	// When granting Amazon S3 or CloudWatch Events permission to
	// invoke your function, you should specify this field with the Amazon Resource Name (ARN)
	// for the S3 Bucket or CloudWatch Events Rule as its value.  This ensures that only events
	// generated from the specified bucket or rule can invoke the function.
	// API Gateway ARNs have a unique structure described
	// [here](http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
	SourceArn pulumi.StringOutput `pulumi:"sourceArn"`

	// A unique statement identifier. By default generated by this provider.
	StatementId pulumi.StringOutput `pulumi:"statementId"`

	// A statement identifier prefix. This provider will generate a unique suffix. Conflicts with `statementId`.
	StatementIdPrefix pulumi.StringOutput `pulumi:"statementIdPrefix"`
}

// NewPermission registers a new resource with the given unique name, arguments, and options.
func NewPermission(ctx *pulumi.Context,
	name string, args *PermissionArgs, opts ...pulumi.ResourceOpt) (*Permission, error) {
	if args == nil || args.Action == nil {
		return nil, errors.New("missing required argument 'Action'")
	}
	if args == nil || args.Function == nil {
		return nil, errors.New("missing required argument 'Function'")
	}
	if args == nil || args.Principal == nil {
		return nil, errors.New("missing required argument 'Principal'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["action"] = args.Action
		inputs["eventSourceToken"] = args.EventSourceToken
		inputs["function"] = args.Function
		inputs["principal"] = args.Principal
		inputs["qualifier"] = args.Qualifier
		inputs["sourceAccount"] = args.SourceAccount
		inputs["sourceArn"] = args.SourceArn
		inputs["statementId"] = args.StatementId
		inputs["statementIdPrefix"] = args.StatementIdPrefix
	}
	var resource Permission
	err := ctx.RegisterResource("aws:lambda/permission:Permission", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermission gets an existing Permission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermission(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PermissionState, opts ...pulumi.ResourceOpt) (*Permission, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["action"] = state.Action
		inputs["eventSourceToken"] = state.EventSourceToken
		inputs["function"] = state.Function
		inputs["principal"] = state.Principal
		inputs["qualifier"] = state.Qualifier
		inputs["sourceAccount"] = state.SourceAccount
		inputs["sourceArn"] = state.SourceArn
		inputs["statementId"] = state.StatementId
		inputs["statementIdPrefix"] = state.StatementIdPrefix
	}
	var resource Permission
	err := ctx.ReadResource("aws:lambda/permission:Permission", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Permission) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Permission) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Permission resources.
type PermissionState struct {
	// The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
	Action pulumi.StringInput `pulumi:"action"`
	// The Event Source Token to validate.  Used with [Alexa Skills][1].
	EventSourceToken pulumi.StringInput `pulumi:"eventSourceToken"`
	// Name of the Lambda function whose resource policy you are updating
	Function pulumi.StringInput `pulumi:"function"`
	// The principal who is getting this permission.
	// e.g. `s3.amazonaws.com`, an AWS account ID, or any valid AWS service principal
	// such as `events.amazonaws.com` or `sns.amazonaws.com`.
	Principal pulumi.StringInput `pulumi:"principal"`
	// Query parameter to specify function version or alias name.
	// The permission will then apply to the specific qualified ARN.
	// e.g. `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
	Qualifier pulumi.StringInput `pulumi:"qualifier"`
	// This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
	SourceAccount pulumi.StringInput `pulumi:"sourceAccount"`
	// When granting Amazon S3 or CloudWatch Events permission to
	// invoke your function, you should specify this field with the Amazon Resource Name (ARN)
	// for the S3 Bucket or CloudWatch Events Rule as its value.  This ensures that only events
	// generated from the specified bucket or rule can invoke the function.
	// API Gateway ARNs have a unique structure described
	// [here](http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
	SourceArn pulumi.StringInput `pulumi:"sourceArn"`
	// A unique statement identifier. By default generated by this provider.
	StatementId pulumi.StringInput `pulumi:"statementId"`
	// A statement identifier prefix. This provider will generate a unique suffix. Conflicts with `statementId`.
	StatementIdPrefix pulumi.StringInput `pulumi:"statementIdPrefix"`
}

// The set of arguments for constructing a Permission resource.
type PermissionArgs struct {
	// The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
	Action pulumi.StringInput `pulumi:"action"`
	// The Event Source Token to validate.  Used with [Alexa Skills][1].
	EventSourceToken pulumi.StringInput `pulumi:"eventSourceToken"`
	// Name of the Lambda function whose resource policy you are updating
	Function pulumi.StringInput `pulumi:"function"`
	// The principal who is getting this permission.
	// e.g. `s3.amazonaws.com`, an AWS account ID, or any valid AWS service principal
	// such as `events.amazonaws.com` or `sns.amazonaws.com`.
	Principal pulumi.StringInput `pulumi:"principal"`
	// Query parameter to specify function version or alias name.
	// The permission will then apply to the specific qualified ARN.
	// e.g. `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
	Qualifier pulumi.StringInput `pulumi:"qualifier"`
	// This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
	SourceAccount pulumi.StringInput `pulumi:"sourceAccount"`
	// When granting Amazon S3 or CloudWatch Events permission to
	// invoke your function, you should specify this field with the Amazon Resource Name (ARN)
	// for the S3 Bucket or CloudWatch Events Rule as its value.  This ensures that only events
	// generated from the specified bucket or rule can invoke the function.
	// API Gateway ARNs have a unique structure described
	// [here](http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
	SourceArn pulumi.StringInput `pulumi:"sourceArn"`
	// A unique statement identifier. By default generated by this provider.
	StatementId pulumi.StringInput `pulumi:"statementId"`
	// A statement identifier prefix. This provider will generate a unique suffix. Conflicts with `statementId`.
	StatementIdPrefix pulumi.StringInput `pulumi:"statementIdPrefix"`
}
