// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Lambda Layer Version resource. Lambda Layers allow you to reuse shared bits of code across multiple lambda functions.
// 
// For information about Lambda Layers and how to use them, see [AWS Lambda Layers][1]
// 
// ## Specifying the Deployment Package
// 
// AWS Lambda Layers expect source code to be provided as a deployment package whose structure varies depending on which `compatibleRuntimes` this layer specifies.
// See [Runtimes][2] for the valid values of `compatibleRuntimes`.
// 
// Once you have created your deployment package you can specify it either directly as a local file (using the `filename` argument) or
// indirectly via Amazon S3 (using the `s3Bucket`, `s3Key` and `s3ObjectVersion` arguments). When providing the deployment
// package via S3 it may be useful to use the `s3.BucketObject` resource to upload it.
// 
// For larger deployment packages it is recommended by Amazon to upload via S3, since the S3 API has better support for uploading
// large files efficiently.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/lambda_layer_version.html.markdown.
type LayerVersion struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The Amazon Resource Name (ARN) of the Lambda Layer with version.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// A list of [Runtimes][2] this layer is compatible with. Up to 5 runtimes can be specified.
	CompatibleRuntimes pulumi.ArrayOutput `pulumi:"compatibleRuntimes"`

	// The date this resource was created.
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`

	// Description of what your Lambda Layer does.
	Description pulumi.StringOutput `pulumi:"description"`

	// The path to the function's deployment package within the local filesystem. If defined, The `s3_`-prefixed options cannot be used.
	Code pulumi.StringOutput `pulumi:"code"`

	// The Amazon Resource Name (ARN) of the Lambda Layer without version.
	LayerArn pulumi.StringOutput `pulumi:"layerArn"`

	// A unique name for your Lambda Layer
	LayerName pulumi.StringOutput `pulumi:"layerName"`

	// License info for your Lambda Layer. See [License Info][3].
	LicenseInfo pulumi.StringOutput `pulumi:"licenseInfo"`

	// The S3 bucket location containing the function's deployment package. Conflicts with `filename`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket pulumi.StringOutput `pulumi:"s3Bucket"`

	// The S3 key of an object containing the function's deployment package. Conflicts with `filename`.
	S3Key pulumi.StringOutput `pulumi:"s3Key"`

	// The object version containing the function's deployment package. Conflicts with `filename`.
	S3ObjectVersion pulumi.StringOutput `pulumi:"s3ObjectVersion"`

	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`. The usual way to set this is `${filebase64sha256("file.zip")}` (this provider 0.11.12 or later) or `${base64sha256(file("file.zip"))}` (this provider 0.11.11 and earlier), where "file.zip" is the local filename of the lambda layer source archive.
	SourceCodeHash pulumi.StringOutput `pulumi:"sourceCodeHash"`

	// The size in bytes of the function .zip file.
	SourceCodeSize pulumi.IntOutput `pulumi:"sourceCodeSize"`

	// This Lamba Layer version.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewLayerVersion registers a new resource with the given unique name, arguments, and options.
func NewLayerVersion(ctx *pulumi.Context,
	name string, args *LayerVersionArgs, opts ...pulumi.ResourceOpt) (*LayerVersion, error) {
	if args == nil || args.LayerName == nil {
		return nil, errors.New("missing required argument 'LayerName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["compatibleRuntimes"] = args.CompatibleRuntimes
		inputs["description"] = args.Description
		inputs["code"] = args.Code
		inputs["layerName"] = args.LayerName
		inputs["licenseInfo"] = args.LicenseInfo
		inputs["s3Bucket"] = args.S3Bucket
		inputs["s3Key"] = args.S3Key
		inputs["s3ObjectVersion"] = args.S3ObjectVersion
		inputs["sourceCodeHash"] = args.SourceCodeHash
	}
	var resource LayerVersion
	err := ctx.RegisterResource("aws:lambda/layerVersion:LayerVersion", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLayerVersion gets an existing LayerVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLayerVersion(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LayerVersionState, opts ...pulumi.ResourceOpt) (*LayerVersion, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["compatibleRuntimes"] = state.CompatibleRuntimes
		inputs["createdDate"] = state.CreatedDate
		inputs["description"] = state.Description
		inputs["code"] = state.Code
		inputs["layerArn"] = state.LayerArn
		inputs["layerName"] = state.LayerName
		inputs["licenseInfo"] = state.LicenseInfo
		inputs["s3Bucket"] = state.S3Bucket
		inputs["s3Key"] = state.S3Key
		inputs["s3ObjectVersion"] = state.S3ObjectVersion
		inputs["sourceCodeHash"] = state.SourceCodeHash
		inputs["sourceCodeSize"] = state.SourceCodeSize
		inputs["version"] = state.Version
	}
	var resource LayerVersion
	err := ctx.ReadResource("aws:lambda/layerVersion:LayerVersion", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *LayerVersion) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *LayerVersion) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering LayerVersion resources.
type LayerVersionState struct {
	// The Amazon Resource Name (ARN) of the Lambda Layer with version.
	Arn pulumi.StringInput `pulumi:"arn"`
	// A list of [Runtimes][2] this layer is compatible with. Up to 5 runtimes can be specified.
	CompatibleRuntimes pulumi.ArrayInput `pulumi:"compatibleRuntimes"`
	// The date this resource was created.
	CreatedDate pulumi.StringInput `pulumi:"createdDate"`
	// Description of what your Lambda Layer does.
	Description pulumi.StringInput `pulumi:"description"`
	// The path to the function's deployment package within the local filesystem. If defined, The `s3_`-prefixed options cannot be used.
	Code pulumi.StringInput `pulumi:"code"`
	// The Amazon Resource Name (ARN) of the Lambda Layer without version.
	LayerArn pulumi.StringInput `pulumi:"layerArn"`
	// A unique name for your Lambda Layer
	LayerName pulumi.StringInput `pulumi:"layerName"`
	// License info for your Lambda Layer. See [License Info][3].
	LicenseInfo pulumi.StringInput `pulumi:"licenseInfo"`
	// The S3 bucket location containing the function's deployment package. Conflicts with `filename`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket pulumi.StringInput `pulumi:"s3Bucket"`
	// The S3 key of an object containing the function's deployment package. Conflicts with `filename`.
	S3Key pulumi.StringInput `pulumi:"s3Key"`
	// The object version containing the function's deployment package. Conflicts with `filename`.
	S3ObjectVersion pulumi.StringInput `pulumi:"s3ObjectVersion"`
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`. The usual way to set this is `${filebase64sha256("file.zip")}` (this provider 0.11.12 or later) or `${base64sha256(file("file.zip"))}` (this provider 0.11.11 and earlier), where "file.zip" is the local filename of the lambda layer source archive.
	SourceCodeHash pulumi.StringInput `pulumi:"sourceCodeHash"`
	// The size in bytes of the function .zip file.
	SourceCodeSize pulumi.IntInput `pulumi:"sourceCodeSize"`
	// This Lamba Layer version.
	Version pulumi.StringInput `pulumi:"version"`
}

// The set of arguments for constructing a LayerVersion resource.
type LayerVersionArgs struct {
	// A list of [Runtimes][2] this layer is compatible with. Up to 5 runtimes can be specified.
	CompatibleRuntimes pulumi.ArrayInput `pulumi:"compatibleRuntimes"`
	// Description of what your Lambda Layer does.
	Description pulumi.StringInput `pulumi:"description"`
	// The path to the function's deployment package within the local filesystem. If defined, The `s3_`-prefixed options cannot be used.
	Code pulumi.StringInput `pulumi:"code"`
	// A unique name for your Lambda Layer
	LayerName pulumi.StringInput `pulumi:"layerName"`
	// License info for your Lambda Layer. See [License Info][3].
	LicenseInfo pulumi.StringInput `pulumi:"licenseInfo"`
	// The S3 bucket location containing the function's deployment package. Conflicts with `filename`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket pulumi.StringInput `pulumi:"s3Bucket"`
	// The S3 key of an object containing the function's deployment package. Conflicts with `filename`.
	S3Key pulumi.StringInput `pulumi:"s3Key"`
	// The object version containing the function's deployment package. Conflicts with `filename`.
	S3ObjectVersion pulumi.StringInput `pulumi:"s3ObjectVersion"`
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`. The usual way to set this is `${filebase64sha256("file.zip")}` (this provider 0.11.12 or later) or `${base64sha256(file("file.zip"))}` (this provider 0.11.11 and earlier), where "file.zip" is the local filename of the lambda layer source archive.
	SourceCodeHash pulumi.StringInput `pulumi:"sourceCodeHash"`
}
