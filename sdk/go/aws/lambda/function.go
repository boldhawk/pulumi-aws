// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/lambda_function.html.markdown.
type Function struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The Amazon Resource Name (ARN) identifying your Lambda Function.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// Nested block to configure the function's *dead letter queue*. See details below.
	DeadLetterConfig pulumi.AnyOutput `pulumi:"deadLetterConfig"`

	// Description of what your Lambda Function does.
	Description pulumi.StringOutput `pulumi:"description"`

	// The Lambda environment's configuration settings. Fields documented below.
	Environment pulumi.AnyOutput `pulumi:"environment"`

	// The path to the function's deployment package within the local filesystem. If defined, The `s3_`-prefixed options cannot be used.
	Code pulumi.StringOutput `pulumi:"code"`

	// A unique name for your Lambda Function.
	Name pulumi.StringOutput `pulumi:"name"`

	// The function [entrypoint][3] in your code.
	Handler pulumi.StringOutput `pulumi:"handler"`

	// The ARN to be used for invoking Lambda Function from API Gateway - to be used in [`apigateway.Integration`](https://www.terraform.io/docs/providers/aws/r/api_gateway_integration.html)'s `uri`
	InvokeArn pulumi.StringOutput `pulumi:"invokeArn"`

	// The ARN for the KMS encryption key.
	KmsKeyArn pulumi.StringOutput `pulumi:"kmsKeyArn"`

	// The date this resource was last modified.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`

	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers][10]
	Layers pulumi.ArrayOutput `pulumi:"layers"`

	// Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits][5]
	MemorySize pulumi.IntOutput `pulumi:"memorySize"`

	// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
	Publish pulumi.BoolOutput `pulumi:"publish"`

	// The Amazon Resource Name (ARN) identifying your Lambda Function Version
	// (if versioning is enabled via `publish = true`).
	QualifiedArn pulumi.StringOutput `pulumi:"qualifiedArn"`

	// The amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency][9]
	ReservedConcurrentExecutions pulumi.IntOutput `pulumi:"reservedConcurrentExecutions"`

	// IAM role attached to the Lambda Function. This governs both who / what can invoke your Lambda Function, as well as what resources our Lambda Function has access to. See [Lambda Permission Model][4] for more details.
	Role pulumi.StringOutput `pulumi:"role"`

	// See [Runtimes][6] for valid values.
	Runtime pulumi.StringOutput `pulumi:"runtime"`

	// The S3 bucket location containing the function's deployment package. Conflicts with `filename`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket pulumi.StringOutput `pulumi:"s3Bucket"`

	// The S3 key of an object containing the function's deployment package. Conflicts with `filename`.
	S3Key pulumi.StringOutput `pulumi:"s3Key"`

	// The object version containing the function's deployment package. Conflicts with `filename`.
	S3ObjectVersion pulumi.StringOutput `pulumi:"s3ObjectVersion"`

	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`. The usual way to set this is `filebase64sha256("file.zip")` (this provider 0.11.12 and later) or `base64sha256(file("file.zip"))` (this provider 0.11.11 and earlier), where "file.zip" is the local filename of the lambda function source archive.
	SourceCodeHash pulumi.StringOutput `pulumi:"sourceCodeHash"`

	// The size in bytes of the function .zip file.
	SourceCodeSize pulumi.IntOutput `pulumi:"sourceCodeSize"`

	// A mapping of tags to assign to the object.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits][5]
	Timeout pulumi.IntOutput `pulumi:"timeout"`

	TracingConfig pulumi.AnyOutput `pulumi:"tracingConfig"`

	// Latest published version of your Lambda Function.
	Version pulumi.StringOutput `pulumi:"version"`

	// Provide this to allow your function to access your VPC. Fields documented below. See [Lambda in VPC][7]
	VpcConfig pulumi.AnyOutput `pulumi:"vpcConfig"`
}

// NewFunction registers a new resource with the given unique name, arguments, and options.
func NewFunction(ctx *pulumi.Context,
	name string, args *FunctionArgs, opts ...pulumi.ResourceOpt) (*Function, error) {
	if args == nil || args.Handler == nil {
		return nil, errors.New("missing required argument 'Handler'")
	}
	if args == nil || args.Role == nil {
		return nil, errors.New("missing required argument 'Role'")
	}
	if args == nil || args.Runtime == nil {
		return nil, errors.New("missing required argument 'Runtime'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["deadLetterConfig"] = args.DeadLetterConfig
		inputs["description"] = args.Description
		inputs["environment"] = args.Environment
		inputs["code"] = args.Code
		inputs["name"] = args.Name
		inputs["handler"] = args.Handler
		inputs["kmsKeyArn"] = args.KmsKeyArn
		inputs["layers"] = args.Layers
		inputs["memorySize"] = args.MemorySize
		inputs["publish"] = args.Publish
		inputs["reservedConcurrentExecutions"] = args.ReservedConcurrentExecutions
		inputs["role"] = args.Role
		inputs["runtime"] = args.Runtime
		inputs["s3Bucket"] = args.S3Bucket
		inputs["s3Key"] = args.S3Key
		inputs["s3ObjectVersion"] = args.S3ObjectVersion
		inputs["sourceCodeHash"] = args.SourceCodeHash
		inputs["tags"] = args.Tags
		inputs["timeout"] = args.Timeout
		inputs["tracingConfig"] = args.TracingConfig
		inputs["vpcConfig"] = args.VpcConfig
	}
	var resource Function
	err := ctx.RegisterResource("aws:lambda/function:Function", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunction gets an existing Function resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunction(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FunctionState, opts ...pulumi.ResourceOpt) (*Function, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["deadLetterConfig"] = state.DeadLetterConfig
		inputs["description"] = state.Description
		inputs["environment"] = state.Environment
		inputs["code"] = state.Code
		inputs["name"] = state.Name
		inputs["handler"] = state.Handler
		inputs["invokeArn"] = state.InvokeArn
		inputs["kmsKeyArn"] = state.KmsKeyArn
		inputs["lastModified"] = state.LastModified
		inputs["layers"] = state.Layers
		inputs["memorySize"] = state.MemorySize
		inputs["publish"] = state.Publish
		inputs["qualifiedArn"] = state.QualifiedArn
		inputs["reservedConcurrentExecutions"] = state.ReservedConcurrentExecutions
		inputs["role"] = state.Role
		inputs["runtime"] = state.Runtime
		inputs["s3Bucket"] = state.S3Bucket
		inputs["s3Key"] = state.S3Key
		inputs["s3ObjectVersion"] = state.S3ObjectVersion
		inputs["sourceCodeHash"] = state.SourceCodeHash
		inputs["sourceCodeSize"] = state.SourceCodeSize
		inputs["tags"] = state.Tags
		inputs["timeout"] = state.Timeout
		inputs["tracingConfig"] = state.TracingConfig
		inputs["version"] = state.Version
		inputs["vpcConfig"] = state.VpcConfig
	}
	var resource Function
	err := ctx.ReadResource("aws:lambda/function:Function", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Function) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Function) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Function resources.
type FunctionState struct {
	// The Amazon Resource Name (ARN) identifying your Lambda Function.
	Arn pulumi.StringInput `pulumi:"arn"`
	// Nested block to configure the function's *dead letter queue*. See details below.
	DeadLetterConfig pulumi.AnyInput `pulumi:"deadLetterConfig"`
	// Description of what your Lambda Function does.
	Description pulumi.StringInput `pulumi:"description"`
	// The Lambda environment's configuration settings. Fields documented below.
	Environment pulumi.AnyInput `pulumi:"environment"`
	// The path to the function's deployment package within the local filesystem. If defined, The `s3_`-prefixed options cannot be used.
	Code pulumi.StringInput `pulumi:"code"`
	// A unique name for your Lambda Function.
	Name pulumi.StringInput `pulumi:"name"`
	// The function [entrypoint][3] in your code.
	Handler pulumi.StringInput `pulumi:"handler"`
	// The ARN to be used for invoking Lambda Function from API Gateway - to be used in [`apigateway.Integration`](https://www.terraform.io/docs/providers/aws/r/api_gateway_integration.html)'s `uri`
	InvokeArn pulumi.StringInput `pulumi:"invokeArn"`
	// The ARN for the KMS encryption key.
	KmsKeyArn pulumi.StringInput `pulumi:"kmsKeyArn"`
	// The date this resource was last modified.
	LastModified pulumi.StringInput `pulumi:"lastModified"`
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers][10]
	Layers pulumi.ArrayInput `pulumi:"layers"`
	// Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits][5]
	MemorySize pulumi.IntInput `pulumi:"memorySize"`
	// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
	Publish pulumi.BoolInput `pulumi:"publish"`
	// The Amazon Resource Name (ARN) identifying your Lambda Function Version
	// (if versioning is enabled via `publish = true`).
	QualifiedArn pulumi.StringInput `pulumi:"qualifiedArn"`
	// The amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency][9]
	ReservedConcurrentExecutions pulumi.IntInput `pulumi:"reservedConcurrentExecutions"`
	// IAM role attached to the Lambda Function. This governs both who / what can invoke your Lambda Function, as well as what resources our Lambda Function has access to. See [Lambda Permission Model][4] for more details.
	Role pulumi.StringInput `pulumi:"role"`
	// See [Runtimes][6] for valid values.
	Runtime pulumi.StringInput `pulumi:"runtime"`
	// The S3 bucket location containing the function's deployment package. Conflicts with `filename`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket pulumi.StringInput `pulumi:"s3Bucket"`
	// The S3 key of an object containing the function's deployment package. Conflicts with `filename`.
	S3Key pulumi.StringInput `pulumi:"s3Key"`
	// The object version containing the function's deployment package. Conflicts with `filename`.
	S3ObjectVersion pulumi.StringInput `pulumi:"s3ObjectVersion"`
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`. The usual way to set this is `filebase64sha256("file.zip")` (this provider 0.11.12 and later) or `base64sha256(file("file.zip"))` (this provider 0.11.11 and earlier), where "file.zip" is the local filename of the lambda function source archive.
	SourceCodeHash pulumi.StringInput `pulumi:"sourceCodeHash"`
	// The size in bytes of the function .zip file.
	SourceCodeSize pulumi.IntInput `pulumi:"sourceCodeSize"`
	// A mapping of tags to assign to the object.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits][5]
	Timeout pulumi.IntInput `pulumi:"timeout"`
	TracingConfig pulumi.AnyInput `pulumi:"tracingConfig"`
	// Latest published version of your Lambda Function.
	Version pulumi.StringInput `pulumi:"version"`
	// Provide this to allow your function to access your VPC. Fields documented below. See [Lambda in VPC][7]
	VpcConfig pulumi.AnyInput `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Function resource.
type FunctionArgs struct {
	// Nested block to configure the function's *dead letter queue*. See details below.
	DeadLetterConfig pulumi.AnyInput `pulumi:"deadLetterConfig"`
	// Description of what your Lambda Function does.
	Description pulumi.StringInput `pulumi:"description"`
	// The Lambda environment's configuration settings. Fields documented below.
	Environment pulumi.AnyInput `pulumi:"environment"`
	// The path to the function's deployment package within the local filesystem. If defined, The `s3_`-prefixed options cannot be used.
	Code pulumi.StringInput `pulumi:"code"`
	// A unique name for your Lambda Function.
	Name pulumi.StringInput `pulumi:"name"`
	// The function [entrypoint][3] in your code.
	Handler pulumi.StringInput `pulumi:"handler"`
	// The ARN for the KMS encryption key.
	KmsKeyArn pulumi.StringInput `pulumi:"kmsKeyArn"`
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers][10]
	Layers pulumi.ArrayInput `pulumi:"layers"`
	// Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits][5]
	MemorySize pulumi.IntInput `pulumi:"memorySize"`
	// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
	Publish pulumi.BoolInput `pulumi:"publish"`
	// The amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency][9]
	ReservedConcurrentExecutions pulumi.IntInput `pulumi:"reservedConcurrentExecutions"`
	// IAM role attached to the Lambda Function. This governs both who / what can invoke your Lambda Function, as well as what resources our Lambda Function has access to. See [Lambda Permission Model][4] for more details.
	Role pulumi.StringInput `pulumi:"role"`
	// See [Runtimes][6] for valid values.
	Runtime pulumi.StringInput `pulumi:"runtime"`
	// The S3 bucket location containing the function's deployment package. Conflicts with `filename`. This bucket must reside in the same AWS region where you are creating the Lambda function.
	S3Bucket pulumi.StringInput `pulumi:"s3Bucket"`
	// The S3 key of an object containing the function's deployment package. Conflicts with `filename`.
	S3Key pulumi.StringInput `pulumi:"s3Key"`
	// The object version containing the function's deployment package. Conflicts with `filename`.
	S3ObjectVersion pulumi.StringInput `pulumi:"s3ObjectVersion"`
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3Key`. The usual way to set this is `filebase64sha256("file.zip")` (this provider 0.11.12 and later) or `base64sha256(file("file.zip"))` (this provider 0.11.11 and earlier), where "file.zip" is the local filename of the lambda function source archive.
	SourceCodeHash pulumi.StringInput `pulumi:"sourceCodeHash"`
	// A mapping of tags to assign to the object.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits][5]
	Timeout pulumi.IntInput `pulumi:"timeout"`
	TracingConfig pulumi.AnyInput `pulumi:"tracingConfig"`
	// Provide this to allow your function to access your VPC. Fields documented below. See [Lambda in VPC][7]
	VpcConfig pulumi.AnyInput `pulumi:"vpcConfig"`
}
