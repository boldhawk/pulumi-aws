// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lambda

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Lambda event source mapping. This allows Lambda functions to get events from Kinesis, DynamoDB and SQS.
// 
// For information about Lambda and how to use it, see [What is AWS Lambda?][1].
// For information about event source mappings, see [CreateEventSourceMapping][2] in the API docs.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/lambda_event_source_mapping.html.markdown.
type EventSourceMapping struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB and Kinesis, `10` for SQS.
	BatchSize pulumi.IntOutput `pulumi:"batchSize"`

	// Determines if the mapping will be enabled on creation. Defaults to `true`.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`

	// The event source ARN - can either be a Kinesis or DynamoDB stream.
	EventSourceArn pulumi.StringOutput `pulumi:"eventSourceArn"`

	// The the ARN of the Lambda function the event source mapping is sending events to. (Note: this is a computed value that differs from `functionName` above.)
	FunctionArn pulumi.StringOutput `pulumi:"functionArn"`

	// The name or the ARN of the Lambda function that will be subscribing to events.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`

	// The date this resource was last modified.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`

	// The result of the last AWS Lambda invocation of your Lambda function.
	LastProcessingResult pulumi.StringOutput `pulumi:"lastProcessingResult"`

	// The position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis or DynamoDB. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
	StartingPosition pulumi.StringOutput `pulumi:"startingPosition"`

	// A timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `startingPosition` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
	StartingPositionTimestamp pulumi.StringOutput `pulumi:"startingPositionTimestamp"`

	// The state of the event source mapping.
	State pulumi.StringOutput `pulumi:"state"`

	// The reason the event source mapping is in its current state.
	StateTransitionReason pulumi.StringOutput `pulumi:"stateTransitionReason"`

	// The UUID of the created event source mapping.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewEventSourceMapping registers a new resource with the given unique name, arguments, and options.
func NewEventSourceMapping(ctx *pulumi.Context,
	name string, args *EventSourceMappingArgs, opts ...pulumi.ResourceOpt) (*EventSourceMapping, error) {
	if args == nil || args.EventSourceArn == nil {
		return nil, errors.New("missing required argument 'EventSourceArn'")
	}
	if args == nil || args.FunctionName == nil {
		return nil, errors.New("missing required argument 'FunctionName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["batchSize"] = args.BatchSize
		inputs["enabled"] = args.Enabled
		inputs["eventSourceArn"] = args.EventSourceArn
		inputs["functionName"] = args.FunctionName
		inputs["startingPosition"] = args.StartingPosition
		inputs["startingPositionTimestamp"] = args.StartingPositionTimestamp
	}
	var resource EventSourceMapping
	err := ctx.RegisterResource("aws:lambda/eventSourceMapping:EventSourceMapping", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventSourceMapping gets an existing EventSourceMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventSourceMapping(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EventSourceMappingState, opts ...pulumi.ResourceOpt) (*EventSourceMapping, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["batchSize"] = state.BatchSize
		inputs["enabled"] = state.Enabled
		inputs["eventSourceArn"] = state.EventSourceArn
		inputs["functionArn"] = state.FunctionArn
		inputs["functionName"] = state.FunctionName
		inputs["lastModified"] = state.LastModified
		inputs["lastProcessingResult"] = state.LastProcessingResult
		inputs["startingPosition"] = state.StartingPosition
		inputs["startingPositionTimestamp"] = state.StartingPositionTimestamp
		inputs["state"] = state.State
		inputs["stateTransitionReason"] = state.StateTransitionReason
		inputs["uuid"] = state.Uuid
	}
	var resource EventSourceMapping
	err := ctx.ReadResource("aws:lambda/eventSourceMapping:EventSourceMapping", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *EventSourceMapping) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *EventSourceMapping) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering EventSourceMapping resources.
type EventSourceMappingState struct {
	// The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB and Kinesis, `10` for SQS.
	BatchSize pulumi.IntInput `pulumi:"batchSize"`
	// Determines if the mapping will be enabled on creation. Defaults to `true`.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The event source ARN - can either be a Kinesis or DynamoDB stream.
	EventSourceArn pulumi.StringInput `pulumi:"eventSourceArn"`
	// The the ARN of the Lambda function the event source mapping is sending events to. (Note: this is a computed value that differs from `functionName` above.)
	FunctionArn pulumi.StringInput `pulumi:"functionArn"`
	// The name or the ARN of the Lambda function that will be subscribing to events.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// The date this resource was last modified.
	LastModified pulumi.StringInput `pulumi:"lastModified"`
	// The result of the last AWS Lambda invocation of your Lambda function.
	LastProcessingResult pulumi.StringInput `pulumi:"lastProcessingResult"`
	// The position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis or DynamoDB. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
	StartingPosition pulumi.StringInput `pulumi:"startingPosition"`
	// A timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `startingPosition` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
	StartingPositionTimestamp pulumi.StringInput `pulumi:"startingPositionTimestamp"`
	// The state of the event source mapping.
	State pulumi.StringInput `pulumi:"state"`
	// The reason the event source mapping is in its current state.
	StateTransitionReason pulumi.StringInput `pulumi:"stateTransitionReason"`
	// The UUID of the created event source mapping.
	Uuid pulumi.StringInput `pulumi:"uuid"`
}

// The set of arguments for constructing a EventSourceMapping resource.
type EventSourceMappingArgs struct {
	// The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB and Kinesis, `10` for SQS.
	BatchSize pulumi.IntInput `pulumi:"batchSize"`
	// Determines if the mapping will be enabled on creation. Defaults to `true`.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The event source ARN - can either be a Kinesis or DynamoDB stream.
	EventSourceArn pulumi.StringInput `pulumi:"eventSourceArn"`
	// The name or the ARN of the Lambda function that will be subscribing to events.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// The position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis or DynamoDB. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
	StartingPosition pulumi.StringInput `pulumi:"startingPosition"`
	// A timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `startingPosition` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
	StartingPositionTimestamp pulumi.StringInput `pulumi:"startingPositionTimestamp"`
}
