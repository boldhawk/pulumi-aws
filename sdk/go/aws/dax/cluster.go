// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dax

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DAX Cluster resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dax_cluster.html.markdown.
type Cluster struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ARN of the DAX cluster
	Arn pulumi.StringOutput `pulumi:"arn"`

	// List of Availability Zones in which the
	// nodes will be created
	AvailabilityZones pulumi.ArrayOutput `pulumi:"availabilityZones"`

	// The DNS name of the DAX cluster without the port appended
	ClusterAddress pulumi.StringOutput `pulumi:"clusterAddress"`

	// Group identifier. DAX converts this name to
	// lowercase
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`

	// The configuration endpoint for this DAX cluster,
	// consisting of a DNS name and a port number
	ConfigurationEndpoint pulumi.StringOutput `pulumi:"configurationEndpoint"`

	// Description for the cluster
	Description pulumi.StringOutput `pulumi:"description"`

	// A valid Amazon Resource Name (ARN) that identifies
	// an IAM role. At runtime, DAX will assume this role and use the role's
	// permissions to access DynamoDB on your behalf
	IamRoleArn pulumi.StringOutput `pulumi:"iamRoleArn"`

	// Specifies the weekly time range for when
	// maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
	// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
	// `sun:05:00-sun:09:00`
	MaintenanceWindow pulumi.StringOutput `pulumi:"maintenanceWindow"`

	// The compute and memory capacity of the nodes. See
	// [Nodes][1] for supported node types
	NodeType pulumi.StringOutput `pulumi:"nodeType"`

	// List of node objects including `id`, `address`, `port` and
	// `availabilityZone`. Referenceable e.g. as
	// `${aws_dax_cluster.test.nodes.0.address}`
	Nodes pulumi.ArrayOutput `pulumi:"nodes"`

	// An Amazon Resource Name (ARN) of an
	// SNS topic to send DAX notifications to. Example:
	// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
	NotificationTopicArn pulumi.StringOutput `pulumi:"notificationTopicArn"`

	// Name of the parameter group to associate
	// with this DAX cluster
	ParameterGroupName pulumi.StringOutput `pulumi:"parameterGroupName"`

	// The port used by the configuration endpoint
	Port pulumi.IntOutput `pulumi:"port"`

	// The number of nodes in the DAX cluster. A
	// replication factor of 1 will create a single-node cluster, without any read
	// replicas
	ReplicationFactor pulumi.IntOutput `pulumi:"replicationFactor"`

	// One or more VPC security groups associated
	// with the cluster
	SecurityGroupIds pulumi.ArrayOutput `pulumi:"securityGroupIds"`

	// Encrypt at rest options
	ServerSideEncryption pulumi.AnyOutput `pulumi:"serverSideEncryption"`

	// Name of the subnet group to be used for the
	// cluster
	SubnetGroupName pulumi.StringOutput `pulumi:"subnetGroupName"`

	// A mapping of tags to assign to the resource
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.IamRoleArn == nil {
		return nil, errors.New("missing required argument 'IamRoleArn'")
	}
	if args == nil || args.NodeType == nil {
		return nil, errors.New("missing required argument 'NodeType'")
	}
	if args == nil || args.ReplicationFactor == nil {
		return nil, errors.New("missing required argument 'ReplicationFactor'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["availabilityZones"] = args.AvailabilityZones
		inputs["clusterName"] = args.ClusterName
		inputs["description"] = args.Description
		inputs["iamRoleArn"] = args.IamRoleArn
		inputs["maintenanceWindow"] = args.MaintenanceWindow
		inputs["nodeType"] = args.NodeType
		inputs["notificationTopicArn"] = args.NotificationTopicArn
		inputs["parameterGroupName"] = args.ParameterGroupName
		inputs["replicationFactor"] = args.ReplicationFactor
		inputs["securityGroupIds"] = args.SecurityGroupIds
		inputs["serverSideEncryption"] = args.ServerSideEncryption
		inputs["subnetGroupName"] = args.SubnetGroupName
		inputs["tags"] = args.Tags
	}
	var resource Cluster
	err := ctx.RegisterResource("aws:dax/cluster:Cluster", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClusterState, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["availabilityZones"] = state.AvailabilityZones
		inputs["clusterAddress"] = state.ClusterAddress
		inputs["clusterName"] = state.ClusterName
		inputs["configurationEndpoint"] = state.ConfigurationEndpoint
		inputs["description"] = state.Description
		inputs["iamRoleArn"] = state.IamRoleArn
		inputs["maintenanceWindow"] = state.MaintenanceWindow
		inputs["nodeType"] = state.NodeType
		inputs["nodes"] = state.Nodes
		inputs["notificationTopicArn"] = state.NotificationTopicArn
		inputs["parameterGroupName"] = state.ParameterGroupName
		inputs["port"] = state.Port
		inputs["replicationFactor"] = state.ReplicationFactor
		inputs["securityGroupIds"] = state.SecurityGroupIds
		inputs["serverSideEncryption"] = state.ServerSideEncryption
		inputs["subnetGroupName"] = state.SubnetGroupName
		inputs["tags"] = state.Tags
	}
	var resource Cluster
	err := ctx.ReadResource("aws:dax/cluster:Cluster", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Cluster) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Cluster) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Cluster resources.
type ClusterState struct {
	// The ARN of the DAX cluster
	Arn pulumi.StringInput `pulumi:"arn"`
	// List of Availability Zones in which the
	// nodes will be created
	AvailabilityZones pulumi.ArrayInput `pulumi:"availabilityZones"`
	// The DNS name of the DAX cluster without the port appended
	ClusterAddress pulumi.StringInput `pulumi:"clusterAddress"`
	// Group identifier. DAX converts this name to
	// lowercase
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The configuration endpoint for this DAX cluster,
	// consisting of a DNS name and a port number
	ConfigurationEndpoint pulumi.StringInput `pulumi:"configurationEndpoint"`
	// Description for the cluster
	Description pulumi.StringInput `pulumi:"description"`
	// A valid Amazon Resource Name (ARN) that identifies
	// an IAM role. At runtime, DAX will assume this role and use the role's
	// permissions to access DynamoDB on your behalf
	IamRoleArn pulumi.StringInput `pulumi:"iamRoleArn"`
	// Specifies the weekly time range for when
	// maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
	// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
	// `sun:05:00-sun:09:00`
	MaintenanceWindow pulumi.StringInput `pulumi:"maintenanceWindow"`
	// The compute and memory capacity of the nodes. See
	// [Nodes][1] for supported node types
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// List of node objects including `id`, `address`, `port` and
	// `availabilityZone`. Referenceable e.g. as
	// `${aws_dax_cluster.test.nodes.0.address}`
	Nodes pulumi.ArrayInput `pulumi:"nodes"`
	// An Amazon Resource Name (ARN) of an
	// SNS topic to send DAX notifications to. Example:
	// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
	NotificationTopicArn pulumi.StringInput `pulumi:"notificationTopicArn"`
	// Name of the parameter group to associate
	// with this DAX cluster
	ParameterGroupName pulumi.StringInput `pulumi:"parameterGroupName"`
	// The port used by the configuration endpoint
	Port pulumi.IntInput `pulumi:"port"`
	// The number of nodes in the DAX cluster. A
	// replication factor of 1 will create a single-node cluster, without any read
	// replicas
	ReplicationFactor pulumi.IntInput `pulumi:"replicationFactor"`
	// One or more VPC security groups associated
	// with the cluster
	SecurityGroupIds pulumi.ArrayInput `pulumi:"securityGroupIds"`
	// Encrypt at rest options
	ServerSideEncryption pulumi.AnyInput `pulumi:"serverSideEncryption"`
	// Name of the subnet group to be used for the
	// cluster
	SubnetGroupName pulumi.StringInput `pulumi:"subnetGroupName"`
	// A mapping of tags to assign to the resource
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// List of Availability Zones in which the
	// nodes will be created
	AvailabilityZones pulumi.ArrayInput `pulumi:"availabilityZones"`
	// Group identifier. DAX converts this name to
	// lowercase
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// Description for the cluster
	Description pulumi.StringInput `pulumi:"description"`
	// A valid Amazon Resource Name (ARN) that identifies
	// an IAM role. At runtime, DAX will assume this role and use the role's
	// permissions to access DynamoDB on your behalf
	IamRoleArn pulumi.StringInput `pulumi:"iamRoleArn"`
	// Specifies the weekly time range for when
	// maintenance on the cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi`
	// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example:
	// `sun:05:00-sun:09:00`
	MaintenanceWindow pulumi.StringInput `pulumi:"maintenanceWindow"`
	// The compute and memory capacity of the nodes. See
	// [Nodes][1] for supported node types
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// An Amazon Resource Name (ARN) of an
	// SNS topic to send DAX notifications to. Example:
	// `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
	NotificationTopicArn pulumi.StringInput `pulumi:"notificationTopicArn"`
	// Name of the parameter group to associate
	// with this DAX cluster
	ParameterGroupName pulumi.StringInput `pulumi:"parameterGroupName"`
	// The number of nodes in the DAX cluster. A
	// replication factor of 1 will create a single-node cluster, without any read
	// replicas
	ReplicationFactor pulumi.IntInput `pulumi:"replicationFactor"`
	// One or more VPC security groups associated
	// with the cluster
	SecurityGroupIds pulumi.ArrayInput `pulumi:"securityGroupIds"`
	// Encrypt at rest options
	ServerSideEncryption pulumi.AnyInput `pulumi:"serverSideEncryption"`
	// Name of the subnet group to be used for the
	// cluster
	SubnetGroupName pulumi.StringInput `pulumi:"subnetGroupName"`
	// A mapping of tags to assign to the resource
	Tags pulumi.MapInput `pulumi:"tags"`
}
