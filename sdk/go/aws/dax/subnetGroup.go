// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dax

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DAX Subnet Group resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dax_subnet_group.html.markdown.
type SubnetGroup struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// A description of the subnet group.
	Description pulumi.StringOutput `pulumi:"description"`

	// The name of the subnet group.
	Name pulumi.StringOutput `pulumi:"name"`

	// A list of VPC subnet IDs for the subnet group.
	SubnetIds pulumi.ArrayOutput `pulumi:"subnetIds"`

	// VPC ID of the subnet group.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewSubnetGroup registers a new resource with the given unique name, arguments, and options.
func NewSubnetGroup(ctx *pulumi.Context,
	name string, args *SubnetGroupArgs, opts ...pulumi.ResourceOpt) (*SubnetGroup, error) {
	if args == nil || args.SubnetIds == nil {
		return nil, errors.New("missing required argument 'SubnetIds'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["subnetIds"] = args.SubnetIds
	}
	var resource SubnetGroup
	err := ctx.RegisterResource("aws:dax/subnetGroup:SubnetGroup", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnetGroup gets an existing SubnetGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnetGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SubnetGroupState, opts ...pulumi.ResourceOpt) (*SubnetGroup, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["subnetIds"] = state.SubnetIds
		inputs["vpcId"] = state.VpcId
	}
	var resource SubnetGroup
	err := ctx.ReadResource("aws:dax/subnetGroup:SubnetGroup", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *SubnetGroup) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *SubnetGroup) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering SubnetGroup resources.
type SubnetGroupState struct {
	// A description of the subnet group.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the subnet group.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of VPC subnet IDs for the subnet group.
	SubnetIds pulumi.ArrayInput `pulumi:"subnetIds"`
	// VPC ID of the subnet group.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

// The set of arguments for constructing a SubnetGroup resource.
type SubnetGroupArgs struct {
	// A description of the subnet group.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the subnet group.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of VPC subnet IDs for the subnet group.
	SubnetIds pulumi.ArrayInput `pulumi:"subnetIds"`
}
