// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Direct Connect private virtual interface resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dx_private_virtual_interface.html.markdown.
type PrivateVirtualInterface struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The address family for the BGP peer. `ipv4 ` or `ipv6`.
	AddressFamily pulumi.StringOutput `pulumi:"addressFamily"`

	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress pulumi.StringOutput `pulumi:"amazonAddress"`

	// The ARN of the virtual interface.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The Direct Connect endpoint on which the virtual interface terminates.
	AwsDevice pulumi.StringOutput `pulumi:"awsDevice"`

	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumi.IntOutput `pulumi:"bgpAsn"`

	// The authentication key for BGP configuration.
	BgpAuthKey pulumi.StringOutput `pulumi:"bgpAuthKey"`

	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`

	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress pulumi.StringOutput `pulumi:"customerAddress"`

	// The ID of the Direct Connect gateway to which to connect the virtual interface.
	DxGatewayId pulumi.StringOutput `pulumi:"dxGatewayId"`

	// Indicates whether jumbo frames (9001 MTU) are supported.
	JumboFrameCapable pulumi.BoolOutput `pulumi:"jumboFrameCapable"`

	// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
	// The MTU of a virtual private interface can be either `1500` or `9001` (jumbo frames). Default is `1500`.
	Mtu pulumi.IntOutput `pulumi:"mtu"`

	// The name for the virtual interface.
	Name pulumi.StringOutput `pulumi:"name"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The VLAN ID.
	Vlan pulumi.IntOutput `pulumi:"vlan"`

	// The ID of the virtual private gateway to which to connect the virtual interface.
	VpnGatewayId pulumi.StringOutput `pulumi:"vpnGatewayId"`
}

// NewPrivateVirtualInterface registers a new resource with the given unique name, arguments, and options.
func NewPrivateVirtualInterface(ctx *pulumi.Context,
	name string, args *PrivateVirtualInterfaceArgs, opts ...pulumi.ResourceOpt) (*PrivateVirtualInterface, error) {
	if args == nil || args.AddressFamily == nil {
		return nil, errors.New("missing required argument 'AddressFamily'")
	}
	if args == nil || args.BgpAsn == nil {
		return nil, errors.New("missing required argument 'BgpAsn'")
	}
	if args == nil || args.ConnectionId == nil {
		return nil, errors.New("missing required argument 'ConnectionId'")
	}
	if args == nil || args.Vlan == nil {
		return nil, errors.New("missing required argument 'Vlan'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["addressFamily"] = args.AddressFamily
		inputs["amazonAddress"] = args.AmazonAddress
		inputs["bgpAsn"] = args.BgpAsn
		inputs["bgpAuthKey"] = args.BgpAuthKey
		inputs["connectionId"] = args.ConnectionId
		inputs["customerAddress"] = args.CustomerAddress
		inputs["dxGatewayId"] = args.DxGatewayId
		inputs["mtu"] = args.Mtu
		inputs["name"] = args.Name
		inputs["tags"] = args.Tags
		inputs["vlan"] = args.Vlan
		inputs["vpnGatewayId"] = args.VpnGatewayId
	}
	var resource PrivateVirtualInterface
	err := ctx.RegisterResource("aws:directconnect/privateVirtualInterface:PrivateVirtualInterface", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateVirtualInterface gets an existing PrivateVirtualInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateVirtualInterface(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PrivateVirtualInterfaceState, opts ...pulumi.ResourceOpt) (*PrivateVirtualInterface, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["addressFamily"] = state.AddressFamily
		inputs["amazonAddress"] = state.AmazonAddress
		inputs["arn"] = state.Arn
		inputs["awsDevice"] = state.AwsDevice
		inputs["bgpAsn"] = state.BgpAsn
		inputs["bgpAuthKey"] = state.BgpAuthKey
		inputs["connectionId"] = state.ConnectionId
		inputs["customerAddress"] = state.CustomerAddress
		inputs["dxGatewayId"] = state.DxGatewayId
		inputs["jumboFrameCapable"] = state.JumboFrameCapable
		inputs["mtu"] = state.Mtu
		inputs["name"] = state.Name
		inputs["tags"] = state.Tags
		inputs["vlan"] = state.Vlan
		inputs["vpnGatewayId"] = state.VpnGatewayId
	}
	var resource PrivateVirtualInterface
	err := ctx.ReadResource("aws:directconnect/privateVirtualInterface:PrivateVirtualInterface", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *PrivateVirtualInterface) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *PrivateVirtualInterface) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering PrivateVirtualInterface resources.
type PrivateVirtualInterfaceState struct {
	// The address family for the BGP peer. `ipv4 ` or `ipv6`.
	AddressFamily pulumi.StringInput `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress pulumi.StringInput `pulumi:"amazonAddress"`
	// The ARN of the virtual interface.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The Direct Connect endpoint on which the virtual interface terminates.
	AwsDevice pulumi.StringInput `pulumi:"awsDevice"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumi.IntInput `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey pulumi.StringInput `pulumi:"bgpAuthKey"`
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress pulumi.StringInput `pulumi:"customerAddress"`
	// The ID of the Direct Connect gateway to which to connect the virtual interface.
	DxGatewayId pulumi.StringInput `pulumi:"dxGatewayId"`
	// Indicates whether jumbo frames (9001 MTU) are supported.
	JumboFrameCapable pulumi.BoolInput `pulumi:"jumboFrameCapable"`
	// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
	// The MTU of a virtual private interface can be either `1500` or `9001` (jumbo frames). Default is `1500`.
	Mtu pulumi.IntInput `pulumi:"mtu"`
	// The name for the virtual interface.
	Name pulumi.StringInput `pulumi:"name"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The VLAN ID.
	Vlan pulumi.IntInput `pulumi:"vlan"`
	// The ID of the virtual private gateway to which to connect the virtual interface.
	VpnGatewayId pulumi.StringInput `pulumi:"vpnGatewayId"`
}

// The set of arguments for constructing a PrivateVirtualInterface resource.
type PrivateVirtualInterfaceArgs struct {
	// The address family for the BGP peer. `ipv4 ` or `ipv6`.
	AddressFamily pulumi.StringInput `pulumi:"addressFamily"`
	// The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
	AmazonAddress pulumi.StringInput `pulumi:"amazonAddress"`
	// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
	BgpAsn pulumi.IntInput `pulumi:"bgpAsn"`
	// The authentication key for BGP configuration.
	BgpAuthKey pulumi.StringInput `pulumi:"bgpAuthKey"`
	// The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
	CustomerAddress pulumi.StringInput `pulumi:"customerAddress"`
	// The ID of the Direct Connect gateway to which to connect the virtual interface.
	DxGatewayId pulumi.StringInput `pulumi:"dxGatewayId"`
	// The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
	// The MTU of a virtual private interface can be either `1500` or `9001` (jumbo frames). Default is `1500`.
	Mtu pulumi.IntInput `pulumi:"mtu"`
	// The name for the virtual interface.
	Name pulumi.StringInput `pulumi:"name"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The VLAN ID.
	Vlan pulumi.IntInput `pulumi:"vlan"`
	// The ID of the virtual private gateway to which to connect the virtual interface.
	VpnGatewayId pulumi.StringInput `pulumi:"vpnGatewayId"`
}
