// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package directconnect

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Direct Connect LAG. Connections can be added to the LAG via the [`directconnect.Connection`](https://www.terraform.io/docs/providers/aws/r/dx_connection.html) and [`directconnect.ConnectionAssociation`](https://www.terraform.io/docs/providers/aws/r/dx_connection_association.html) resources.
// 
// > *NOTE:* When creating a LAG, Direct Connect requires creating a Connection. This provider will remove this unmanaged connection during resource creation.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dx_lag.html.markdown.
type LinkAggregationGroup struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ARN of the LAG.
	// * `jumboFrameCapable` -Indicates whether jumbo frames (9001 MTU) are supported.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The bandwidth of the individual physical connections bundled by the LAG. Available values: 1Gbps, 10Gbps. Case sensitive.
	ConnectionsBandwidth pulumi.StringOutput `pulumi:"connectionsBandwidth"`

	// A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
	ForceDestroy pulumi.BoolOutput `pulumi:"forceDestroy"`

	// Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
	HasLogicalRedundancy pulumi.StringOutput `pulumi:"hasLogicalRedundancy"`

	JumboFrameCapable pulumi.BoolOutput `pulumi:"jumboFrameCapable"`

	// The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
	Location pulumi.StringOutput `pulumi:"location"`

	// The name of the LAG.
	Name pulumi.StringOutput `pulumi:"name"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewLinkAggregationGroup registers a new resource with the given unique name, arguments, and options.
func NewLinkAggregationGroup(ctx *pulumi.Context,
	name string, args *LinkAggregationGroupArgs, opts ...pulumi.ResourceOpt) (*LinkAggregationGroup, error) {
	if args == nil || args.ConnectionsBandwidth == nil {
		return nil, errors.New("missing required argument 'ConnectionsBandwidth'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["connectionsBandwidth"] = args.ConnectionsBandwidth
		inputs["forceDestroy"] = args.ForceDestroy
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["tags"] = args.Tags
	}
	var resource LinkAggregationGroup
	err := ctx.RegisterResource("aws:directconnect/linkAggregationGroup:LinkAggregationGroup", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinkAggregationGroup gets an existing LinkAggregationGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkAggregationGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LinkAggregationGroupState, opts ...pulumi.ResourceOpt) (*LinkAggregationGroup, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["connectionsBandwidth"] = state.ConnectionsBandwidth
		inputs["forceDestroy"] = state.ForceDestroy
		inputs["hasLogicalRedundancy"] = state.HasLogicalRedundancy
		inputs["jumboFrameCapable"] = state.JumboFrameCapable
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["tags"] = state.Tags
	}
	var resource LinkAggregationGroup
	err := ctx.ReadResource("aws:directconnect/linkAggregationGroup:LinkAggregationGroup", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *LinkAggregationGroup) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *LinkAggregationGroup) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering LinkAggregationGroup resources.
type LinkAggregationGroupState struct {
	// The ARN of the LAG.
	// * `jumboFrameCapable` -Indicates whether jumbo frames (9001 MTU) are supported.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The bandwidth of the individual physical connections bundled by the LAG. Available values: 1Gbps, 10Gbps. Case sensitive.
	ConnectionsBandwidth pulumi.StringInput `pulumi:"connectionsBandwidth"`
	// A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
	ForceDestroy pulumi.BoolInput `pulumi:"forceDestroy"`
	// Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
	HasLogicalRedundancy pulumi.StringInput `pulumi:"hasLogicalRedundancy"`
	JumboFrameCapable pulumi.BoolInput `pulumi:"jumboFrameCapable"`
	// The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the LAG.
	Name pulumi.StringInput `pulumi:"name"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a LinkAggregationGroup resource.
type LinkAggregationGroupArgs struct {
	// The bandwidth of the individual physical connections bundled by the LAG. Available values: 1Gbps, 10Gbps. Case sensitive.
	ConnectionsBandwidth pulumi.StringInput `pulumi:"connectionsBandwidth"`
	// A boolean that indicates all connections associated with the LAG should be deleted so that the LAG can be destroyed without error. These objects are *not* recoverable.
	ForceDestroy pulumi.BoolInput `pulumi:"forceDestroy"`
	// The AWS Direct Connect location in which the LAG should be allocated. See [DescribeLocations](https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DescribeLocations.html) for the list of AWS Direct Connect locations. Use `locationCode`.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the LAG.
	Name pulumi.StringInput `pulumi:"name"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
