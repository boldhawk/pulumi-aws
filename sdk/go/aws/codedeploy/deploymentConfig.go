// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codedeploy

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a CodeDeploy deployment config for an application
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/codedeploy_deployment_config.html.markdown.
type DeploymentConfig struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
	ComputePlatform pulumi.StringOutput `pulumi:"computePlatform"`

	// The AWS Assigned deployment config id
	DeploymentConfigId pulumi.StringOutput `pulumi:"deploymentConfigId"`

	// The name of the deployment config.
	DeploymentConfigName pulumi.StringOutput `pulumi:"deploymentConfigName"`

	// A minimumHealthyHosts block. Minimum Healthy Hosts are documented below.
	MinimumHealthyHosts pulumi.AnyOutput `pulumi:"minimumHealthyHosts"`

	// A trafficRoutingConfig block. Traffic Routing Config is documented below.
	TrafficRoutingConfig pulumi.AnyOutput `pulumi:"trafficRoutingConfig"`
}

// NewDeploymentConfig registers a new resource with the given unique name, arguments, and options.
func NewDeploymentConfig(ctx *pulumi.Context,
	name string, args *DeploymentConfigArgs, opts ...pulumi.ResourceOpt) (*DeploymentConfig, error) {
	if args == nil || args.DeploymentConfigName == nil {
		return nil, errors.New("missing required argument 'DeploymentConfigName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["computePlatform"] = args.ComputePlatform
		inputs["deploymentConfigName"] = args.DeploymentConfigName
		inputs["minimumHealthyHosts"] = args.MinimumHealthyHosts
		inputs["trafficRoutingConfig"] = args.TrafficRoutingConfig
	}
	var resource DeploymentConfig
	err := ctx.RegisterResource("aws:codedeploy/deploymentConfig:DeploymentConfig", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeploymentConfig gets an existing DeploymentConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeploymentConfig(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DeploymentConfigState, opts ...pulumi.ResourceOpt) (*DeploymentConfig, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["computePlatform"] = state.ComputePlatform
		inputs["deploymentConfigId"] = state.DeploymentConfigId
		inputs["deploymentConfigName"] = state.DeploymentConfigName
		inputs["minimumHealthyHosts"] = state.MinimumHealthyHosts
		inputs["trafficRoutingConfig"] = state.TrafficRoutingConfig
	}
	var resource DeploymentConfig
	err := ctx.ReadResource("aws:codedeploy/deploymentConfig:DeploymentConfig", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *DeploymentConfig) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *DeploymentConfig) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering DeploymentConfig resources.
type DeploymentConfigState struct {
	// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
	ComputePlatform pulumi.StringInput `pulumi:"computePlatform"`
	// The AWS Assigned deployment config id
	DeploymentConfigId pulumi.StringInput `pulumi:"deploymentConfigId"`
	// The name of the deployment config.
	DeploymentConfigName pulumi.StringInput `pulumi:"deploymentConfigName"`
	// A minimumHealthyHosts block. Minimum Healthy Hosts are documented below.
	MinimumHealthyHosts pulumi.AnyInput `pulumi:"minimumHealthyHosts"`
	// A trafficRoutingConfig block. Traffic Routing Config is documented below.
	TrafficRoutingConfig pulumi.AnyInput `pulumi:"trafficRoutingConfig"`
}

// The set of arguments for constructing a DeploymentConfig resource.
type DeploymentConfigArgs struct {
	// The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
	ComputePlatform pulumi.StringInput `pulumi:"computePlatform"`
	// The name of the deployment config.
	DeploymentConfigName pulumi.StringInput `pulumi:"deploymentConfigName"`
	// A minimumHealthyHosts block. Minimum Healthy Hosts are documented below.
	MinimumHealthyHosts pulumi.AnyInput `pulumi:"minimumHealthyHosts"`
	// A trafficRoutingConfig block. Traffic Routing Config is documented below.
	TrafficRoutingConfig pulumi.AnyInput `pulumi:"trafficRoutingConfig"`
}
