// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glacier

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Glacier Vault Resource. You can refer to the [Glacier Developer Guide](https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-vaults.html) for a full explanation of the Glacier Vault functionality
// 
// > **NOTE:** When removing a Glacier Vault, the Vault must be empty.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/glacier_vault.html.markdown.
type Vault struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The policy document. This is a JSON formatted string.
	// The heredoc syntax or `file` function is helpful here. Use the [Glacier Developer Guide](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html) for more information on Glacier Vault Policy
	AccessPolicy pulumi.StringOutput `pulumi:"accessPolicy"`

	// The ARN of the vault.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The URI of the vault that was created.
	Location pulumi.StringOutput `pulumi:"location"`

	// The name of the Vault. Names can be between 1 and 255 characters long and the valid characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), and '.' (period).
	Name pulumi.StringOutput `pulumi:"name"`

	// The notifications for the Vault. Fields documented below.
	Notifications pulumi.ArrayOutput `pulumi:"notifications"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewVault registers a new resource with the given unique name, arguments, and options.
func NewVault(ctx *pulumi.Context,
	name string, args *VaultArgs, opts ...pulumi.ResourceOpt) (*Vault, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["accessPolicy"] = args.AccessPolicy
		inputs["name"] = args.Name
		inputs["notifications"] = args.Notifications
		inputs["tags"] = args.Tags
	}
	var resource Vault
	err := ctx.RegisterResource("aws:glacier/vault:Vault", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVault gets an existing Vault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVault(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VaultState, opts ...pulumi.ResourceOpt) (*Vault, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["accessPolicy"] = state.AccessPolicy
		inputs["arn"] = state.Arn
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["notifications"] = state.Notifications
		inputs["tags"] = state.Tags
	}
	var resource Vault
	err := ctx.ReadResource("aws:glacier/vault:Vault", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Vault) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Vault) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Vault resources.
type VaultState struct {
	// The policy document. This is a JSON formatted string.
	// The heredoc syntax or `file` function is helpful here. Use the [Glacier Developer Guide](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html) for more information on Glacier Vault Policy
	AccessPolicy pulumi.StringInput `pulumi:"accessPolicy"`
	// The ARN of the vault.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The URI of the vault that was created.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the Vault. Names can be between 1 and 255 characters long and the valid characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), and '.' (period).
	Name pulumi.StringInput `pulumi:"name"`
	// The notifications for the Vault. Fields documented below.
	Notifications pulumi.ArrayInput `pulumi:"notifications"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Vault resource.
type VaultArgs struct {
	// The policy document. This is a JSON formatted string.
	// The heredoc syntax or `file` function is helpful here. Use the [Glacier Developer Guide](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html) for more information on Glacier Vault Policy
	AccessPolicy pulumi.StringInput `pulumi:"accessPolicy"`
	// The name of the Vault. Names can be between 1 and 255 characters long and the valid characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), and '.' (period).
	Name pulumi.StringInput `pulumi:"name"`
	// The notifications for the Vault. Fields documented below.
	Notifications pulumi.ArrayInput `pulumi:"notifications"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
