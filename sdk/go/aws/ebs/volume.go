// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a single EBS volume.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ebs_volume.html.markdown.
type Volume struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The volume ARN (e.g. arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e).
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The AZ where the EBS volume will exist.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`

	// If true, the disk will be encrypted.
	Encrypted pulumi.BoolOutput `pulumi:"encrypted"`

	// The amount of IOPS to provision for the disk.
	Iops pulumi.IntOutput `pulumi:"iops"`

	// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `encrypted` needs to be set to true.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`

	// The size of the drive in GiBs.
	Size pulumi.IntOutput `pulumi:"size"`

	// A snapshot to base the EBS volume off of.
	SnapshotId pulumi.StringOutput `pulumi:"snapshotId"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The type of EBS volume. Can be "standard", "gp2", "io1", "sc1" or "st1" (Default: "standard").
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOpt) (*Volume, error) {
	if args == nil || args.AvailabilityZone == nil {
		return nil, errors.New("missing required argument 'AvailabilityZone'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["availabilityZone"] = args.AvailabilityZone
		inputs["encrypted"] = args.Encrypted
		inputs["iops"] = args.Iops
		inputs["kmsKeyId"] = args.KmsKeyId
		inputs["size"] = args.Size
		inputs["snapshotId"] = args.SnapshotId
		inputs["tags"] = args.Tags
		inputs["type"] = args.Type
	}
	var resource Volume
	err := ctx.RegisterResource("aws:ebs/volume:Volume", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VolumeState, opts ...pulumi.ResourceOpt) (*Volume, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["availabilityZone"] = state.AvailabilityZone
		inputs["encrypted"] = state.Encrypted
		inputs["iops"] = state.Iops
		inputs["kmsKeyId"] = state.KmsKeyId
		inputs["size"] = state.Size
		inputs["snapshotId"] = state.SnapshotId
		inputs["tags"] = state.Tags
		inputs["type"] = state.Type
	}
	var resource Volume
	err := ctx.ReadResource("aws:ebs/volume:Volume", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Volume) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Volume) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Volume resources.
type VolumeState struct {
	// The volume ARN (e.g. arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e).
	Arn pulumi.StringInput `pulumi:"arn"`
	// The AZ where the EBS volume will exist.
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// If true, the disk will be encrypted.
	Encrypted pulumi.BoolInput `pulumi:"encrypted"`
	// The amount of IOPS to provision for the disk.
	Iops pulumi.IntInput `pulumi:"iops"`
	// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `encrypted` needs to be set to true.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// The size of the drive in GiBs.
	Size pulumi.IntInput `pulumi:"size"`
	// A snapshot to base the EBS volume off of.
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The type of EBS volume. Can be "standard", "gp2", "io1", "sc1" or "st1" (Default: "standard").
	Type pulumi.StringInput `pulumi:"type"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// The AZ where the EBS volume will exist.
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// If true, the disk will be encrypted.
	Encrypted pulumi.BoolInput `pulumi:"encrypted"`
	// The amount of IOPS to provision for the disk.
	Iops pulumi.IntInput `pulumi:"iops"`
	// The ARN for the KMS encryption key. When specifying `kmsKeyId`, `encrypted` needs to be set to true.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// The size of the drive in GiBs.
	Size pulumi.IntInput `pulumi:"size"`
	// A snapshot to base the EBS volume off of.
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The type of EBS volume. Can be "standard", "gp2", "io1", "sc1" or "st1" (Default: "standard").
	Type pulumi.StringInput `pulumi:"type"`
}
