// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a RDS database instance snapshot. For managing RDS database cluster snapshots, see the [`rds.ClusterSnapshot` resource](https://www.terraform.io/docs/providers/aws/r/db_cluster_snapshot.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/db_snapshot.html.markdown.
type Snapshot struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Specifies the allocated storage size in gigabytes (GB).
	AllocatedStorage pulumi.IntOutput `pulumi:"allocatedStorage"`

	// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`

	// The DB Instance Identifier from which to take the snapshot.
	DbInstanceIdentifier pulumi.StringOutput `pulumi:"dbInstanceIdentifier"`

	// The Amazon Resource Name (ARN) for the DB snapshot.
	DbSnapshotArn pulumi.StringOutput `pulumi:"dbSnapshotArn"`

	// The Identifier for the snapshot.
	DbSnapshotIdentifier pulumi.StringOutput `pulumi:"dbSnapshotIdentifier"`

	// Specifies whether the DB snapshot is encrypted.
	Encrypted pulumi.BoolOutput `pulumi:"encrypted"`

	// Specifies the name of the database engine.
	Engine pulumi.StringOutput `pulumi:"engine"`

	// Specifies the version of the database engine.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`

	// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
	Iops pulumi.IntOutput `pulumi:"iops"`

	// The ARN for the KMS encryption key.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`

	// License model information for the restored DB instance.
	LicenseModel pulumi.StringOutput `pulumi:"licenseModel"`

	// Provides the option group name for the DB snapshot.
	OptionGroupName pulumi.StringOutput `pulumi:"optionGroupName"`

	Port pulumi.IntOutput `pulumi:"port"`

	SnapshotType pulumi.StringOutput `pulumi:"snapshotType"`

	// The DB snapshot Arn that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy.
	SourceDbSnapshotIdentifier pulumi.StringOutput `pulumi:"sourceDbSnapshotIdentifier"`

	// The region that the DB snapshot was created in or copied from.
	SourceRegion pulumi.StringOutput `pulumi:"sourceRegion"`

	// Specifies the status of this DB snapshot.
	Status pulumi.StringOutput `pulumi:"status"`

	// Specifies the storage type associated with DB snapshot.
	StorageType pulumi.StringOutput `pulumi:"storageType"`

	// Key-value mapping of resource tags
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Specifies the storage type associated with DB snapshot.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOpt) (*Snapshot, error) {
	if args == nil || args.DbInstanceIdentifier == nil {
		return nil, errors.New("missing required argument 'DbInstanceIdentifier'")
	}
	if args == nil || args.DbSnapshotIdentifier == nil {
		return nil, errors.New("missing required argument 'DbSnapshotIdentifier'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["dbInstanceIdentifier"] = args.DbInstanceIdentifier
		inputs["dbSnapshotIdentifier"] = args.DbSnapshotIdentifier
		inputs["tags"] = args.Tags
	}
	var resource Snapshot
	err := ctx.RegisterResource("aws:rds/snapshot:Snapshot", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SnapshotState, opts ...pulumi.ResourceOpt) (*Snapshot, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["allocatedStorage"] = state.AllocatedStorage
		inputs["availabilityZone"] = state.AvailabilityZone
		inputs["dbInstanceIdentifier"] = state.DbInstanceIdentifier
		inputs["dbSnapshotArn"] = state.DbSnapshotArn
		inputs["dbSnapshotIdentifier"] = state.DbSnapshotIdentifier
		inputs["encrypted"] = state.Encrypted
		inputs["engine"] = state.Engine
		inputs["engineVersion"] = state.EngineVersion
		inputs["iops"] = state.Iops
		inputs["kmsKeyId"] = state.KmsKeyId
		inputs["licenseModel"] = state.LicenseModel
		inputs["optionGroupName"] = state.OptionGroupName
		inputs["port"] = state.Port
		inputs["snapshotType"] = state.SnapshotType
		inputs["sourceDbSnapshotIdentifier"] = state.SourceDbSnapshotIdentifier
		inputs["sourceRegion"] = state.SourceRegion
		inputs["status"] = state.Status
		inputs["storageType"] = state.StorageType
		inputs["tags"] = state.Tags
		inputs["vpcId"] = state.VpcId
	}
	var resource Snapshot
	err := ctx.ReadResource("aws:rds/snapshot:Snapshot", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Snapshot) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Snapshot) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Snapshot resources.
type SnapshotState struct {
	// Specifies the allocated storage size in gigabytes (GB).
	AllocatedStorage pulumi.IntInput `pulumi:"allocatedStorage"`
	// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// The DB Instance Identifier from which to take the snapshot.
	DbInstanceIdentifier pulumi.StringInput `pulumi:"dbInstanceIdentifier"`
	// The Amazon Resource Name (ARN) for the DB snapshot.
	DbSnapshotArn pulumi.StringInput `pulumi:"dbSnapshotArn"`
	// The Identifier for the snapshot.
	DbSnapshotIdentifier pulumi.StringInput `pulumi:"dbSnapshotIdentifier"`
	// Specifies whether the DB snapshot is encrypted.
	Encrypted pulumi.BoolInput `pulumi:"encrypted"`
	// Specifies the name of the database engine.
	Engine pulumi.StringInput `pulumi:"engine"`
	// Specifies the version of the database engine.
	EngineVersion pulumi.StringInput `pulumi:"engineVersion"`
	// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
	Iops pulumi.IntInput `pulumi:"iops"`
	// The ARN for the KMS encryption key.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// License model information for the restored DB instance.
	LicenseModel pulumi.StringInput `pulumi:"licenseModel"`
	// Provides the option group name for the DB snapshot.
	OptionGroupName pulumi.StringInput `pulumi:"optionGroupName"`
	Port pulumi.IntInput `pulumi:"port"`
	SnapshotType pulumi.StringInput `pulumi:"snapshotType"`
	// The DB snapshot Arn that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy.
	SourceDbSnapshotIdentifier pulumi.StringInput `pulumi:"sourceDbSnapshotIdentifier"`
	// The region that the DB snapshot was created in or copied from.
	SourceRegion pulumi.StringInput `pulumi:"sourceRegion"`
	// Specifies the status of this DB snapshot.
	Status pulumi.StringInput `pulumi:"status"`
	// Specifies the storage type associated with DB snapshot.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// Key-value mapping of resource tags
	Tags pulumi.MapInput `pulumi:"tags"`
	// Specifies the storage type associated with DB snapshot.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// The DB Instance Identifier from which to take the snapshot.
	DbInstanceIdentifier pulumi.StringInput `pulumi:"dbInstanceIdentifier"`
	// The Identifier for the snapshot.
	DbSnapshotIdentifier pulumi.StringInput `pulumi:"dbSnapshotIdentifier"`
	// Key-value mapping of resource tags
	Tags pulumi.MapInput `pulumi:"tags"`
}
