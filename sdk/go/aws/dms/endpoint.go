// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DMS (Data Migration Service) endpoint resource. DMS endpoints can be created, updated, deleted, and imported.
// 
// > **Note:** All arguments including the password will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dms_endpoint.html.markdown.
type Endpoint struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The Amazon Resource Name (ARN) for the certificate.
	CertificateArn pulumi.StringOutput `pulumi:"certificateArn"`

	// The name of the endpoint database.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`

	// The Amazon Resource Name (ARN) for the endpoint.
	EndpointArn pulumi.StringOutput `pulumi:"endpointArn"`

	// The database endpoint identifier.
	EndpointId pulumi.StringOutput `pulumi:"endpointId"`

	// The type of endpoint. Can be one of `source | target`.
	EndpointType pulumi.StringOutput `pulumi:"endpointType"`

	// The type of engine for the endpoint. Can be one of `aurora | azuredb | db2 | docdb | dynamodb | mariadb | mongodb | mysql | oracle | postgres | redshift | s3 | sqlserver | sybase`.
	EngineName pulumi.StringOutput `pulumi:"engineName"`

	// Additional attributes associated with the connection. For available attributes see [Using Extra Connection Attributes with AWS Database Migration Service](http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Introduction.ConnectionAttributes.html).
	ExtraConnectionAttributes pulumi.StringOutput `pulumi:"extraConnectionAttributes"`

	// The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
	KmsKeyArn pulumi.StringOutput `pulumi:"kmsKeyArn"`

	// Settings for the source MongoDB endpoint. Available settings are `authType` (default: `password`), `authMechanism` (default: `default`), `nestingLevel` (default: `none`), `extractDocId` (default: `false`), `docsToInvestigate` (default: `1000`) and `authSource` (default: `admin`). For more details, see [Using MongoDB as a Source for AWS DMS](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.MongoDB.html).
	MongodbSettings pulumi.AnyOutput `pulumi:"mongodbSettings"`

	// The password to be used to login to the endpoint database.
	Password pulumi.StringOutput `pulumi:"password"`

	// The port used by the endpoint database.
	Port pulumi.IntOutput `pulumi:"port"`

	// Settings for the target S3 endpoint. Available settings are `serviceAccessRoleArn`, `externalTableDefinition`, `csvRowDelimiter` (default: `\\n`), `csvDelimiter` (default: `,`), `bucketFolder`, `bucketName` and `compressionType` (default: `NONE`). For more details, see [Using Amazon S3 as a Target for AWS Database Migration Service](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html).
	S3Settings pulumi.AnyOutput `pulumi:"s3Settings"`

	// The host name of the server.
	ServerName pulumi.StringOutput `pulumi:"serverName"`

	// The Amazon Resource Name (ARN) used by the service access IAM role for dynamodb endpoints.
	ServiceAccessRole pulumi.StringOutput `pulumi:"serviceAccessRole"`

	// The SSL mode to use for the connection. Can be one of `none | require | verify-ca | verify-full`
	SslMode pulumi.StringOutput `pulumi:"sslMode"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The user name to be used to login to the endpoint database.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOpt) (*Endpoint, error) {
	if args == nil || args.EndpointId == nil {
		return nil, errors.New("missing required argument 'EndpointId'")
	}
	if args == nil || args.EndpointType == nil {
		return nil, errors.New("missing required argument 'EndpointType'")
	}
	if args == nil || args.EngineName == nil {
		return nil, errors.New("missing required argument 'EngineName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["certificateArn"] = args.CertificateArn
		inputs["databaseName"] = args.DatabaseName
		inputs["endpointId"] = args.EndpointId
		inputs["endpointType"] = args.EndpointType
		inputs["engineName"] = args.EngineName
		inputs["extraConnectionAttributes"] = args.ExtraConnectionAttributes
		inputs["kmsKeyArn"] = args.KmsKeyArn
		inputs["mongodbSettings"] = args.MongodbSettings
		inputs["password"] = args.Password
		inputs["port"] = args.Port
		inputs["s3Settings"] = args.S3Settings
		inputs["serverName"] = args.ServerName
		inputs["serviceAccessRole"] = args.ServiceAccessRole
		inputs["sslMode"] = args.SslMode
		inputs["tags"] = args.Tags
		inputs["username"] = args.Username
	}
	var resource Endpoint
	err := ctx.RegisterResource("aws:dms/endpoint:Endpoint", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EndpointState, opts ...pulumi.ResourceOpt) (*Endpoint, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["certificateArn"] = state.CertificateArn
		inputs["databaseName"] = state.DatabaseName
		inputs["endpointArn"] = state.EndpointArn
		inputs["endpointId"] = state.EndpointId
		inputs["endpointType"] = state.EndpointType
		inputs["engineName"] = state.EngineName
		inputs["extraConnectionAttributes"] = state.ExtraConnectionAttributes
		inputs["kmsKeyArn"] = state.KmsKeyArn
		inputs["mongodbSettings"] = state.MongodbSettings
		inputs["password"] = state.Password
		inputs["port"] = state.Port
		inputs["s3Settings"] = state.S3Settings
		inputs["serverName"] = state.ServerName
		inputs["serviceAccessRole"] = state.ServiceAccessRole
		inputs["sslMode"] = state.SslMode
		inputs["tags"] = state.Tags
		inputs["username"] = state.Username
	}
	var resource Endpoint
	err := ctx.ReadResource("aws:dms/endpoint:Endpoint", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Endpoint) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Endpoint) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Endpoint resources.
type EndpointState struct {
	// The Amazon Resource Name (ARN) for the certificate.
	CertificateArn pulumi.StringInput `pulumi:"certificateArn"`
	// The name of the endpoint database.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The Amazon Resource Name (ARN) for the endpoint.
	EndpointArn pulumi.StringInput `pulumi:"endpointArn"`
	// The database endpoint identifier.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The type of endpoint. Can be one of `source | target`.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The type of engine for the endpoint. Can be one of `aurora | azuredb | db2 | docdb | dynamodb | mariadb | mongodb | mysql | oracle | postgres | redshift | s3 | sqlserver | sybase`.
	EngineName pulumi.StringInput `pulumi:"engineName"`
	// Additional attributes associated with the connection. For available attributes see [Using Extra Connection Attributes with AWS Database Migration Service](http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Introduction.ConnectionAttributes.html).
	ExtraConnectionAttributes pulumi.StringInput `pulumi:"extraConnectionAttributes"`
	// The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
	KmsKeyArn pulumi.StringInput `pulumi:"kmsKeyArn"`
	// Settings for the source MongoDB endpoint. Available settings are `authType` (default: `password`), `authMechanism` (default: `default`), `nestingLevel` (default: `none`), `extractDocId` (default: `false`), `docsToInvestigate` (default: `1000`) and `authSource` (default: `admin`). For more details, see [Using MongoDB as a Source for AWS DMS](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.MongoDB.html).
	MongodbSettings pulumi.AnyInput `pulumi:"mongodbSettings"`
	// The password to be used to login to the endpoint database.
	Password pulumi.StringInput `pulumi:"password"`
	// The port used by the endpoint database.
	Port pulumi.IntInput `pulumi:"port"`
	// Settings for the target S3 endpoint. Available settings are `serviceAccessRoleArn`, `externalTableDefinition`, `csvRowDelimiter` (default: `\\n`), `csvDelimiter` (default: `,`), `bucketFolder`, `bucketName` and `compressionType` (default: `NONE`). For more details, see [Using Amazon S3 as a Target for AWS Database Migration Service](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html).
	S3Settings pulumi.AnyInput `pulumi:"s3Settings"`
	// The host name of the server.
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// The Amazon Resource Name (ARN) used by the service access IAM role for dynamodb endpoints.
	ServiceAccessRole pulumi.StringInput `pulumi:"serviceAccessRole"`
	// The SSL mode to use for the connection. Can be one of `none | require | verify-ca | verify-full`
	SslMode pulumi.StringInput `pulumi:"sslMode"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The user name to be used to login to the endpoint database.
	Username pulumi.StringInput `pulumi:"username"`
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	// The Amazon Resource Name (ARN) for the certificate.
	CertificateArn pulumi.StringInput `pulumi:"certificateArn"`
	// The name of the endpoint database.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The database endpoint identifier.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The type of endpoint. Can be one of `source | target`.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The type of engine for the endpoint. Can be one of `aurora | azuredb | db2 | docdb | dynamodb | mariadb | mongodb | mysql | oracle | postgres | redshift | s3 | sqlserver | sybase`.
	EngineName pulumi.StringInput `pulumi:"engineName"`
	// Additional attributes associated with the connection. For available attributes see [Using Extra Connection Attributes with AWS Database Migration Service](http://docs.aws.amazon.com/dms/latest/userguide/CHAP_Introduction.ConnectionAttributes.html).
	ExtraConnectionAttributes pulumi.StringInput `pulumi:"extraConnectionAttributes"`
	// The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
	KmsKeyArn pulumi.StringInput `pulumi:"kmsKeyArn"`
	// Settings for the source MongoDB endpoint. Available settings are `authType` (default: `password`), `authMechanism` (default: `default`), `nestingLevel` (default: `none`), `extractDocId` (default: `false`), `docsToInvestigate` (default: `1000`) and `authSource` (default: `admin`). For more details, see [Using MongoDB as a Source for AWS DMS](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.MongoDB.html).
	MongodbSettings pulumi.AnyInput `pulumi:"mongodbSettings"`
	// The password to be used to login to the endpoint database.
	Password pulumi.StringInput `pulumi:"password"`
	// The port used by the endpoint database.
	Port pulumi.IntInput `pulumi:"port"`
	// Settings for the target S3 endpoint. Available settings are `serviceAccessRoleArn`, `externalTableDefinition`, `csvRowDelimiter` (default: `\\n`), `csvDelimiter` (default: `,`), `bucketFolder`, `bucketName` and `compressionType` (default: `NONE`). For more details, see [Using Amazon S3 as a Target for AWS Database Migration Service](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html).
	S3Settings pulumi.AnyInput `pulumi:"s3Settings"`
	// The host name of the server.
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// The Amazon Resource Name (ARN) used by the service access IAM role for dynamodb endpoints.
	ServiceAccessRole pulumi.StringInput `pulumi:"serviceAccessRole"`
	// The SSL mode to use for the connection. Can be one of `none | require | verify-ca | verify-full`
	SslMode pulumi.StringInput `pulumi:"sslMode"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The user name to be used to login to the endpoint database.
	Username pulumi.StringInput `pulumi:"username"`
}
