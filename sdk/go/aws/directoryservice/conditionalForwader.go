// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package directoryservice

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a conditional forwarder for managed Microsoft AD in AWS Directory Service.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/directory_service_conditional_forwarder.html.markdown.
type ConditionalForwader struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The id of directory.
	DirectoryId pulumi.StringOutput `pulumi:"directoryId"`

	// A list of forwarder IP addresses.
	DnsIps pulumi.ArrayOutput `pulumi:"dnsIps"`

	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName pulumi.StringOutput `pulumi:"remoteDomainName"`
}

// NewConditionalForwader registers a new resource with the given unique name, arguments, and options.
func NewConditionalForwader(ctx *pulumi.Context,
	name string, args *ConditionalForwaderArgs, opts ...pulumi.ResourceOpt) (*ConditionalForwader, error) {
	if args == nil || args.DirectoryId == nil {
		return nil, errors.New("missing required argument 'DirectoryId'")
	}
	if args == nil || args.DnsIps == nil {
		return nil, errors.New("missing required argument 'DnsIps'")
	}
	if args == nil || args.RemoteDomainName == nil {
		return nil, errors.New("missing required argument 'RemoteDomainName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["directoryId"] = args.DirectoryId
		inputs["dnsIps"] = args.DnsIps
		inputs["remoteDomainName"] = args.RemoteDomainName
	}
	var resource ConditionalForwader
	err := ctx.RegisterResource("aws:directoryservice/conditionalForwader:ConditionalForwader", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConditionalForwader gets an existing ConditionalForwader resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConditionalForwader(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ConditionalForwaderState, opts ...pulumi.ResourceOpt) (*ConditionalForwader, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["directoryId"] = state.DirectoryId
		inputs["dnsIps"] = state.DnsIps
		inputs["remoteDomainName"] = state.RemoteDomainName
	}
	var resource ConditionalForwader
	err := ctx.ReadResource("aws:directoryservice/conditionalForwader:ConditionalForwader", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *ConditionalForwader) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *ConditionalForwader) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering ConditionalForwader resources.
type ConditionalForwaderState struct {
	// The id of directory.
	DirectoryId pulumi.StringInput `pulumi:"directoryId"`
	// A list of forwarder IP addresses.
	DnsIps pulumi.ArrayInput `pulumi:"dnsIps"`
	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName pulumi.StringInput `pulumi:"remoteDomainName"`
}

// The set of arguments for constructing a ConditionalForwader resource.
type ConditionalForwaderArgs struct {
	// The id of directory.
	DirectoryId pulumi.StringInput `pulumi:"directoryId"`
	// A list of forwarder IP addresses.
	DnsIps pulumi.ArrayInput `pulumi:"dnsIps"`
	// The fully qualified domain name of the remote domain for which forwarders will be used.
	RemoteDomainName pulumi.StringInput `pulumi:"remoteDomainName"`
}
