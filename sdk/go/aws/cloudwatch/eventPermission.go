// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to create a CloudWatch Events permission to support cross-account events in the current account default event bus.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cloudwatch_event_permission.html.markdown.
type EventPermission struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
	Action pulumi.StringOutput `pulumi:"action"`

	// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
	Condition pulumi.AnyOutput `pulumi:"condition"`

	// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
	Principal pulumi.StringOutput `pulumi:"principal"`

	// An identifier string for the external account that you are granting permissions to.
	StatementId pulumi.StringOutput `pulumi:"statementId"`
}

// NewEventPermission registers a new resource with the given unique name, arguments, and options.
func NewEventPermission(ctx *pulumi.Context,
	name string, args *EventPermissionArgs, opts ...pulumi.ResourceOpt) (*EventPermission, error) {
	if args == nil || args.Principal == nil {
		return nil, errors.New("missing required argument 'Principal'")
	}
	if args == nil || args.StatementId == nil {
		return nil, errors.New("missing required argument 'StatementId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["action"] = args.Action
		inputs["condition"] = args.Condition
		inputs["principal"] = args.Principal
		inputs["statementId"] = args.StatementId
	}
	var resource EventPermission
	err := ctx.RegisterResource("aws:cloudwatch/eventPermission:EventPermission", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventPermission gets an existing EventPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventPermission(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EventPermissionState, opts ...pulumi.ResourceOpt) (*EventPermission, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["action"] = state.Action
		inputs["condition"] = state.Condition
		inputs["principal"] = state.Principal
		inputs["statementId"] = state.StatementId
	}
	var resource EventPermission
	err := ctx.ReadResource("aws:cloudwatch/eventPermission:EventPermission", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *EventPermission) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *EventPermission) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering EventPermission resources.
type EventPermissionState struct {
	// The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
	Action pulumi.StringInput `pulumi:"action"`
	// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
	Condition pulumi.AnyInput `pulumi:"condition"`
	// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
	Principal pulumi.StringInput `pulumi:"principal"`
	// An identifier string for the external account that you are granting permissions to.
	StatementId pulumi.StringInput `pulumi:"statementId"`
}

// The set of arguments for constructing a EventPermission resource.
type EventPermissionArgs struct {
	// The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
	Action pulumi.StringInput `pulumi:"action"`
	// Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
	Condition pulumi.AnyInput `pulumi:"condition"`
	// The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
	Principal pulumi.StringInput `pulumi:"principal"`
	// An identifier string for the external account that you are granting permissions to.
	StatementId pulumi.StringInput `pulumi:"statementId"`
}
