// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a S3 Bucket Notification Configuration. For additional information, see the [Configuring S3 Event Notifications section in the Amazon S3 Developer Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).
// 
// > **NOTE:** S3 Buckets only support a single notification configuration. Declaring multiple `s3.BucketNotification` resources to the same S3 Bucket will cause a perpetual difference in configuration. See the example "Trigger multiple Lambda functions" for an option.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/s3_bucket_notification.html.markdown.
type BucketNotification struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The name of the bucket to put notification configuration.
	Bucket pulumi.StringOutput `pulumi:"bucket"`

	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions pulumi.ArrayOutput `pulumi:"lambdaFunctions"`

	// The notification configuration to SQS Queue (documented below).
	Queues pulumi.ArrayOutput `pulumi:"queues"`

	// The notification configuration to SNS Topic (documented below).
	Topics pulumi.ArrayOutput `pulumi:"topics"`
}

// NewBucketNotification registers a new resource with the given unique name, arguments, and options.
func NewBucketNotification(ctx *pulumi.Context,
	name string, args *BucketNotificationArgs, opts ...pulumi.ResourceOpt) (*BucketNotification, error) {
	if args == nil || args.Bucket == nil {
		return nil, errors.New("missing required argument 'Bucket'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["bucket"] = args.Bucket
		inputs["lambdaFunctions"] = args.LambdaFunctions
		inputs["queues"] = args.Queues
		inputs["topics"] = args.Topics
	}
	var resource BucketNotification
	err := ctx.RegisterResource("aws:s3/bucketNotification:BucketNotification", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketNotification gets an existing BucketNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketNotification(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BucketNotificationState, opts ...pulumi.ResourceOpt) (*BucketNotification, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["bucket"] = state.Bucket
		inputs["lambdaFunctions"] = state.LambdaFunctions
		inputs["queues"] = state.Queues
		inputs["topics"] = state.Topics
	}
	var resource BucketNotification
	err := ctx.ReadResource("aws:s3/bucketNotification:BucketNotification", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *BucketNotification) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *BucketNotification) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering BucketNotification resources.
type BucketNotificationState struct {
	// The name of the bucket to put notification configuration.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions pulumi.ArrayInput `pulumi:"lambdaFunctions"`
	// The notification configuration to SQS Queue (documented below).
	Queues pulumi.ArrayInput `pulumi:"queues"`
	// The notification configuration to SNS Topic (documented below).
	Topics pulumi.ArrayInput `pulumi:"topics"`
}

// The set of arguments for constructing a BucketNotification resource.
type BucketNotificationArgs struct {
	// The name of the bucket to put notification configuration.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// Used to configure notifications to a Lambda Function (documented below).
	LambdaFunctions pulumi.ArrayInput `pulumi:"lambdaFunctions"`
	// The notification configuration to SQS Queue (documented below).
	Queues pulumi.ArrayInput `pulumi:"queues"`
	// The notification configuration to SNS Topic (documented below).
	Topics pulumi.ArrayInput `pulumi:"topics"`
}
