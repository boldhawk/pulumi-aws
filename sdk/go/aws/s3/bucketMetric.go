// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a S3 bucket [metrics configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html) resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/s3_bucket_metric.html.markdown.
type BucketMetric struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The name of the bucket to put metric configuration.
	Bucket pulumi.StringOutput `pulumi:"bucket"`

	// [Object filtering](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html#metrics-configurations-filter) that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter pulumi.AnyOutput `pulumi:"filter"`

	// Unique identifier of the metrics configuration for the bucket.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewBucketMetric registers a new resource with the given unique name, arguments, and options.
func NewBucketMetric(ctx *pulumi.Context,
	name string, args *BucketMetricArgs, opts ...pulumi.ResourceOpt) (*BucketMetric, error) {
	if args == nil || args.Bucket == nil {
		return nil, errors.New("missing required argument 'Bucket'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["bucket"] = args.Bucket
		inputs["filter"] = args.Filter
		inputs["name"] = args.Name
	}
	var resource BucketMetric
	err := ctx.RegisterResource("aws:s3/bucketMetric:BucketMetric", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketMetric gets an existing BucketMetric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketMetric(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BucketMetricState, opts ...pulumi.ResourceOpt) (*BucketMetric, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["bucket"] = state.Bucket
		inputs["filter"] = state.Filter
		inputs["name"] = state.Name
	}
	var resource BucketMetric
	err := ctx.ReadResource("aws:s3/bucketMetric:BucketMetric", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *BucketMetric) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *BucketMetric) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering BucketMetric resources.
type BucketMetricState struct {
	// The name of the bucket to put metric configuration.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// [Object filtering](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html#metrics-configurations-filter) that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter pulumi.AnyInput `pulumi:"filter"`
	// Unique identifier of the metrics configuration for the bucket.
	Name pulumi.StringInput `pulumi:"name"`
}

// The set of arguments for constructing a BucketMetric resource.
type BucketMetricArgs struct {
	// The name of the bucket to put metric configuration.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// [Object filtering](http://docs.aws.amazon.com/AmazonS3/latest/dev/metrics-configurations.html#metrics-configurations-filter) that accepts a prefix, tags, or a logical AND of prefix and tags (documented below).
	Filter pulumi.AnyInput `pulumi:"filter"`
	// Unique identifier of the metrics configuration for the bucket.
	Name pulumi.StringInput `pulumi:"name"`
}
