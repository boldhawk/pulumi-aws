// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecr

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Elastic Container Registry Repository.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ecr_repository.html.markdown.
type Repository struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Full ARN of the repository.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The tag mutability setting for the repository. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
	ImageTagMutability pulumi.StringOutput `pulumi:"imageTagMutability"`

	// Name of the repository.
	Name pulumi.StringOutput `pulumi:"name"`

	// The registry ID where the repository was created.
	RegistryId pulumi.StringOutput `pulumi:"registryId"`

	// The URL of the repository (in the form `aws_account_id.dkr.ecr.region.amazonaws.com/repositoryName`
	RepositoryUrl pulumi.StringOutput `pulumi:"repositoryUrl"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOpt) (*Repository, error) {
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["imageTagMutability"] = args.ImageTagMutability
		inputs["name"] = args.Name
		inputs["tags"] = args.Tags
	}
	var resource Repository
	err := ctx.RegisterResource("aws:ecr/repository:Repository", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RepositoryState, opts ...pulumi.ResourceOpt) (*Repository, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["imageTagMutability"] = state.ImageTagMutability
		inputs["name"] = state.Name
		inputs["registryId"] = state.RegistryId
		inputs["repositoryUrl"] = state.RepositoryUrl
		inputs["tags"] = state.Tags
	}
	var resource Repository
	err := ctx.ReadResource("aws:ecr/repository:Repository", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Repository) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Repository) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Repository resources.
type RepositoryState struct {
	// Full ARN of the repository.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The tag mutability setting for the repository. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
	ImageTagMutability pulumi.StringInput `pulumi:"imageTagMutability"`
	// Name of the repository.
	Name pulumi.StringInput `pulumi:"name"`
	// The registry ID where the repository was created.
	RegistryId pulumi.StringInput `pulumi:"registryId"`
	// The URL of the repository (in the form `aws_account_id.dkr.ecr.region.amazonaws.com/repositoryName`
	RepositoryUrl pulumi.StringInput `pulumi:"repositoryUrl"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	// The tag mutability setting for the repository. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
	ImageTagMutability pulumi.StringInput `pulumi:"imageTagMutability"`
	// Name of the repository.
	Name pulumi.StringInput `pulumi:"name"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
