// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mediastore

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a MediaStore Container Policy.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/media_store_container_policy.html.markdown.
type ContainerPolicy struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The name of the container.
	ContainerName pulumi.StringOutput `pulumi:"containerName"`

	// The contents of the policy.
	Policy pulumi.StringOutput `pulumi:"policy"`
}

// NewContainerPolicy registers a new resource with the given unique name, arguments, and options.
func NewContainerPolicy(ctx *pulumi.Context,
	name string, args *ContainerPolicyArgs, opts ...pulumi.ResourceOpt) (*ContainerPolicy, error) {
	if args == nil || args.ContainerName == nil {
		return nil, errors.New("missing required argument 'ContainerName'")
	}
	if args == nil || args.Policy == nil {
		return nil, errors.New("missing required argument 'Policy'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["containerName"] = args.ContainerName
		inputs["policy"] = args.Policy
	}
	var resource ContainerPolicy
	err := ctx.RegisterResource("aws:mediastore/containerPolicy:ContainerPolicy", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerPolicy gets an existing ContainerPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ContainerPolicyState, opts ...pulumi.ResourceOpt) (*ContainerPolicy, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["containerName"] = state.ContainerName
		inputs["policy"] = state.Policy
	}
	var resource ContainerPolicy
	err := ctx.ReadResource("aws:mediastore/containerPolicy:ContainerPolicy", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *ContainerPolicy) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *ContainerPolicy) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering ContainerPolicy resources.
type ContainerPolicyState struct {
	// The name of the container.
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// The contents of the policy.
	Policy pulumi.StringInput `pulumi:"policy"`
}

// The set of arguments for constructing a ContainerPolicy resource.
type ContainerPolicyArgs struct {
	// The name of the container.
	ContainerName pulumi.StringInput `pulumi:"containerName"`
	// The contents of the policy.
	Policy pulumi.StringInput `pulumi:"policy"`
}
