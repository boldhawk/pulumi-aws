// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datapipeline

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Data Pipeline resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/datapipeline_pipeline.html.markdown.
type Pipeline struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The description of Pipeline.
	Description pulumi.StringOutput `pulumi:"description"`

	// The name of Pipeline.
	Name pulumi.StringOutput `pulumi:"name"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOpt) (*Pipeline, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["tags"] = args.Tags
	}
	var resource Pipeline
	err := ctx.RegisterResource("aws:datapipeline/pipeline:Pipeline", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PipelineState, opts ...pulumi.ResourceOpt) (*Pipeline, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["tags"] = state.Tags
	}
	var resource Pipeline
	err := ctx.ReadResource("aws:datapipeline/pipeline:Pipeline", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Pipeline) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Pipeline) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Pipeline resources.
type PipelineState struct {
	// The description of Pipeline.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of Pipeline.
	Name pulumi.StringInput `pulumi:"name"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	// The description of Pipeline.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of Pipeline.
	Name pulumi.StringInput `pulumi:"name"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
