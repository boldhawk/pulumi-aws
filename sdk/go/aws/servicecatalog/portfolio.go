// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicecatalog

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to create a Service Catalog Portfolio.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/servicecatalog_portfolio.html.markdown.
type Portfolio struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	Arn pulumi.StringOutput `pulumi:"arn"`

	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`

	// Description of the portfolio
	Description pulumi.StringOutput `pulumi:"description"`

	// The name of the portfolio.
	Name pulumi.StringOutput `pulumi:"name"`

	// Name of the person or organization who owns the portfolio.
	ProviderName pulumi.StringOutput `pulumi:"providerName"`

	// Tags to apply to the connection.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewPortfolio registers a new resource with the given unique name, arguments, and options.
func NewPortfolio(ctx *pulumi.Context,
	name string, args *PortfolioArgs, opts ...pulumi.ResourceOpt) (*Portfolio, error) {
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["providerName"] = args.ProviderName
		inputs["tags"] = args.Tags
	}
	var resource Portfolio
	err := ctx.RegisterResource("aws:servicecatalog/portfolio:Portfolio", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortfolio gets an existing Portfolio resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortfolio(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PortfolioState, opts ...pulumi.ResourceOpt) (*Portfolio, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["createdTime"] = state.CreatedTime
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["providerName"] = state.ProviderName
		inputs["tags"] = state.Tags
	}
	var resource Portfolio
	err := ctx.ReadResource("aws:servicecatalog/portfolio:Portfolio", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Portfolio) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Portfolio) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Portfolio resources.
type PortfolioState struct {
	Arn pulumi.StringInput `pulumi:"arn"`
	CreatedTime pulumi.StringInput `pulumi:"createdTime"`
	// Description of the portfolio
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the portfolio.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the person or organization who owns the portfolio.
	ProviderName pulumi.StringInput `pulumi:"providerName"`
	// Tags to apply to the connection.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Portfolio resource.
type PortfolioArgs struct {
	// Description of the portfolio
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the portfolio.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the person or organization who owns the portfolio.
	ProviderName pulumi.StringInput `pulumi:"providerName"`
	// Tags to apply to the connection.
	Tags pulumi.MapInput `pulumi:"tags"`
}
