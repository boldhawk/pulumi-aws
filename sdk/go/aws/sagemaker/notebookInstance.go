// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sagemaker

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Sagemaker Notebook Instance resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/sagemaker_notebook_instance.html.markdown.
type NotebookInstance struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The Amazon Resource Name (ARN) assigned by AWS to this notebook instance.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The name of ML compute instance type.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`

	// The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`

	// The name of a lifecycle configuration to associate with the notebook instance.
	LifecycleConfigName pulumi.StringOutput `pulumi:"lifecycleConfigName"`

	// The name of the notebook instance (must be unique).
	Name pulumi.StringOutput `pulumi:"name"`

	// The ARN of the IAM role to be used by the notebook instance which allows SageMaker to call other services on your behalf.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`

	// The associated security groups.
	SecurityGroups pulumi.ArrayOutput `pulumi:"securityGroups"`

	// The VPC subnet ID.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewNotebookInstance registers a new resource with the given unique name, arguments, and options.
func NewNotebookInstance(ctx *pulumi.Context,
	name string, args *NotebookInstanceArgs, opts ...pulumi.ResourceOpt) (*NotebookInstance, error) {
	if args == nil || args.InstanceType == nil {
		return nil, errors.New("missing required argument 'InstanceType'")
	}
	if args == nil || args.RoleArn == nil {
		return nil, errors.New("missing required argument 'RoleArn'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["instanceType"] = args.InstanceType
		inputs["kmsKeyId"] = args.KmsKeyId
		inputs["lifecycleConfigName"] = args.LifecycleConfigName
		inputs["name"] = args.Name
		inputs["roleArn"] = args.RoleArn
		inputs["securityGroups"] = args.SecurityGroups
		inputs["subnetId"] = args.SubnetId
		inputs["tags"] = args.Tags
	}
	var resource NotebookInstance
	err := ctx.RegisterResource("aws:sagemaker/notebookInstance:NotebookInstance", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotebookInstance gets an existing NotebookInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotebookInstance(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NotebookInstanceState, opts ...pulumi.ResourceOpt) (*NotebookInstance, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["instanceType"] = state.InstanceType
		inputs["kmsKeyId"] = state.KmsKeyId
		inputs["lifecycleConfigName"] = state.LifecycleConfigName
		inputs["name"] = state.Name
		inputs["roleArn"] = state.RoleArn
		inputs["securityGroups"] = state.SecurityGroups
		inputs["subnetId"] = state.SubnetId
		inputs["tags"] = state.Tags
	}
	var resource NotebookInstance
	err := ctx.ReadResource("aws:sagemaker/notebookInstance:NotebookInstance", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *NotebookInstance) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *NotebookInstance) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering NotebookInstance resources.
type NotebookInstanceState struct {
	// The Amazon Resource Name (ARN) assigned by AWS to this notebook instance.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The name of ML compute instance type.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// The name of a lifecycle configuration to associate with the notebook instance.
	LifecycleConfigName pulumi.StringInput `pulumi:"lifecycleConfigName"`
	// The name of the notebook instance (must be unique).
	Name pulumi.StringInput `pulumi:"name"`
	// The ARN of the IAM role to be used by the notebook instance which allows SageMaker to call other services on your behalf.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// The associated security groups.
	SecurityGroups pulumi.ArrayInput `pulumi:"securityGroups"`
	// The VPC subnet ID.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a NotebookInstance resource.
type NotebookInstanceArgs struct {
	// The name of ML compute instance type.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// The name of a lifecycle configuration to associate with the notebook instance.
	LifecycleConfigName pulumi.StringInput `pulumi:"lifecycleConfigName"`
	// The name of the notebook instance (must be unique).
	Name pulumi.StringInput `pulumi:"name"`
	// The ARN of the IAM role to be used by the notebook instance which allows SageMaker to call other services on your behalf.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// The associated security groups.
	SecurityGroups pulumi.ArrayInput `pulumi:"securityGroups"`
	// The VPC subnet ID.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
