// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an SSM Maintenance Window Task resource
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ssm_maintenance_window_task.html.markdown.
type MaintenanceWindowTask struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The description of the maintenance window task.
	Description pulumi.StringOutput `pulumi:"description"`

	// A structure containing information about an Amazon S3 bucket to write instance-level logs to. Use `taskInvocationParameters` configuration block `runCommandParameters` configuration block `output_s3_*` arguments instead. Conflicts with `taskInvocationParameters`. Documented below.
	LoggingInfo pulumi.AnyOutput `pulumi:"loggingInfo"`

	// The maximum number of targets this task can be run for in parallel.
	MaxConcurrency pulumi.StringOutput `pulumi:"maxConcurrency"`

	// The maximum number of errors allowed before this task stops being scheduled.
	MaxErrors pulumi.StringOutput `pulumi:"maxErrors"`

	// The parameter name.
	Name pulumi.StringOutput `pulumi:"name"`

	// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
	Priority pulumi.IntOutput `pulumi:"priority"`

	// The IAM service role to assume during task execution.
	ServiceRoleArn pulumi.StringOutput `pulumi:"serviceRoleArn"`

	// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
	Targets pulumi.ArrayOutput `pulumi:"targets"`

	// The ARN of the task to execute.
	TaskArn pulumi.StringOutput `pulumi:"taskArn"`

	// The parameters for task execution. This argument is conflict with `taskParameters` and `loggingInfo`.
	TaskInvocationParameters pulumi.AnyOutput `pulumi:"taskInvocationParameters"`

	// A structure containing information about parameters required by the particular `taskArn`. Use `parameter` configuration blocks under the `taskInvocationParameters` configuration block instead. Conflicts with `taskInvocationParameters`. Documented below.
	TaskParameters pulumi.ArrayOutput `pulumi:"taskParameters"`

	// The type of task being registered. The only allowed value is `RUN_COMMAND`.
	TaskType pulumi.StringOutput `pulumi:"taskType"`

	// The Id of the maintenance window to register the task with.
	WindowId pulumi.StringOutput `pulumi:"windowId"`
}

// NewMaintenanceWindowTask registers a new resource with the given unique name, arguments, and options.
func NewMaintenanceWindowTask(ctx *pulumi.Context,
	name string, args *MaintenanceWindowTaskArgs, opts ...pulumi.ResourceOpt) (*MaintenanceWindowTask, error) {
	if args == nil || args.MaxConcurrency == nil {
		return nil, errors.New("missing required argument 'MaxConcurrency'")
	}
	if args == nil || args.MaxErrors == nil {
		return nil, errors.New("missing required argument 'MaxErrors'")
	}
	if args == nil || args.ServiceRoleArn == nil {
		return nil, errors.New("missing required argument 'ServiceRoleArn'")
	}
	if args == nil || args.Targets == nil {
		return nil, errors.New("missing required argument 'Targets'")
	}
	if args == nil || args.TaskArn == nil {
		return nil, errors.New("missing required argument 'TaskArn'")
	}
	if args == nil || args.TaskType == nil {
		return nil, errors.New("missing required argument 'TaskType'")
	}
	if args == nil || args.WindowId == nil {
		return nil, errors.New("missing required argument 'WindowId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["description"] = args.Description
		inputs["loggingInfo"] = args.LoggingInfo
		inputs["maxConcurrency"] = args.MaxConcurrency
		inputs["maxErrors"] = args.MaxErrors
		inputs["name"] = args.Name
		inputs["priority"] = args.Priority
		inputs["serviceRoleArn"] = args.ServiceRoleArn
		inputs["targets"] = args.Targets
		inputs["taskArn"] = args.TaskArn
		inputs["taskInvocationParameters"] = args.TaskInvocationParameters
		inputs["taskParameters"] = args.TaskParameters
		inputs["taskType"] = args.TaskType
		inputs["windowId"] = args.WindowId
	}
	var resource MaintenanceWindowTask
	err := ctx.RegisterResource("aws:ssm/maintenanceWindowTask:MaintenanceWindowTask", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaintenanceWindowTask gets an existing MaintenanceWindowTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenanceWindowTask(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MaintenanceWindowTaskState, opts ...pulumi.ResourceOpt) (*MaintenanceWindowTask, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["description"] = state.Description
		inputs["loggingInfo"] = state.LoggingInfo
		inputs["maxConcurrency"] = state.MaxConcurrency
		inputs["maxErrors"] = state.MaxErrors
		inputs["name"] = state.Name
		inputs["priority"] = state.Priority
		inputs["serviceRoleArn"] = state.ServiceRoleArn
		inputs["targets"] = state.Targets
		inputs["taskArn"] = state.TaskArn
		inputs["taskInvocationParameters"] = state.TaskInvocationParameters
		inputs["taskParameters"] = state.TaskParameters
		inputs["taskType"] = state.TaskType
		inputs["windowId"] = state.WindowId
	}
	var resource MaintenanceWindowTask
	err := ctx.ReadResource("aws:ssm/maintenanceWindowTask:MaintenanceWindowTask", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *MaintenanceWindowTask) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *MaintenanceWindowTask) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering MaintenanceWindowTask resources.
type MaintenanceWindowTaskState struct {
	// The description of the maintenance window task.
	Description pulumi.StringInput `pulumi:"description"`
	// A structure containing information about an Amazon S3 bucket to write instance-level logs to. Use `taskInvocationParameters` configuration block `runCommandParameters` configuration block `output_s3_*` arguments instead. Conflicts with `taskInvocationParameters`. Documented below.
	LoggingInfo pulumi.AnyInput `pulumi:"loggingInfo"`
	// The maximum number of targets this task can be run for in parallel.
	MaxConcurrency pulumi.StringInput `pulumi:"maxConcurrency"`
	// The maximum number of errors allowed before this task stops being scheduled.
	MaxErrors pulumi.StringInput `pulumi:"maxErrors"`
	// The parameter name.
	Name pulumi.StringInput `pulumi:"name"`
	// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
	Priority pulumi.IntInput `pulumi:"priority"`
	// The IAM service role to assume during task execution.
	ServiceRoleArn pulumi.StringInput `pulumi:"serviceRoleArn"`
	// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
	Targets pulumi.ArrayInput `pulumi:"targets"`
	// The ARN of the task to execute.
	TaskArn pulumi.StringInput `pulumi:"taskArn"`
	// The parameters for task execution. This argument is conflict with `taskParameters` and `loggingInfo`.
	TaskInvocationParameters pulumi.AnyInput `pulumi:"taskInvocationParameters"`
	// A structure containing information about parameters required by the particular `taskArn`. Use `parameter` configuration blocks under the `taskInvocationParameters` configuration block instead. Conflicts with `taskInvocationParameters`. Documented below.
	TaskParameters pulumi.ArrayInput `pulumi:"taskParameters"`
	// The type of task being registered. The only allowed value is `RUN_COMMAND`.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// The Id of the maintenance window to register the task with.
	WindowId pulumi.StringInput `pulumi:"windowId"`
}

// The set of arguments for constructing a MaintenanceWindowTask resource.
type MaintenanceWindowTaskArgs struct {
	// The description of the maintenance window task.
	Description pulumi.StringInput `pulumi:"description"`
	// A structure containing information about an Amazon S3 bucket to write instance-level logs to. Use `taskInvocationParameters` configuration block `runCommandParameters` configuration block `output_s3_*` arguments instead. Conflicts with `taskInvocationParameters`. Documented below.
	LoggingInfo pulumi.AnyInput `pulumi:"loggingInfo"`
	// The maximum number of targets this task can be run for in parallel.
	MaxConcurrency pulumi.StringInput `pulumi:"maxConcurrency"`
	// The maximum number of errors allowed before this task stops being scheduled.
	MaxErrors pulumi.StringInput `pulumi:"maxErrors"`
	// The parameter name.
	Name pulumi.StringInput `pulumi:"name"`
	// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
	Priority pulumi.IntInput `pulumi:"priority"`
	// The IAM service role to assume during task execution.
	ServiceRoleArn pulumi.StringInput `pulumi:"serviceRoleArn"`
	// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
	Targets pulumi.ArrayInput `pulumi:"targets"`
	// The ARN of the task to execute.
	TaskArn pulumi.StringInput `pulumi:"taskArn"`
	// The parameters for task execution. This argument is conflict with `taskParameters` and `loggingInfo`.
	TaskInvocationParameters pulumi.AnyInput `pulumi:"taskInvocationParameters"`
	// A structure containing information about parameters required by the particular `taskArn`. Use `parameter` configuration blocks under the `taskInvocationParameters` configuration block instead. Conflicts with `taskInvocationParameters`. Documented below.
	TaskParameters pulumi.ArrayInput `pulumi:"taskParameters"`
	// The type of task being registered. The only allowed value is `RUN_COMMAND`.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// The Id of the maintenance window to register the task with.
	WindowId pulumi.StringInput `pulumi:"windowId"`
}
