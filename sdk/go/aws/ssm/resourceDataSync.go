// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a SSM resource data sync.
// 
// ## s3Destination
// 
// `s3Destination` supports the following:
// 
// * `bucketName` - (Required) Name of S3 bucket where the aggregated data is stored.
// * `region` - (Required) Region with the bucket targeted by the Resource Data Sync.
// * `kmsKeyArn` - (Optional) ARN of an encryption key for a destination in Amazon S3.
// * `prefix` - (Optional) Prefix for the bucket.
// * `syncFormat` - (Optional) A supported sync format. Only JsonSerDe is currently supported. Defaults to JsonSerDe.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ssm_resource_data_sync.html.markdown.
type ResourceDataSync struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Name for the configuration.
	Name pulumi.StringOutput `pulumi:"name"`

	// Amazon S3 configuration details for the sync.
	S3Destination pulumi.AnyOutput `pulumi:"s3Destination"`
}

// NewResourceDataSync registers a new resource with the given unique name, arguments, and options.
func NewResourceDataSync(ctx *pulumi.Context,
	name string, args *ResourceDataSyncArgs, opts ...pulumi.ResourceOpt) (*ResourceDataSync, error) {
	if args == nil || args.S3Destination == nil {
		return nil, errors.New("missing required argument 'S3Destination'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["name"] = args.Name
		inputs["s3Destination"] = args.S3Destination
	}
	var resource ResourceDataSync
	err := ctx.RegisterResource("aws:ssm/resourceDataSync:ResourceDataSync", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceDataSync gets an existing ResourceDataSync resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceDataSync(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ResourceDataSyncState, opts ...pulumi.ResourceOpt) (*ResourceDataSync, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["name"] = state.Name
		inputs["s3Destination"] = state.S3Destination
	}
	var resource ResourceDataSync
	err := ctx.ReadResource("aws:ssm/resourceDataSync:ResourceDataSync", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *ResourceDataSync) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *ResourceDataSync) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering ResourceDataSync resources.
type ResourceDataSyncState struct {
	// Name for the configuration.
	Name pulumi.StringInput `pulumi:"name"`
	// Amazon S3 configuration details for the sync.
	S3Destination pulumi.AnyInput `pulumi:"s3Destination"`
}

// The set of arguments for constructing a ResourceDataSync resource.
type ResourceDataSyncArgs struct {
	// Name for the configuration.
	Name pulumi.StringInput `pulumi:"name"`
	// Amazon S3 configuration details for the sync.
	S3Destination pulumi.AnyInput `pulumi:"s3Destination"`
}
