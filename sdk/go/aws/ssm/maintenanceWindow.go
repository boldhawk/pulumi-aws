// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an SSM Maintenance Window resource
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ssm_maintenance_window.html.markdown.
type MaintenanceWindow struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
	AllowUnassociatedTargets pulumi.BoolOutput `pulumi:"allowUnassociatedTargets"`

	// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
	Cutoff pulumi.IntOutput `pulumi:"cutoff"`

	// The duration of the Maintenance Window in hours.
	Duration pulumi.IntOutput `pulumi:"duration"`

	// Whether the maintenance window is enabled. Default: `true`.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`

	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to no longer run the maintenance window.
	EndDate pulumi.StringOutput `pulumi:"endDate"`

	// The name of the maintenance window.
	Name pulumi.StringOutput `pulumi:"name"`

	// The schedule of the Maintenance Window in the form of a [cron](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-cron.html) or rate expression.
	Schedule pulumi.StringOutput `pulumi:"schedule"`

	// Timezone for schedule in [Internet Assigned Numbers Authority (IANA) Time Zone Database format](https://www.iana.org/time-zones). For example: `America/Los_Angeles`, `etc/UTC`, or `Asia/Seoul`.
	ScheduleTimezone pulumi.StringOutput `pulumi:"scheduleTimezone"`

	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to begin the maintenance window.
	StartDate pulumi.StringOutput `pulumi:"startDate"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewMaintenanceWindow registers a new resource with the given unique name, arguments, and options.
func NewMaintenanceWindow(ctx *pulumi.Context,
	name string, args *MaintenanceWindowArgs, opts ...pulumi.ResourceOpt) (*MaintenanceWindow, error) {
	if args == nil || args.Cutoff == nil {
		return nil, errors.New("missing required argument 'Cutoff'")
	}
	if args == nil || args.Duration == nil {
		return nil, errors.New("missing required argument 'Duration'")
	}
	if args == nil || args.Schedule == nil {
		return nil, errors.New("missing required argument 'Schedule'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["allowUnassociatedTargets"] = args.AllowUnassociatedTargets
		inputs["cutoff"] = args.Cutoff
		inputs["duration"] = args.Duration
		inputs["enabled"] = args.Enabled
		inputs["endDate"] = args.EndDate
		inputs["name"] = args.Name
		inputs["schedule"] = args.Schedule
		inputs["scheduleTimezone"] = args.ScheduleTimezone
		inputs["startDate"] = args.StartDate
		inputs["tags"] = args.Tags
	}
	var resource MaintenanceWindow
	err := ctx.RegisterResource("aws:ssm/maintenanceWindow:MaintenanceWindow", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaintenanceWindow gets an existing MaintenanceWindow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenanceWindow(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MaintenanceWindowState, opts ...pulumi.ResourceOpt) (*MaintenanceWindow, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["allowUnassociatedTargets"] = state.AllowUnassociatedTargets
		inputs["cutoff"] = state.Cutoff
		inputs["duration"] = state.Duration
		inputs["enabled"] = state.Enabled
		inputs["endDate"] = state.EndDate
		inputs["name"] = state.Name
		inputs["schedule"] = state.Schedule
		inputs["scheduleTimezone"] = state.ScheduleTimezone
		inputs["startDate"] = state.StartDate
		inputs["tags"] = state.Tags
	}
	var resource MaintenanceWindow
	err := ctx.ReadResource("aws:ssm/maintenanceWindow:MaintenanceWindow", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *MaintenanceWindow) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *MaintenanceWindow) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering MaintenanceWindow resources.
type MaintenanceWindowState struct {
	// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
	AllowUnassociatedTargets pulumi.BoolInput `pulumi:"allowUnassociatedTargets"`
	// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
	Cutoff pulumi.IntInput `pulumi:"cutoff"`
	// The duration of the Maintenance Window in hours.
	Duration pulumi.IntInput `pulumi:"duration"`
	// Whether the maintenance window is enabled. Default: `true`.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to no longer run the maintenance window.
	EndDate pulumi.StringInput `pulumi:"endDate"`
	// The name of the maintenance window.
	Name pulumi.StringInput `pulumi:"name"`
	// The schedule of the Maintenance Window in the form of a [cron](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-cron.html) or rate expression.
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// Timezone for schedule in [Internet Assigned Numbers Authority (IANA) Time Zone Database format](https://www.iana.org/time-zones). For example: `America/Los_Angeles`, `etc/UTC`, or `Asia/Seoul`.
	ScheduleTimezone pulumi.StringInput `pulumi:"scheduleTimezone"`
	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to begin the maintenance window.
	StartDate pulumi.StringInput `pulumi:"startDate"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a MaintenanceWindow resource.
type MaintenanceWindowArgs struct {
	// Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
	AllowUnassociatedTargets pulumi.BoolInput `pulumi:"allowUnassociatedTargets"`
	// The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
	Cutoff pulumi.IntInput `pulumi:"cutoff"`
	// The duration of the Maintenance Window in hours.
	Duration pulumi.IntInput `pulumi:"duration"`
	// Whether the maintenance window is enabled. Default: `true`.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to no longer run the maintenance window.
	EndDate pulumi.StringInput `pulumi:"endDate"`
	// The name of the maintenance window.
	Name pulumi.StringInput `pulumi:"name"`
	// The schedule of the Maintenance Window in the form of a [cron](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-cron.html) or rate expression.
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// Timezone for schedule in [Internet Assigned Numbers Authority (IANA) Time Zone Database format](https://www.iana.org/time-zones). For example: `America/Los_Angeles`, `etc/UTC`, or `Asia/Seoul`.
	ScheduleTimezone pulumi.StringInput `pulumi:"scheduleTimezone"`
	// Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to begin the maintenance window.
	StartDate pulumi.StringInput `pulumi:"startDate"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
