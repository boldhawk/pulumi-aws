// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package athena

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Athena Workgroup.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/athena_workgroup.html.markdown.
type Workgroup struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Amazon Resource Name (ARN) of the workgroup
	Arn pulumi.StringOutput `pulumi:"arn"`

	// Configuration block with various settings for the workgroup. Documented below.
	Configuration pulumi.AnyOutput `pulumi:"configuration"`

	// Description of the workgroup.
	Description pulumi.StringOutput `pulumi:"description"`

	// Name of the workgroup.
	Name pulumi.StringOutput `pulumi:"name"`

	// State of the workgroup. Valid values are `DISABLED` or `ENABLED`. Defaults to `ENABLED`.
	State pulumi.StringOutput `pulumi:"state"`

	// Key-value mapping of resource tags for the workgroup.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewWorkgroup registers a new resource with the given unique name, arguments, and options.
func NewWorkgroup(ctx *pulumi.Context,
	name string, args *WorkgroupArgs, opts ...pulumi.ResourceOpt) (*Workgroup, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["configuration"] = args.Configuration
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["state"] = args.State
		inputs["tags"] = args.Tags
	}
	var resource Workgroup
	err := ctx.RegisterResource("aws:athena/workgroup:Workgroup", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkgroup gets an existing Workgroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkgroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *WorkgroupState, opts ...pulumi.ResourceOpt) (*Workgroup, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["configuration"] = state.Configuration
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["state"] = state.State
		inputs["tags"] = state.Tags
	}
	var resource Workgroup
	err := ctx.ReadResource("aws:athena/workgroup:Workgroup", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Workgroup) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Workgroup) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Workgroup resources.
type WorkgroupState struct {
	// Amazon Resource Name (ARN) of the workgroup
	Arn pulumi.StringInput `pulumi:"arn"`
	// Configuration block with various settings for the workgroup. Documented below.
	Configuration pulumi.AnyInput `pulumi:"configuration"`
	// Description of the workgroup.
	Description pulumi.StringInput `pulumi:"description"`
	// Name of the workgroup.
	Name pulumi.StringInput `pulumi:"name"`
	// State of the workgroup. Valid values are `DISABLED` or `ENABLED`. Defaults to `ENABLED`.
	State pulumi.StringInput `pulumi:"state"`
	// Key-value mapping of resource tags for the workgroup.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Workgroup resource.
type WorkgroupArgs struct {
	// Configuration block with various settings for the workgroup. Documented below.
	Configuration pulumi.AnyInput `pulumi:"configuration"`
	// Description of the workgroup.
	Description pulumi.StringInput `pulumi:"description"`
	// Name of the workgroup.
	Name pulumi.StringInput `pulumi:"name"`
	// State of the workgroup. Valid values are `DISABLED` or `ENABLED`. Defaults to `ENABLED`.
	State pulumi.StringInput `pulumi:"state"`
	// Key-value mapping of resource tags for the workgroup.
	Tags pulumi.MapInput `pulumi:"tags"`
}
