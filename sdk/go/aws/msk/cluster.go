// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package msk

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages AWS Managed Streaming for Kafka cluster
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/msk_cluster.html.markdown.
type Cluster struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// A comma separated list of one or more hostname:port pairs of kafka brokers suitable to boostrap connectivity to the kafka cluster. Only contains value if `clientBroker` encryption in transit is set to `PLAINTEXT` or `TLS_PLAINTEXT`.
	BootstrapBrokers pulumi.StringOutput `pulumi:"bootstrapBrokers"`

	// A comma separated list of one or more DNS names (or IPs) and TLS port pairs kafka brokers suitable to boostrap connectivity to the kafka cluster. Only contains value if `clientBroker` encryption in transit is set to `TLS_PLAINTEXT` or `TLS`.
	BootstrapBrokersTls pulumi.StringOutput `pulumi:"bootstrapBrokersTls"`

	// Configuration block for the broker nodes of the Kafka cluster.
	BrokerNodeGroupInfo pulumi.AnyOutput `pulumi:"brokerNodeGroupInfo"`

	// Configuration block for specifying a client authentication. See below.
	ClientAuthentication pulumi.AnyOutput `pulumi:"clientAuthentication"`

	// Name of the MSK cluster.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`

	// Configuration block for specifying a MSK Configuration to attach to Kafka brokers. See below.
	ConfigurationInfo pulumi.AnyOutput `pulumi:"configurationInfo"`

	// Current version of the MSK Cluster used for updates, e.g. `K13V1IB3VIYZZH`
	// * `encryption_info.0.encryption_at_rest_kms_key_arn` - The ARN of the KMS key used for encryption at rest of the broker data volumes.
	CurrentVersion pulumi.StringOutput `pulumi:"currentVersion"`

	// Configuration block for specifying encryption. See below.
	EncryptionInfo pulumi.AnyOutput `pulumi:"encryptionInfo"`

	// Specify the desired enhanced MSK CloudWatch monitoring level.  See [Monitoring Amazon MSK with Amazon CloudWatch](https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html)
	EnhancedMonitoring pulumi.StringOutput `pulumi:"enhancedMonitoring"`

	// Specify the desired Kafka software version.
	KafkaVersion pulumi.StringOutput `pulumi:"kafkaVersion"`

	// The desired total number of broker nodes in the kafka cluster.  It must be a multiple of the number of specified client subnets.
	NumberOfBrokerNodes pulumi.IntOutput `pulumi:"numberOfBrokerNodes"`

	// A mapping of tags to assign to the resource
	Tags pulumi.MapOutput `pulumi:"tags"`

	// A comma separated list of one or more IP:port pairs to use to connect to the Apache Zookeeper cluster.
	ZookeeperConnectString pulumi.StringOutput `pulumi:"zookeeperConnectString"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	if args == nil || args.BrokerNodeGroupInfo == nil {
		return nil, errors.New("missing required argument 'BrokerNodeGroupInfo'")
	}
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.KafkaVersion == nil {
		return nil, errors.New("missing required argument 'KafkaVersion'")
	}
	if args == nil || args.NumberOfBrokerNodes == nil {
		return nil, errors.New("missing required argument 'NumberOfBrokerNodes'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["brokerNodeGroupInfo"] = args.BrokerNodeGroupInfo
		inputs["clientAuthentication"] = args.ClientAuthentication
		inputs["clusterName"] = args.ClusterName
		inputs["configurationInfo"] = args.ConfigurationInfo
		inputs["encryptionInfo"] = args.EncryptionInfo
		inputs["enhancedMonitoring"] = args.EnhancedMonitoring
		inputs["kafkaVersion"] = args.KafkaVersion
		inputs["numberOfBrokerNodes"] = args.NumberOfBrokerNodes
		inputs["tags"] = args.Tags
	}
	var resource Cluster
	err := ctx.RegisterResource("aws:msk/cluster:Cluster", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClusterState, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["bootstrapBrokers"] = state.BootstrapBrokers
		inputs["bootstrapBrokersTls"] = state.BootstrapBrokersTls
		inputs["brokerNodeGroupInfo"] = state.BrokerNodeGroupInfo
		inputs["clientAuthentication"] = state.ClientAuthentication
		inputs["clusterName"] = state.ClusterName
		inputs["configurationInfo"] = state.ConfigurationInfo
		inputs["currentVersion"] = state.CurrentVersion
		inputs["encryptionInfo"] = state.EncryptionInfo
		inputs["enhancedMonitoring"] = state.EnhancedMonitoring
		inputs["kafkaVersion"] = state.KafkaVersion
		inputs["numberOfBrokerNodes"] = state.NumberOfBrokerNodes
		inputs["tags"] = state.Tags
		inputs["zookeeperConnectString"] = state.ZookeeperConnectString
	}
	var resource Cluster
	err := ctx.ReadResource("aws:msk/cluster:Cluster", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Cluster) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Cluster) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Cluster resources.
type ClusterState struct {
	// Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.
	Arn pulumi.StringInput `pulumi:"arn"`
	// A comma separated list of one or more hostname:port pairs of kafka brokers suitable to boostrap connectivity to the kafka cluster. Only contains value if `clientBroker` encryption in transit is set to `PLAINTEXT` or `TLS_PLAINTEXT`.
	BootstrapBrokers pulumi.StringInput `pulumi:"bootstrapBrokers"`
	// A comma separated list of one or more DNS names (or IPs) and TLS port pairs kafka brokers suitable to boostrap connectivity to the kafka cluster. Only contains value if `clientBroker` encryption in transit is set to `TLS_PLAINTEXT` or `TLS`.
	BootstrapBrokersTls pulumi.StringInput `pulumi:"bootstrapBrokersTls"`
	// Configuration block for the broker nodes of the Kafka cluster.
	BrokerNodeGroupInfo pulumi.AnyInput `pulumi:"brokerNodeGroupInfo"`
	// Configuration block for specifying a client authentication. See below.
	ClientAuthentication pulumi.AnyInput `pulumi:"clientAuthentication"`
	// Name of the MSK cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// Configuration block for specifying a MSK Configuration to attach to Kafka brokers. See below.
	ConfigurationInfo pulumi.AnyInput `pulumi:"configurationInfo"`
	// Current version of the MSK Cluster used for updates, e.g. `K13V1IB3VIYZZH`
	// * `encryption_info.0.encryption_at_rest_kms_key_arn` - The ARN of the KMS key used for encryption at rest of the broker data volumes.
	CurrentVersion pulumi.StringInput `pulumi:"currentVersion"`
	// Configuration block for specifying encryption. See below.
	EncryptionInfo pulumi.AnyInput `pulumi:"encryptionInfo"`
	// Specify the desired enhanced MSK CloudWatch monitoring level.  See [Monitoring Amazon MSK with Amazon CloudWatch](https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html)
	EnhancedMonitoring pulumi.StringInput `pulumi:"enhancedMonitoring"`
	// Specify the desired Kafka software version.
	KafkaVersion pulumi.StringInput `pulumi:"kafkaVersion"`
	// The desired total number of broker nodes in the kafka cluster.  It must be a multiple of the number of specified client subnets.
	NumberOfBrokerNodes pulumi.IntInput `pulumi:"numberOfBrokerNodes"`
	// A mapping of tags to assign to the resource
	Tags pulumi.MapInput `pulumi:"tags"`
	// A comma separated list of one or more IP:port pairs to use to connect to the Apache Zookeeper cluster.
	ZookeeperConnectString pulumi.StringInput `pulumi:"zookeeperConnectString"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Configuration block for the broker nodes of the Kafka cluster.
	BrokerNodeGroupInfo pulumi.AnyInput `pulumi:"brokerNodeGroupInfo"`
	// Configuration block for specifying a client authentication. See below.
	ClientAuthentication pulumi.AnyInput `pulumi:"clientAuthentication"`
	// Name of the MSK cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// Configuration block for specifying a MSK Configuration to attach to Kafka brokers. See below.
	ConfigurationInfo pulumi.AnyInput `pulumi:"configurationInfo"`
	// Configuration block for specifying encryption. See below.
	EncryptionInfo pulumi.AnyInput `pulumi:"encryptionInfo"`
	// Specify the desired enhanced MSK CloudWatch monitoring level.  See [Monitoring Amazon MSK with Amazon CloudWatch](https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html)
	EnhancedMonitoring pulumi.StringInput `pulumi:"enhancedMonitoring"`
	// Specify the desired Kafka software version.
	KafkaVersion pulumi.StringInput `pulumi:"kafkaVersion"`
	// The desired total number of broker nodes in the kafka cluster.  It must be a multiple of the number of specified client subnets.
	NumberOfBrokerNodes pulumi.IntInput `pulumi:"numberOfBrokerNodes"`
	// A mapping of tags to assign to the resource
	Tags pulumi.MapInput `pulumi:"tags"`
}
