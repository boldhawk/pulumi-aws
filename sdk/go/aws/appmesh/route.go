// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appmesh

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AWS App Mesh route resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/appmesh_route.html.markdown.
type Route struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ARN of the route.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The creation date of the route.
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`

	// The last update date of the route.
	LastUpdatedDate pulumi.StringOutput `pulumi:"lastUpdatedDate"`

	// The name of the service mesh in which to create the route.
	MeshName pulumi.StringOutput `pulumi:"meshName"`

	// The name to use for the route.
	Name pulumi.StringOutput `pulumi:"name"`

	// The route specification to apply.
	Spec pulumi.AnyOutput `pulumi:"spec"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The name of the virtual router in which to create the route.
	VirtualRouterName pulumi.StringOutput `pulumi:"virtualRouterName"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOpt) (*Route, error) {
	if args == nil || args.MeshName == nil {
		return nil, errors.New("missing required argument 'MeshName'")
	}
	if args == nil || args.Spec == nil {
		return nil, errors.New("missing required argument 'Spec'")
	}
	if args == nil || args.VirtualRouterName == nil {
		return nil, errors.New("missing required argument 'VirtualRouterName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["meshName"] = args.MeshName
		inputs["name"] = args.Name
		inputs["spec"] = args.Spec
		inputs["tags"] = args.Tags
		inputs["virtualRouterName"] = args.VirtualRouterName
	}
	var resource Route
	err := ctx.RegisterResource("aws:appmesh/route:Route", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RouteState, opts ...pulumi.ResourceOpt) (*Route, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["createdDate"] = state.CreatedDate
		inputs["lastUpdatedDate"] = state.LastUpdatedDate
		inputs["meshName"] = state.MeshName
		inputs["name"] = state.Name
		inputs["spec"] = state.Spec
		inputs["tags"] = state.Tags
		inputs["virtualRouterName"] = state.VirtualRouterName
	}
	var resource Route
	err := ctx.ReadResource("aws:appmesh/route:Route", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Route) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Route) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Route resources.
type RouteState struct {
	// The ARN of the route.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The creation date of the route.
	CreatedDate pulumi.StringInput `pulumi:"createdDate"`
	// The last update date of the route.
	LastUpdatedDate pulumi.StringInput `pulumi:"lastUpdatedDate"`
	// The name of the service mesh in which to create the route.
	MeshName pulumi.StringInput `pulumi:"meshName"`
	// The name to use for the route.
	Name pulumi.StringInput `pulumi:"name"`
	// The route specification to apply.
	Spec pulumi.AnyInput `pulumi:"spec"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The name of the virtual router in which to create the route.
	VirtualRouterName pulumi.StringInput `pulumi:"virtualRouterName"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// The name of the service mesh in which to create the route.
	MeshName pulumi.StringInput `pulumi:"meshName"`
	// The name to use for the route.
	Name pulumi.StringInput `pulumi:"name"`
	// The route specification to apply.
	Spec pulumi.AnyInput `pulumi:"spec"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The name of the virtual router in which to create the route.
	VirtualRouterName pulumi.StringInput `pulumi:"virtualRouterName"`
}
