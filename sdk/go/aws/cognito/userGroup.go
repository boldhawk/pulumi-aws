// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Cognito User Group resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cognito_user_group.html.markdown.
type UserGroup struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The description of the user group.
	Description pulumi.StringOutput `pulumi:"description"`

	// The name of the user group.
	Name pulumi.StringOutput `pulumi:"name"`

	// The precedence of the user group.
	Precedence pulumi.IntOutput `pulumi:"precedence"`

	// The ARN of the IAM role to be associated with the user group.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`

	// The user pool ID.
	UserPoolId pulumi.StringOutput `pulumi:"userPoolId"`
}

// NewUserGroup registers a new resource with the given unique name, arguments, and options.
func NewUserGroup(ctx *pulumi.Context,
	name string, args *UserGroupArgs, opts ...pulumi.ResourceOpt) (*UserGroup, error) {
	if args == nil || args.UserPoolId == nil {
		return nil, errors.New("missing required argument 'UserPoolId'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["precedence"] = args.Precedence
		inputs["roleArn"] = args.RoleArn
		inputs["userPoolId"] = args.UserPoolId
	}
	var resource UserGroup
	err := ctx.RegisterResource("aws:cognito/userGroup:UserGroup", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroup gets an existing UserGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserGroupState, opts ...pulumi.ResourceOpt) (*UserGroup, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["precedence"] = state.Precedence
		inputs["roleArn"] = state.RoleArn
		inputs["userPoolId"] = state.UserPoolId
	}
	var resource UserGroup
	err := ctx.ReadResource("aws:cognito/userGroup:UserGroup", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *UserGroup) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *UserGroup) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering UserGroup resources.
type UserGroupState struct {
	// The description of the user group.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the user group.
	Name pulumi.StringInput `pulumi:"name"`
	// The precedence of the user group.
	Precedence pulumi.IntInput `pulumi:"precedence"`
	// The ARN of the IAM role to be associated with the user group.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// The user pool ID.
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

// The set of arguments for constructing a UserGroup resource.
type UserGroupArgs struct {
	// The description of the user group.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the user group.
	Name pulumi.StringInput `pulumi:"name"`
	// The precedence of the user group.
	Precedence pulumi.IntInput `pulumi:"precedence"`
	// The ARN of the IAM role to be associated with the user group.
	RoleArn pulumi.StringInput `pulumi:"roleArn"`
	// The user pool ID.
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}
