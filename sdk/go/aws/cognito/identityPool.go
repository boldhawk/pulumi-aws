// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AWS Cognito Identity Pool.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cognito_identity_pool.html.markdown.
type IdentityPool struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Whether the identity pool supports unauthenticated logins or not.
	AllowUnauthenticatedIdentities pulumi.BoolOutput `pulumi:"allowUnauthenticatedIdentities"`

	// The ARN of the identity pool.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// An array of Amazon Cognito Identity user pools and their client IDs.
	CognitoIdentityProviders pulumi.ArrayOutput `pulumi:"cognitoIdentityProviders"`

	// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
	// backend and the Cognito service to communicate about the developer provider.
	DeveloperProviderName pulumi.StringOutput `pulumi:"developerProviderName"`

	// The Cognito Identity Pool name.
	IdentityPoolName pulumi.StringOutput `pulumi:"identityPoolName"`

	// A list of OpendID Connect provider ARNs.
	OpenidConnectProviderArns pulumi.ArrayOutput `pulumi:"openidConnectProviderArns"`

	// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
	SamlProviderArns pulumi.ArrayOutput `pulumi:"samlProviderArns"`

	// Key-Value pairs mapping provider names to provider app IDs.
	SupportedLoginProviders pulumi.MapOutput `pulumi:"supportedLoginProviders"`

	// A mapping of tags to assign to the Identity Pool.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewIdentityPool registers a new resource with the given unique name, arguments, and options.
func NewIdentityPool(ctx *pulumi.Context,
	name string, args *IdentityPoolArgs, opts ...pulumi.ResourceOpt) (*IdentityPool, error) {
	if args == nil || args.IdentityPoolName == nil {
		return nil, errors.New("missing required argument 'IdentityPoolName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["allowUnauthenticatedIdentities"] = args.AllowUnauthenticatedIdentities
		inputs["cognitoIdentityProviders"] = args.CognitoIdentityProviders
		inputs["developerProviderName"] = args.DeveloperProviderName
		inputs["identityPoolName"] = args.IdentityPoolName
		inputs["openidConnectProviderArns"] = args.OpenidConnectProviderArns
		inputs["samlProviderArns"] = args.SamlProviderArns
		inputs["supportedLoginProviders"] = args.SupportedLoginProviders
		inputs["tags"] = args.Tags
	}
	var resource IdentityPool
	err := ctx.RegisterResource("aws:cognito/identityPool:IdentityPool", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityPool gets an existing IdentityPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityPool(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IdentityPoolState, opts ...pulumi.ResourceOpt) (*IdentityPool, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["allowUnauthenticatedIdentities"] = state.AllowUnauthenticatedIdentities
		inputs["arn"] = state.Arn
		inputs["cognitoIdentityProviders"] = state.CognitoIdentityProviders
		inputs["developerProviderName"] = state.DeveloperProviderName
		inputs["identityPoolName"] = state.IdentityPoolName
		inputs["openidConnectProviderArns"] = state.OpenidConnectProviderArns
		inputs["samlProviderArns"] = state.SamlProviderArns
		inputs["supportedLoginProviders"] = state.SupportedLoginProviders
		inputs["tags"] = state.Tags
	}
	var resource IdentityPool
	err := ctx.ReadResource("aws:cognito/identityPool:IdentityPool", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *IdentityPool) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *IdentityPool) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering IdentityPool resources.
type IdentityPoolState struct {
	// Whether the identity pool supports unauthenticated logins or not.
	AllowUnauthenticatedIdentities pulumi.BoolInput `pulumi:"allowUnauthenticatedIdentities"`
	// The ARN of the identity pool.
	Arn pulumi.StringInput `pulumi:"arn"`
	// An array of Amazon Cognito Identity user pools and their client IDs.
	CognitoIdentityProviders pulumi.ArrayInput `pulumi:"cognitoIdentityProviders"`
	// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
	// backend and the Cognito service to communicate about the developer provider.
	DeveloperProviderName pulumi.StringInput `pulumi:"developerProviderName"`
	// The Cognito Identity Pool name.
	IdentityPoolName pulumi.StringInput `pulumi:"identityPoolName"`
	// A list of OpendID Connect provider ARNs.
	OpenidConnectProviderArns pulumi.ArrayInput `pulumi:"openidConnectProviderArns"`
	// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
	SamlProviderArns pulumi.ArrayInput `pulumi:"samlProviderArns"`
	// Key-Value pairs mapping provider names to provider app IDs.
	SupportedLoginProviders pulumi.MapInput `pulumi:"supportedLoginProviders"`
	// A mapping of tags to assign to the Identity Pool.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a IdentityPool resource.
type IdentityPoolArgs struct {
	// Whether the identity pool supports unauthenticated logins or not.
	AllowUnauthenticatedIdentities pulumi.BoolInput `pulumi:"allowUnauthenticatedIdentities"`
	// An array of Amazon Cognito Identity user pools and their client IDs.
	CognitoIdentityProviders pulumi.ArrayInput `pulumi:"cognitoIdentityProviders"`
	// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
	// backend and the Cognito service to communicate about the developer provider.
	DeveloperProviderName pulumi.StringInput `pulumi:"developerProviderName"`
	// The Cognito Identity Pool name.
	IdentityPoolName pulumi.StringInput `pulumi:"identityPoolName"`
	// A list of OpendID Connect provider ARNs.
	OpenidConnectProviderArns pulumi.ArrayInput `pulumi:"openidConnectProviderArns"`
	// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
	SamlProviderArns pulumi.ArrayInput `pulumi:"samlProviderArns"`
	// Key-Value pairs mapping provider names to provider app IDs.
	SupportedLoginProviders pulumi.MapInput `pulumi:"supportedLoginProviders"`
	// A mapping of tags to assign to the Identity Pool.
	Tags pulumi.MapInput `pulumi:"tags"`
}
