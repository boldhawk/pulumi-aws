// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cognito

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Cognito Resource Server.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cognito_resource_server.html.markdown.
type ResourceServer struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// An identifier for the resource server.
	Identifier pulumi.StringOutput `pulumi:"identifier"`

	// A name for the resource server.
	Name pulumi.StringOutput `pulumi:"name"`

	// A list of Authorization Scope.
	Scopes pulumi.ArrayOutput `pulumi:"scopes"`

	// A list of all scopes configured for this resource server in the format identifier/scope_name.
	ScopeIdentifiers pulumi.ArrayOutput `pulumi:"scopeIdentifiers"`

	UserPoolId pulumi.StringOutput `pulumi:"userPoolId"`
}

// NewResourceServer registers a new resource with the given unique name, arguments, and options.
func NewResourceServer(ctx *pulumi.Context,
	name string, args *ResourceServerArgs, opts ...pulumi.ResourceOpt) (*ResourceServer, error) {
	if args == nil || args.Identifier == nil {
		return nil, errors.New("missing required argument 'Identifier'")
	}
	if args == nil || args.UserPoolId == nil {
		return nil, errors.New("missing required argument 'UserPoolId'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["identifier"] = args.Identifier
		inputs["name"] = args.Name
		inputs["scopes"] = args.Scopes
		inputs["userPoolId"] = args.UserPoolId
	}
	var resource ResourceServer
	err := ctx.RegisterResource("aws:cognito/resourceServer:ResourceServer", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceServer gets an existing ResourceServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceServer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ResourceServerState, opts ...pulumi.ResourceOpt) (*ResourceServer, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["identifier"] = state.Identifier
		inputs["name"] = state.Name
		inputs["scopes"] = state.Scopes
		inputs["scopeIdentifiers"] = state.ScopeIdentifiers
		inputs["userPoolId"] = state.UserPoolId
	}
	var resource ResourceServer
	err := ctx.ReadResource("aws:cognito/resourceServer:ResourceServer", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *ResourceServer) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *ResourceServer) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering ResourceServer resources.
type ResourceServerState struct {
	// An identifier for the resource server.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// A name for the resource server.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of Authorization Scope.
	Scopes pulumi.ArrayInput `pulumi:"scopes"`
	// A list of all scopes configured for this resource server in the format identifier/scope_name.
	ScopeIdentifiers pulumi.ArrayInput `pulumi:"scopeIdentifiers"`
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}

// The set of arguments for constructing a ResourceServer resource.
type ResourceServerArgs struct {
	// An identifier for the resource server.
	Identifier pulumi.StringInput `pulumi:"identifier"`
	// A name for the resource server.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of Authorization Scope.
	Scopes pulumi.ArrayInput `pulumi:"scopes"`
	UserPoolId pulumi.StringInput `pulumi:"userPoolId"`
}
