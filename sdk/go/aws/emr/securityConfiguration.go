// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package emr

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage AWS EMR Security Configurations
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/emr_security_configuration.html.markdown.
type SecurityConfiguration struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// A JSON formatted Security Configuration
	Configuration pulumi.StringOutput `pulumi:"configuration"`

	// Date the Security Configuration was created
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`

	// The name of the EMR Security Configuration. By default generated by this provider.
	Name pulumi.StringOutput `pulumi:"name"`

	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumi.StringOutput `pulumi:"namePrefix"`
}

// NewSecurityConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSecurityConfiguration(ctx *pulumi.Context,
	name string, args *SecurityConfigurationArgs, opts ...pulumi.ResourceOpt) (*SecurityConfiguration, error) {
	if args == nil || args.Configuration == nil {
		return nil, errors.New("missing required argument 'Configuration'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["configuration"] = args.Configuration
		inputs["name"] = args.Name
		inputs["namePrefix"] = args.NamePrefix
	}
	var resource SecurityConfiguration
	err := ctx.RegisterResource("aws:emr/securityConfiguration:SecurityConfiguration", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityConfiguration gets an existing SecurityConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityConfiguration(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecurityConfigurationState, opts ...pulumi.ResourceOpt) (*SecurityConfiguration, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["configuration"] = state.Configuration
		inputs["creationDate"] = state.CreationDate
		inputs["name"] = state.Name
		inputs["namePrefix"] = state.NamePrefix
	}
	var resource SecurityConfiguration
	err := ctx.ReadResource("aws:emr/securityConfiguration:SecurityConfiguration", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *SecurityConfiguration) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *SecurityConfiguration) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering SecurityConfiguration resources.
type SecurityConfigurationState struct {
	// A JSON formatted Security Configuration
	Configuration pulumi.StringInput `pulumi:"configuration"`
	// Date the Security Configuration was created
	CreationDate pulumi.StringInput `pulumi:"creationDate"`
	// The name of the EMR Security Configuration. By default generated by this provider.
	Name pulumi.StringInput `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
}

// The set of arguments for constructing a SecurityConfiguration resource.
type SecurityConfigurationArgs struct {
	// A JSON formatted Security Configuration
	Configuration pulumi.StringInput `pulumi:"configuration"`
	// The name of the EMR Security Configuration. By default generated by this provider.
	Name pulumi.StringInput `pulumi:"name"`
	// Creates a unique name beginning with the specified
	// prefix. Conflicts with `name`.
	NamePrefix pulumi.StringInput `pulumi:"namePrefix"`
}
