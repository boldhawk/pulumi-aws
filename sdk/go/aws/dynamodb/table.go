// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DynamoDB table resource
// 
// > **Note:** It is recommended to use `lifecycle` [`ignoreChanges`](https://www.terraform.io/docs/configuration/resources.html#ignore_changes) for `readCapacity` and/or `writeCapacity` if there's [autoscaling policy](https://www.terraform.io/docs/providers/aws/r/appautoscaling_policy.html) attached to the table.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dynamodb_table.html.markdown.
type Table struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The arn of the table
	Arn pulumi.StringOutput `pulumi:"arn"`

	// List of nested attribute definitions. Only required for `hashKey` and `rangeKey` attributes. Each attribute has two properties:
	Attributes pulumi.ArrayOutput `pulumi:"attributes"`

	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode pulumi.StringOutput `pulumi:"billingMode"`

	// Describe a GSI for the table;
	// subject to the normal limits on the number of GSIs, projected
	// attributes, etc.
	GlobalSecondaryIndexes pulumi.ArrayOutput `pulumi:"globalSecondaryIndexes"`

	// The name of the hash key in the index; must be
	// defined as an attribute in the resource.
	HashKey pulumi.StringOutput `pulumi:"hashKey"`

	// Describe an LSI on the table;
	// these can only be allocated *at creation* so you cannot change this
	// definition after you have created the resource.
	LocalSecondaryIndexes pulumi.ArrayOutput `pulumi:"localSecondaryIndexes"`

	// The name of the index
	Name pulumi.StringOutput `pulumi:"name"`

	// Point-in-time recovery options.
	PointInTimeRecovery pulumi.AnyOutput `pulumi:"pointInTimeRecovery"`

	// The name of the range key; must be defined
	RangeKey pulumi.StringOutput `pulumi:"rangeKey"`

	// The number of read units for this index. Must be set if billingMode is set to PROVISIONED.
	ReadCapacity pulumi.IntOutput `pulumi:"readCapacity"`

	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
	ServerSideEncryption pulumi.AnyOutput `pulumi:"serverSideEncryption"`

	// The ARN of the Table Stream. Only available when `streamEnabled = true`
	StreamArn pulumi.StringOutput `pulumi:"streamArn"`

	// Indicates whether Streams are to be enabled (true) or disabled (false).
	StreamEnabled pulumi.BoolOutput `pulumi:"streamEnabled"`

	// A timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not
	// a unique identifier for the stream on its own. However, the combination of AWS customer ID,
	// table name and this field is guaranteed to be unique.
	// It can be used for creating CloudWatch Alarms. Only available when `streamEnabled = true`
	StreamLabel pulumi.StringOutput `pulumi:"streamLabel"`

	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType pulumi.StringOutput `pulumi:"streamViewType"`

	// A map of tags to populate on the created table.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Defines ttl, has two properties, and can only be specified once:
	Ttl pulumi.AnyOutput `pulumi:"ttl"`

	// The number of write units for this index. Must be set if billingMode is set to PROVISIONED.
	WriteCapacity pulumi.IntOutput `pulumi:"writeCapacity"`
}

// NewTable registers a new resource with the given unique name, arguments, and options.
func NewTable(ctx *pulumi.Context,
	name string, args *TableArgs, opts ...pulumi.ResourceOpt) (*Table, error) {
	if args == nil || args.Attributes == nil {
		return nil, errors.New("missing required argument 'Attributes'")
	}
	if args == nil || args.HashKey == nil {
		return nil, errors.New("missing required argument 'HashKey'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["attributes"] = args.Attributes
		inputs["billingMode"] = args.BillingMode
		inputs["globalSecondaryIndexes"] = args.GlobalSecondaryIndexes
		inputs["hashKey"] = args.HashKey
		inputs["localSecondaryIndexes"] = args.LocalSecondaryIndexes
		inputs["name"] = args.Name
		inputs["pointInTimeRecovery"] = args.PointInTimeRecovery
		inputs["rangeKey"] = args.RangeKey
		inputs["readCapacity"] = args.ReadCapacity
		inputs["serverSideEncryption"] = args.ServerSideEncryption
		inputs["streamEnabled"] = args.StreamEnabled
		inputs["streamViewType"] = args.StreamViewType
		inputs["tags"] = args.Tags
		inputs["ttl"] = args.Ttl
		inputs["writeCapacity"] = args.WriteCapacity
	}
	var resource Table
	err := ctx.RegisterResource("aws:dynamodb/table:Table", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTable gets an existing Table resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTable(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TableState, opts ...pulumi.ResourceOpt) (*Table, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["attributes"] = state.Attributes
		inputs["billingMode"] = state.BillingMode
		inputs["globalSecondaryIndexes"] = state.GlobalSecondaryIndexes
		inputs["hashKey"] = state.HashKey
		inputs["localSecondaryIndexes"] = state.LocalSecondaryIndexes
		inputs["name"] = state.Name
		inputs["pointInTimeRecovery"] = state.PointInTimeRecovery
		inputs["rangeKey"] = state.RangeKey
		inputs["readCapacity"] = state.ReadCapacity
		inputs["serverSideEncryption"] = state.ServerSideEncryption
		inputs["streamArn"] = state.StreamArn
		inputs["streamEnabled"] = state.StreamEnabled
		inputs["streamLabel"] = state.StreamLabel
		inputs["streamViewType"] = state.StreamViewType
		inputs["tags"] = state.Tags
		inputs["ttl"] = state.Ttl
		inputs["writeCapacity"] = state.WriteCapacity
	}
	var resource Table
	err := ctx.ReadResource("aws:dynamodb/table:Table", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Table) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Table) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Table resources.
type TableState struct {
	// The arn of the table
	Arn pulumi.StringInput `pulumi:"arn"`
	// List of nested attribute definitions. Only required for `hashKey` and `rangeKey` attributes. Each attribute has two properties:
	Attributes pulumi.ArrayInput `pulumi:"attributes"`
	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode pulumi.StringInput `pulumi:"billingMode"`
	// Describe a GSI for the table;
	// subject to the normal limits on the number of GSIs, projected
	// attributes, etc.
	GlobalSecondaryIndexes pulumi.ArrayInput `pulumi:"globalSecondaryIndexes"`
	// The name of the hash key in the index; must be
	// defined as an attribute in the resource.
	HashKey pulumi.StringInput `pulumi:"hashKey"`
	// Describe an LSI on the table;
	// these can only be allocated *at creation* so you cannot change this
	// definition after you have created the resource.
	LocalSecondaryIndexes pulumi.ArrayInput `pulumi:"localSecondaryIndexes"`
	// The name of the index
	Name pulumi.StringInput `pulumi:"name"`
	// Point-in-time recovery options.
	PointInTimeRecovery pulumi.AnyInput `pulumi:"pointInTimeRecovery"`
	// The name of the range key; must be defined
	RangeKey pulumi.StringInput `pulumi:"rangeKey"`
	// The number of read units for this index. Must be set if billingMode is set to PROVISIONED.
	ReadCapacity pulumi.IntInput `pulumi:"readCapacity"`
	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
	ServerSideEncryption pulumi.AnyInput `pulumi:"serverSideEncryption"`
	// The ARN of the Table Stream. Only available when `streamEnabled = true`
	StreamArn pulumi.StringInput `pulumi:"streamArn"`
	// Indicates whether Streams are to be enabled (true) or disabled (false).
	StreamEnabled pulumi.BoolInput `pulumi:"streamEnabled"`
	// A timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not
	// a unique identifier for the stream on its own. However, the combination of AWS customer ID,
	// table name and this field is guaranteed to be unique.
	// It can be used for creating CloudWatch Alarms. Only available when `streamEnabled = true`
	StreamLabel pulumi.StringInput `pulumi:"streamLabel"`
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType pulumi.StringInput `pulumi:"streamViewType"`
	// A map of tags to populate on the created table.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Defines ttl, has two properties, and can only be specified once:
	Ttl pulumi.AnyInput `pulumi:"ttl"`
	// The number of write units for this index. Must be set if billingMode is set to PROVISIONED.
	WriteCapacity pulumi.IntInput `pulumi:"writeCapacity"`
}

// The set of arguments for constructing a Table resource.
type TableArgs struct {
	// List of nested attribute definitions. Only required for `hashKey` and `rangeKey` attributes. Each attribute has two properties:
	Attributes pulumi.ArrayInput `pulumi:"attributes"`
	// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
	BillingMode pulumi.StringInput `pulumi:"billingMode"`
	// Describe a GSI for the table;
	// subject to the normal limits on the number of GSIs, projected
	// attributes, etc.
	GlobalSecondaryIndexes pulumi.ArrayInput `pulumi:"globalSecondaryIndexes"`
	// The name of the hash key in the index; must be
	// defined as an attribute in the resource.
	HashKey pulumi.StringInput `pulumi:"hashKey"`
	// Describe an LSI on the table;
	// these can only be allocated *at creation* so you cannot change this
	// definition after you have created the resource.
	LocalSecondaryIndexes pulumi.ArrayInput `pulumi:"localSecondaryIndexes"`
	// The name of the index
	Name pulumi.StringInput `pulumi:"name"`
	// Point-in-time recovery options.
	PointInTimeRecovery pulumi.AnyInput `pulumi:"pointInTimeRecovery"`
	// The name of the range key; must be defined
	RangeKey pulumi.StringInput `pulumi:"rangeKey"`
	// The number of read units for this index. Must be set if billingMode is set to PROVISIONED.
	ReadCapacity pulumi.IntInput `pulumi:"readCapacity"`
	// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
	ServerSideEncryption pulumi.AnyInput `pulumi:"serverSideEncryption"`
	// Indicates whether Streams are to be enabled (true) or disabled (false).
	StreamEnabled pulumi.BoolInput `pulumi:"streamEnabled"`
	// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType pulumi.StringInput `pulumi:"streamViewType"`
	// A map of tags to populate on the created table.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Defines ttl, has two properties, and can only be specified once:
	Ttl pulumi.AnyInput `pulumi:"ttl"`
	// The number of write units for this index. Must be set if billingMode is set to PROVISIONED.
	WriteCapacity pulumi.IntInput `pulumi:"writeCapacity"`
}
