// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type TopicRule struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ARN of the topic rule
	Arn pulumi.StringOutput `pulumi:"arn"`

	CloudwatchAlarm pulumi.AnyOutput `pulumi:"cloudwatchAlarm"`

	CloudwatchMetric pulumi.AnyOutput `pulumi:"cloudwatchMetric"`

	// The description of the rule.
	Description pulumi.StringOutput `pulumi:"description"`

	Dynamodb pulumi.AnyOutput `pulumi:"dynamodb"`

	Elasticsearch pulumi.AnyOutput `pulumi:"elasticsearch"`

	// Specifies whether the rule is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`

	Firehose pulumi.AnyOutput `pulumi:"firehose"`

	Kinesis pulumi.AnyOutput `pulumi:"kinesis"`

	Lambda pulumi.AnyOutput `pulumi:"lambda"`

	// The name of the rule.
	Name pulumi.StringOutput `pulumi:"name"`

	Republish pulumi.AnyOutput `pulumi:"republish"`

	S3 pulumi.AnyOutput `pulumi:"s3"`

	Sns pulumi.AnyOutput `pulumi:"sns"`

	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql pulumi.StringOutput `pulumi:"sql"`

	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion pulumi.StringOutput `pulumi:"sqlVersion"`

	Sqs pulumi.AnyOutput `pulumi:"sqs"`
}

// NewTopicRule registers a new resource with the given unique name, arguments, and options.
func NewTopicRule(ctx *pulumi.Context,
	name string, args *TopicRuleArgs, opts ...pulumi.ResourceOpt) (*TopicRule, error) {
	if args == nil || args.Enabled == nil {
		return nil, errors.New("missing required argument 'Enabled'")
	}
	if args == nil || args.Sql == nil {
		return nil, errors.New("missing required argument 'Sql'")
	}
	if args == nil || args.SqlVersion == nil {
		return nil, errors.New("missing required argument 'SqlVersion'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["cloudwatchAlarm"] = args.CloudwatchAlarm
		inputs["cloudwatchMetric"] = args.CloudwatchMetric
		inputs["description"] = args.Description
		inputs["dynamodb"] = args.Dynamodb
		inputs["elasticsearch"] = args.Elasticsearch
		inputs["enabled"] = args.Enabled
		inputs["firehose"] = args.Firehose
		inputs["kinesis"] = args.Kinesis
		inputs["lambda"] = args.Lambda
		inputs["name"] = args.Name
		inputs["republish"] = args.Republish
		inputs["s3"] = args.S3
		inputs["sns"] = args.Sns
		inputs["sql"] = args.Sql
		inputs["sqlVersion"] = args.SqlVersion
		inputs["sqs"] = args.Sqs
	}
	var resource TopicRule
	err := ctx.RegisterResource("aws:iot/topicRule:TopicRule", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicRule gets an existing TopicRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TopicRuleState, opts ...pulumi.ResourceOpt) (*TopicRule, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["cloudwatchAlarm"] = state.CloudwatchAlarm
		inputs["cloudwatchMetric"] = state.CloudwatchMetric
		inputs["description"] = state.Description
		inputs["dynamodb"] = state.Dynamodb
		inputs["elasticsearch"] = state.Elasticsearch
		inputs["enabled"] = state.Enabled
		inputs["firehose"] = state.Firehose
		inputs["kinesis"] = state.Kinesis
		inputs["lambda"] = state.Lambda
		inputs["name"] = state.Name
		inputs["republish"] = state.Republish
		inputs["s3"] = state.S3
		inputs["sns"] = state.Sns
		inputs["sql"] = state.Sql
		inputs["sqlVersion"] = state.SqlVersion
		inputs["sqs"] = state.Sqs
	}
	var resource TopicRule
	err := ctx.ReadResource("aws:iot/topicRule:TopicRule", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *TopicRule) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *TopicRule) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering TopicRule resources.
type TopicRuleState struct {
	// The ARN of the topic rule
	Arn pulumi.StringInput `pulumi:"arn"`
	CloudwatchAlarm pulumi.AnyInput `pulumi:"cloudwatchAlarm"`
	CloudwatchMetric pulumi.AnyInput `pulumi:"cloudwatchMetric"`
	// The description of the rule.
	Description pulumi.StringInput `pulumi:"description"`
	Dynamodb pulumi.AnyInput `pulumi:"dynamodb"`
	Elasticsearch pulumi.AnyInput `pulumi:"elasticsearch"`
	// Specifies whether the rule is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	Firehose pulumi.AnyInput `pulumi:"firehose"`
	Kinesis pulumi.AnyInput `pulumi:"kinesis"`
	Lambda pulumi.AnyInput `pulumi:"lambda"`
	// The name of the rule.
	Name pulumi.StringInput `pulumi:"name"`
	Republish pulumi.AnyInput `pulumi:"republish"`
	S3 pulumi.AnyInput `pulumi:"s3"`
	Sns pulumi.AnyInput `pulumi:"sns"`
	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql pulumi.StringInput `pulumi:"sql"`
	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion pulumi.StringInput `pulumi:"sqlVersion"`
	Sqs pulumi.AnyInput `pulumi:"sqs"`
}

// The set of arguments for constructing a TopicRule resource.
type TopicRuleArgs struct {
	CloudwatchAlarm pulumi.AnyInput `pulumi:"cloudwatchAlarm"`
	CloudwatchMetric pulumi.AnyInput `pulumi:"cloudwatchMetric"`
	// The description of the rule.
	Description pulumi.StringInput `pulumi:"description"`
	Dynamodb pulumi.AnyInput `pulumi:"dynamodb"`
	Elasticsearch pulumi.AnyInput `pulumi:"elasticsearch"`
	// Specifies whether the rule is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	Firehose pulumi.AnyInput `pulumi:"firehose"`
	Kinesis pulumi.AnyInput `pulumi:"kinesis"`
	Lambda pulumi.AnyInput `pulumi:"lambda"`
	// The name of the rule.
	Name pulumi.StringInput `pulumi:"name"`
	Republish pulumi.AnyInput `pulumi:"republish"`
	S3 pulumi.AnyInput `pulumi:"s3"`
	Sns pulumi.AnyInput `pulumi:"sns"`
	// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
	Sql pulumi.StringInput `pulumi:"sql"`
	// The version of the SQL rules engine to use when evaluating the rule.
	SqlVersion pulumi.StringInput `pulumi:"sqlVersion"`
	Sqs pulumi.AnyInput `pulumi:"sqs"`
}
