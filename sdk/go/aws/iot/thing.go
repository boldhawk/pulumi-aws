// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates and manages an AWS IoT Thing.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/iot_thing.html.markdown.
type Thing struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ARN of the thing.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// Map of attributes of the thing.
	Attributes pulumi.MapOutput `pulumi:"attributes"`

	// The default client ID.
	DefaultClientId pulumi.StringOutput `pulumi:"defaultClientId"`

	// The name of the thing.
	Name pulumi.StringOutput `pulumi:"name"`

	// The thing type name.
	ThingTypeName pulumi.StringOutput `pulumi:"thingTypeName"`

	// The current version of the thing record in the registry.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewThing registers a new resource with the given unique name, arguments, and options.
func NewThing(ctx *pulumi.Context,
	name string, args *ThingArgs, opts ...pulumi.ResourceOpt) (*Thing, error) {
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["attributes"] = args.Attributes
		inputs["name"] = args.Name
		inputs["thingTypeName"] = args.ThingTypeName
	}
	var resource Thing
	err := ctx.RegisterResource("aws:iot/thing:Thing", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetThing gets an existing Thing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetThing(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ThingState, opts ...pulumi.ResourceOpt) (*Thing, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["attributes"] = state.Attributes
		inputs["defaultClientId"] = state.DefaultClientId
		inputs["name"] = state.Name
		inputs["thingTypeName"] = state.ThingTypeName
		inputs["version"] = state.Version
	}
	var resource Thing
	err := ctx.ReadResource("aws:iot/thing:Thing", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Thing) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Thing) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Thing resources.
type ThingState struct {
	// The ARN of the thing.
	Arn pulumi.StringInput `pulumi:"arn"`
	// Map of attributes of the thing.
	Attributes pulumi.MapInput `pulumi:"attributes"`
	// The default client ID.
	DefaultClientId pulumi.StringInput `pulumi:"defaultClientId"`
	// The name of the thing.
	Name pulumi.StringInput `pulumi:"name"`
	// The thing type name.
	ThingTypeName pulumi.StringInput `pulumi:"thingTypeName"`
	// The current version of the thing record in the registry.
	Version pulumi.IntInput `pulumi:"version"`
}

// The set of arguments for constructing a Thing resource.
type ThingArgs struct {
	// Map of attributes of the thing.
	Attributes pulumi.MapInput `pulumi:"attributes"`
	// The name of the thing.
	Name pulumi.StringInput `pulumi:"name"`
	// The thing type name.
	ThingTypeName pulumi.StringInput `pulumi:"thingTypeName"`
}
