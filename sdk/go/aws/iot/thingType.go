// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Creates and manages an AWS IoT Thing Type.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/iot_thing_type.html.markdown.
type ThingType struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ARN of the created AWS IoT Thing Type.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// Whether the thing type is deprecated. If true, no new things could be associated with this type.
	Deprecated pulumi.BoolOutput `pulumi:"deprecated"`

	// The name of the thing type.
	Name pulumi.StringOutput `pulumi:"name"`

	Properties pulumi.AnyOutput `pulumi:"properties"`
}

// NewThingType registers a new resource with the given unique name, arguments, and options.
func NewThingType(ctx *pulumi.Context,
	name string, args *ThingTypeArgs, opts ...pulumi.ResourceOpt) (*ThingType, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["deprecated"] = args.Deprecated
		inputs["name"] = args.Name
		inputs["properties"] = args.Properties
	}
	var resource ThingType
	err := ctx.RegisterResource("aws:iot/thingType:ThingType", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetThingType gets an existing ThingType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetThingType(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ThingTypeState, opts ...pulumi.ResourceOpt) (*ThingType, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["deprecated"] = state.Deprecated
		inputs["name"] = state.Name
		inputs["properties"] = state.Properties
	}
	var resource ThingType
	err := ctx.ReadResource("aws:iot/thingType:ThingType", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *ThingType) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *ThingType) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering ThingType resources.
type ThingTypeState struct {
	// The ARN of the created AWS IoT Thing Type.
	Arn pulumi.StringInput `pulumi:"arn"`
	// Whether the thing type is deprecated. If true, no new things could be associated with this type.
	Deprecated pulumi.BoolInput `pulumi:"deprecated"`
	// The name of the thing type.
	Name pulumi.StringInput `pulumi:"name"`
	Properties pulumi.AnyInput `pulumi:"properties"`
}

// The set of arguments for constructing a ThingType resource.
type ThingTypeArgs struct {
	// Whether the thing type is deprecated. If true, no new things could be associated with this type.
	Deprecated pulumi.BoolInput `pulumi:"deprecated"`
	// The name of the thing type.
	Name pulumi.StringInput `pulumi:"name"`
	Properties pulumi.AnyInput `pulumi:"properties"`
}
