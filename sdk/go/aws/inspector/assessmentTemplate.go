// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package inspector

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Inspector assessment template
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/inspector_assessment_template.html.markdown.
type AssessmentTemplate struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The template assessment ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The duration of the inspector run.
	Duration pulumi.IntOutput `pulumi:"duration"`

	// The name of the assessment template.
	Name pulumi.StringOutput `pulumi:"name"`

	// The rules to be used during the run.
	RulesPackageArns pulumi.ArrayOutput `pulumi:"rulesPackageArns"`

	// The assessment target ARN to attach the template to.
	TargetArn pulumi.StringOutput `pulumi:"targetArn"`
}

// NewAssessmentTemplate registers a new resource with the given unique name, arguments, and options.
func NewAssessmentTemplate(ctx *pulumi.Context,
	name string, args *AssessmentTemplateArgs, opts ...pulumi.ResourceOpt) (*AssessmentTemplate, error) {
	if args == nil || args.Duration == nil {
		return nil, errors.New("missing required argument 'Duration'")
	}
	if args == nil || args.RulesPackageArns == nil {
		return nil, errors.New("missing required argument 'RulesPackageArns'")
	}
	if args == nil || args.TargetArn == nil {
		return nil, errors.New("missing required argument 'TargetArn'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["duration"] = args.Duration
		inputs["name"] = args.Name
		inputs["rulesPackageArns"] = args.RulesPackageArns
		inputs["targetArn"] = args.TargetArn
	}
	var resource AssessmentTemplate
	err := ctx.RegisterResource("aws:inspector/assessmentTemplate:AssessmentTemplate", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessmentTemplate gets an existing AssessmentTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessmentTemplate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AssessmentTemplateState, opts ...pulumi.ResourceOpt) (*AssessmentTemplate, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["duration"] = state.Duration
		inputs["name"] = state.Name
		inputs["rulesPackageArns"] = state.RulesPackageArns
		inputs["targetArn"] = state.TargetArn
	}
	var resource AssessmentTemplate
	err := ctx.ReadResource("aws:inspector/assessmentTemplate:AssessmentTemplate", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *AssessmentTemplate) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *AssessmentTemplate) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering AssessmentTemplate resources.
type AssessmentTemplateState struct {
	// The template assessment ARN.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The duration of the inspector run.
	Duration pulumi.IntInput `pulumi:"duration"`
	// The name of the assessment template.
	Name pulumi.StringInput `pulumi:"name"`
	// The rules to be used during the run.
	RulesPackageArns pulumi.ArrayInput `pulumi:"rulesPackageArns"`
	// The assessment target ARN to attach the template to.
	TargetArn pulumi.StringInput `pulumi:"targetArn"`
}

// The set of arguments for constructing a AssessmentTemplate resource.
type AssessmentTemplateArgs struct {
	// The duration of the inspector run.
	Duration pulumi.IntInput `pulumi:"duration"`
	// The name of the assessment template.
	Name pulumi.StringInput `pulumi:"name"`
	// The rules to be used during the run.
	RulesPackageArns pulumi.ArrayInput `pulumi:"rulesPackageArns"`
	// The assessment target ARN to attach the template to.
	TargetArn pulumi.StringInput `pulumi:"targetArn"`
}
