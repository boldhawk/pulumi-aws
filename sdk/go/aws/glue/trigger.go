// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Glue Trigger resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/glue_trigger.html.markdown.
type Trigger struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// List of actions initiated by this trigger when it fires. Defined below.
	Actions pulumi.ArrayOutput `pulumi:"actions"`

	// A description of the new trigger.
	Description pulumi.StringOutput `pulumi:"description"`

	// Start the trigger. Defaults to `true`. Not valid to disable for `ON_DEMAND` type.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`

	// The name of the trigger.
	Name pulumi.StringOutput `pulumi:"name"`

	// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. Defined below.
	Predicate pulumi.AnyOutput `pulumi:"predicate"`

	// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
	Schedule pulumi.StringOutput `pulumi:"schedule"`

	// The type of trigger. Valid values are `CONDITIONAL`, `ON_DEMAND`, and `SCHEDULED`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTrigger registers a new resource with the given unique name, arguments, and options.
func NewTrigger(ctx *pulumi.Context,
	name string, args *TriggerArgs, opts ...pulumi.ResourceOpt) (*Trigger, error) {
	if args == nil || args.Actions == nil {
		return nil, errors.New("missing required argument 'Actions'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["actions"] = args.Actions
		inputs["description"] = args.Description
		inputs["enabled"] = args.Enabled
		inputs["name"] = args.Name
		inputs["predicate"] = args.Predicate
		inputs["schedule"] = args.Schedule
		inputs["type"] = args.Type
	}
	var resource Trigger
	err := ctx.RegisterResource("aws:glue/trigger:Trigger", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrigger gets an existing Trigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrigger(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TriggerState, opts ...pulumi.ResourceOpt) (*Trigger, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["actions"] = state.Actions
		inputs["description"] = state.Description
		inputs["enabled"] = state.Enabled
		inputs["name"] = state.Name
		inputs["predicate"] = state.Predicate
		inputs["schedule"] = state.Schedule
		inputs["type"] = state.Type
	}
	var resource Trigger
	err := ctx.ReadResource("aws:glue/trigger:Trigger", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Trigger) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Trigger) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Trigger resources.
type TriggerState struct {
	// List of actions initiated by this trigger when it fires. Defined below.
	Actions pulumi.ArrayInput `pulumi:"actions"`
	// A description of the new trigger.
	Description pulumi.StringInput `pulumi:"description"`
	// Start the trigger. Defaults to `true`. Not valid to disable for `ON_DEMAND` type.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The name of the trigger.
	Name pulumi.StringInput `pulumi:"name"`
	// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. Defined below.
	Predicate pulumi.AnyInput `pulumi:"predicate"`
	// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// The type of trigger. Valid values are `CONDITIONAL`, `ON_DEMAND`, and `SCHEDULED`.
	Type pulumi.StringInput `pulumi:"type"`
}

// The set of arguments for constructing a Trigger resource.
type TriggerArgs struct {
	// List of actions initiated by this trigger when it fires. Defined below.
	Actions pulumi.ArrayInput `pulumi:"actions"`
	// A description of the new trigger.
	Description pulumi.StringInput `pulumi:"description"`
	// Start the trigger. Defaults to `true`. Not valid to disable for `ON_DEMAND` type.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The name of the trigger.
	Name pulumi.StringInput `pulumi:"name"`
	// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. Defined below.
	Predicate pulumi.AnyInput `pulumi:"predicate"`
	// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// The type of trigger. Valid values are `CONDITIONAL`, `ON_DEMAND`, and `SCHEDULED`.
	Type pulumi.StringInput `pulumi:"type"`
}
