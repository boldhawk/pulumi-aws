// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package glue

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Glue Security Configuration.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/glue_security_configuration.html.markdown.
type SecurityConfiguration struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Configuration block containing encryption configuration. Detailed below.
	EncryptionConfiguration pulumi.AnyOutput `pulumi:"encryptionConfiguration"`

	// Name of the security configuration.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewSecurityConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSecurityConfiguration(ctx *pulumi.Context,
	name string, args *SecurityConfigurationArgs, opts ...pulumi.ResourceOpt) (*SecurityConfiguration, error) {
	if args == nil || args.EncryptionConfiguration == nil {
		return nil, errors.New("missing required argument 'EncryptionConfiguration'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["encryptionConfiguration"] = args.EncryptionConfiguration
		inputs["name"] = args.Name
	}
	var resource SecurityConfiguration
	err := ctx.RegisterResource("aws:glue/securityConfiguration:SecurityConfiguration", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityConfiguration gets an existing SecurityConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityConfiguration(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecurityConfigurationState, opts ...pulumi.ResourceOpt) (*SecurityConfiguration, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["encryptionConfiguration"] = state.EncryptionConfiguration
		inputs["name"] = state.Name
	}
	var resource SecurityConfiguration
	err := ctx.ReadResource("aws:glue/securityConfiguration:SecurityConfiguration", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *SecurityConfiguration) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *SecurityConfiguration) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering SecurityConfiguration resources.
type SecurityConfigurationState struct {
	// Configuration block containing encryption configuration. Detailed below.
	EncryptionConfiguration pulumi.AnyInput `pulumi:"encryptionConfiguration"`
	// Name of the security configuration.
	Name pulumi.StringInput `pulumi:"name"`
}

// The set of arguments for constructing a SecurityConfiguration resource.
type SecurityConfigurationArgs struct {
	// Configuration block containing encryption configuration. Detailed below.
	EncryptionConfiguration pulumi.AnyInput `pulumi:"encryptionConfiguration"`
	// Name of the security configuration.
	Name pulumi.StringInput `pulumi:"name"`
}
