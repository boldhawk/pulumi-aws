// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Attaches a Managed IAM Policy to an IAM group
// 
// > **NOTE:** The usage of this resource conflicts with the `iam.PolicyAttachment` resource and will permanently show a difference if both are defined.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/iam_group_policy_attachment.html.markdown.
type GroupPolicyAttachment struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The group the policy should be applied to
	Group pulumi.StringOutput `pulumi:"group"`

	// The ARN of the policy you want to apply
	PolicyArn pulumi.StringOutput `pulumi:"policyArn"`
}

// NewGroupPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewGroupPolicyAttachment(ctx *pulumi.Context,
	name string, args *GroupPolicyAttachmentArgs, opts ...pulumi.ResourceOpt) (*GroupPolicyAttachment, error) {
	if args == nil || args.Group == nil {
		return nil, errors.New("missing required argument 'Group'")
	}
	if args == nil || args.PolicyArn == nil {
		return nil, errors.New("missing required argument 'PolicyArn'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["group"] = args.Group
		inputs["policyArn"] = args.PolicyArn
	}
	var resource GroupPolicyAttachment
	err := ctx.RegisterResource("aws:iam/groupPolicyAttachment:GroupPolicyAttachment", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupPolicyAttachment gets an existing GroupPolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupPolicyAttachmentState, opts ...pulumi.ResourceOpt) (*GroupPolicyAttachment, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["group"] = state.Group
		inputs["policyArn"] = state.PolicyArn
	}
	var resource GroupPolicyAttachment
	err := ctx.ReadResource("aws:iam/groupPolicyAttachment:GroupPolicyAttachment", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *GroupPolicyAttachment) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *GroupPolicyAttachment) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering GroupPolicyAttachment resources.
type GroupPolicyAttachmentState struct {
	// The group the policy should be applied to
	Group pulumi.StringInput `pulumi:"group"`
	// The ARN of the policy you want to apply
	PolicyArn pulumi.StringInput `pulumi:"policyArn"`
}

// The set of arguments for constructing a GroupPolicyAttachment resource.
type GroupPolicyAttachmentArgs struct {
	// The group the policy should be applied to
	Group pulumi.StringInput `pulumi:"group"`
	// The ARN of the policy you want to apply
	PolicyArn pulumi.StringInput `pulumi:"policyArn"`
}
