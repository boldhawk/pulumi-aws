// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsworks

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an OpsWorks application resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/opsworks_application.html.markdown.
type Application struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// SCM configuration of the app as described below.
	AppSources pulumi.ArrayOutput `pulumi:"appSources"`

	// Run bundle install when deploying for application of type `rails`.
	AutoBundleOnDeploy pulumi.StringOutput `pulumi:"autoBundleOnDeploy"`

	// Specify activity and workflow workers for your app using the aws-flow gem.
	AwsFlowRubySettings pulumi.StringOutput `pulumi:"awsFlowRubySettings"`

	// The data source's ARN.
	DataSourceArn pulumi.StringOutput `pulumi:"dataSourceArn"`

	// The database name.
	DataSourceDatabaseName pulumi.StringOutput `pulumi:"dataSourceDatabaseName"`

	// The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
	DataSourceType pulumi.StringOutput `pulumi:"dataSourceType"`

	// A description of the app.
	Description pulumi.StringOutput `pulumi:"description"`

	// Subfolder for the document root for application of type `rails`.
	DocumentRoot pulumi.StringOutput `pulumi:"documentRoot"`

	// A list of virtual host alias.
	Domains pulumi.ArrayOutput `pulumi:"domains"`

	// Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
	EnableSsl pulumi.BoolOutput `pulumi:"enableSsl"`

	// Object to define environment variables.  Object is described below.
	Environments pulumi.ArrayOutput `pulumi:"environments"`

	// A human-readable name for the application.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the Rails environment for application of type `rails`.
	RailsEnv pulumi.StringOutput `pulumi:"railsEnv"`

	// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
	ShortName pulumi.StringOutput `pulumi:"shortName"`

	// The SSL configuration of the app. Object is described below.
	SslConfigurations pulumi.ArrayOutput `pulumi:"sslConfigurations"`

	// The id of the stack the application will belong to.
	StackId pulumi.StringOutput `pulumi:"stackId"`

	// The type of source to use. For example, "archive".
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOpt) (*Application, error) {
	if args == nil || args.StackId == nil {
		return nil, errors.New("missing required argument 'StackId'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["appSources"] = args.AppSources
		inputs["autoBundleOnDeploy"] = args.AutoBundleOnDeploy
		inputs["awsFlowRubySettings"] = args.AwsFlowRubySettings
		inputs["dataSourceArn"] = args.DataSourceArn
		inputs["dataSourceDatabaseName"] = args.DataSourceDatabaseName
		inputs["dataSourceType"] = args.DataSourceType
		inputs["description"] = args.Description
		inputs["documentRoot"] = args.DocumentRoot
		inputs["domains"] = args.Domains
		inputs["enableSsl"] = args.EnableSsl
		inputs["environments"] = args.Environments
		inputs["name"] = args.Name
		inputs["railsEnv"] = args.RailsEnv
		inputs["shortName"] = args.ShortName
		inputs["sslConfigurations"] = args.SslConfigurations
		inputs["stackId"] = args.StackId
		inputs["type"] = args.Type
	}
	var resource Application
	err := ctx.RegisterResource("aws:opsworks/application:Application", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ApplicationState, opts ...pulumi.ResourceOpt) (*Application, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["appSources"] = state.AppSources
		inputs["autoBundleOnDeploy"] = state.AutoBundleOnDeploy
		inputs["awsFlowRubySettings"] = state.AwsFlowRubySettings
		inputs["dataSourceArn"] = state.DataSourceArn
		inputs["dataSourceDatabaseName"] = state.DataSourceDatabaseName
		inputs["dataSourceType"] = state.DataSourceType
		inputs["description"] = state.Description
		inputs["documentRoot"] = state.DocumentRoot
		inputs["domains"] = state.Domains
		inputs["enableSsl"] = state.EnableSsl
		inputs["environments"] = state.Environments
		inputs["name"] = state.Name
		inputs["railsEnv"] = state.RailsEnv
		inputs["shortName"] = state.ShortName
		inputs["sslConfigurations"] = state.SslConfigurations
		inputs["stackId"] = state.StackId
		inputs["type"] = state.Type
	}
	var resource Application
	err := ctx.ReadResource("aws:opsworks/application:Application", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Application) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Application) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Application resources.
type ApplicationState struct {
	// SCM configuration of the app as described below.
	AppSources pulumi.ArrayInput `pulumi:"appSources"`
	// Run bundle install when deploying for application of type `rails`.
	AutoBundleOnDeploy pulumi.StringInput `pulumi:"autoBundleOnDeploy"`
	// Specify activity and workflow workers for your app using the aws-flow gem.
	AwsFlowRubySettings pulumi.StringInput `pulumi:"awsFlowRubySettings"`
	// The data source's ARN.
	DataSourceArn pulumi.StringInput `pulumi:"dataSourceArn"`
	// The database name.
	DataSourceDatabaseName pulumi.StringInput `pulumi:"dataSourceDatabaseName"`
	// The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
	DataSourceType pulumi.StringInput `pulumi:"dataSourceType"`
	// A description of the app.
	Description pulumi.StringInput `pulumi:"description"`
	// Subfolder for the document root for application of type `rails`.
	DocumentRoot pulumi.StringInput `pulumi:"documentRoot"`
	// A list of virtual host alias.
	Domains pulumi.ArrayInput `pulumi:"domains"`
	// Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
	EnableSsl pulumi.BoolInput `pulumi:"enableSsl"`
	// Object to define environment variables.  Object is described below.
	Environments pulumi.ArrayInput `pulumi:"environments"`
	// A human-readable name for the application.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Rails environment for application of type `rails`.
	RailsEnv pulumi.StringInput `pulumi:"railsEnv"`
	// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
	ShortName pulumi.StringInput `pulumi:"shortName"`
	// The SSL configuration of the app. Object is described below.
	SslConfigurations pulumi.ArrayInput `pulumi:"sslConfigurations"`
	// The id of the stack the application will belong to.
	StackId pulumi.StringInput `pulumi:"stackId"`
	// The type of source to use. For example, "archive".
	Type pulumi.StringInput `pulumi:"type"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// SCM configuration of the app as described below.
	AppSources pulumi.ArrayInput `pulumi:"appSources"`
	// Run bundle install when deploying for application of type `rails`.
	AutoBundleOnDeploy pulumi.StringInput `pulumi:"autoBundleOnDeploy"`
	// Specify activity and workflow workers for your app using the aws-flow gem.
	AwsFlowRubySettings pulumi.StringInput `pulumi:"awsFlowRubySettings"`
	// The data source's ARN.
	DataSourceArn pulumi.StringInput `pulumi:"dataSourceArn"`
	// The database name.
	DataSourceDatabaseName pulumi.StringInput `pulumi:"dataSourceDatabaseName"`
	// The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
	DataSourceType pulumi.StringInput `pulumi:"dataSourceType"`
	// A description of the app.
	Description pulumi.StringInput `pulumi:"description"`
	// Subfolder for the document root for application of type `rails`.
	DocumentRoot pulumi.StringInput `pulumi:"documentRoot"`
	// A list of virtual host alias.
	Domains pulumi.ArrayInput `pulumi:"domains"`
	// Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
	EnableSsl pulumi.BoolInput `pulumi:"enableSsl"`
	// Object to define environment variables.  Object is described below.
	Environments pulumi.ArrayInput `pulumi:"environments"`
	// A human-readable name for the application.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Rails environment for application of type `rails`.
	RailsEnv pulumi.StringInput `pulumi:"railsEnv"`
	// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
	ShortName pulumi.StringInput `pulumi:"shortName"`
	// The SSL configuration of the app. Object is described below.
	SslConfigurations pulumi.ArrayInput `pulumi:"sslConfigurations"`
	// The id of the stack the application will belong to.
	StackId pulumi.StringInput `pulumi:"stackId"`
	// The type of source to use. For example, "archive".
	Type pulumi.StringInput `pulumi:"type"`
}
