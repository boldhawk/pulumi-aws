// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package redshift

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type SnapshotScheduleAssociation struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The cluster identifier.
	ClusterIdentifier pulumi.StringOutput `pulumi:"clusterIdentifier"`

	// The snapshot schedule identifier.
	ScheduleIdentifier pulumi.StringOutput `pulumi:"scheduleIdentifier"`
}

// NewSnapshotScheduleAssociation registers a new resource with the given unique name, arguments, and options.
func NewSnapshotScheduleAssociation(ctx *pulumi.Context,
	name string, args *SnapshotScheduleAssociationArgs, opts ...pulumi.ResourceOpt) (*SnapshotScheduleAssociation, error) {
	if args == nil || args.ClusterIdentifier == nil {
		return nil, errors.New("missing required argument 'ClusterIdentifier'")
	}
	if args == nil || args.ScheduleIdentifier == nil {
		return nil, errors.New("missing required argument 'ScheduleIdentifier'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["clusterIdentifier"] = args.ClusterIdentifier
		inputs["scheduleIdentifier"] = args.ScheduleIdentifier
	}
	var resource SnapshotScheduleAssociation
	err := ctx.RegisterResource("aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotScheduleAssociation gets an existing SnapshotScheduleAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotScheduleAssociation(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SnapshotScheduleAssociationState, opts ...pulumi.ResourceOpt) (*SnapshotScheduleAssociation, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["clusterIdentifier"] = state.ClusterIdentifier
		inputs["scheduleIdentifier"] = state.ScheduleIdentifier
	}
	var resource SnapshotScheduleAssociation
	err := ctx.ReadResource("aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *SnapshotScheduleAssociation) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *SnapshotScheduleAssociation) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering SnapshotScheduleAssociation resources.
type SnapshotScheduleAssociationState struct {
	// The cluster identifier.
	ClusterIdentifier pulumi.StringInput `pulumi:"clusterIdentifier"`
	// The snapshot schedule identifier.
	ScheduleIdentifier pulumi.StringInput `pulumi:"scheduleIdentifier"`
}

// The set of arguments for constructing a SnapshotScheduleAssociation resource.
type SnapshotScheduleAssociationArgs struct {
	// The cluster identifier.
	ClusterIdentifier pulumi.StringInput `pulumi:"clusterIdentifier"`
	// The snapshot schedule identifier.
	ScheduleIdentifier pulumi.StringInput `pulumi:"scheduleIdentifier"`
}
