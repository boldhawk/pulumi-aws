// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AWS Config Rule.
// 
// > **Note:** Config Rule requires an existing [Configuration Recorder](https://www.terraform.io/docs/providers/aws/r/config_configuration_recorder.html) to be present. Use of `dependsOn` is recommended (as shown below) to avoid race conditions.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/config_config_rule.html.markdown.
type Rule struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ARN of the config rule
	Arn pulumi.StringOutput `pulumi:"arn"`

	// Description of the rule
	Description pulumi.StringOutput `pulumi:"description"`

	// A string in JSON format that is passed to the AWS Config rule Lambda function.
	InputParameters pulumi.StringOutput `pulumi:"inputParameters"`

	// The frequency that you want AWS Config to run evaluations for a rule that
	// is triggered periodically. If specified, requires `messageType` to be `ScheduledNotification`.
	MaximumExecutionFrequency pulumi.StringOutput `pulumi:"maximumExecutionFrequency"`

	// The name of the rule
	Name pulumi.StringOutput `pulumi:"name"`

	// The ID of the config rule
	RuleId pulumi.StringOutput `pulumi:"ruleId"`

	// Scope defines which resources can trigger an evaluation for the rule as documented below.
	Scope pulumi.AnyOutput `pulumi:"scope"`

	// Source specifies the rule owner, the rule identifier, and the notifications that cause
	// the function to evaluate your AWS resources as documented below.
	Source pulumi.AnyOutput `pulumi:"source"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOpt) (*Rule, error) {
	if args == nil || args.Source == nil {
		return nil, errors.New("missing required argument 'Source'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["description"] = args.Description
		inputs["inputParameters"] = args.InputParameters
		inputs["maximumExecutionFrequency"] = args.MaximumExecutionFrequency
		inputs["name"] = args.Name
		inputs["scope"] = args.Scope
		inputs["source"] = args.Source
		inputs["tags"] = args.Tags
	}
	var resource Rule
	err := ctx.RegisterResource("aws:cfg/rule:Rule", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RuleState, opts ...pulumi.ResourceOpt) (*Rule, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["description"] = state.Description
		inputs["inputParameters"] = state.InputParameters
		inputs["maximumExecutionFrequency"] = state.MaximumExecutionFrequency
		inputs["name"] = state.Name
		inputs["ruleId"] = state.RuleId
		inputs["scope"] = state.Scope
		inputs["source"] = state.Source
		inputs["tags"] = state.Tags
	}
	var resource Rule
	err := ctx.ReadResource("aws:cfg/rule:Rule", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Rule) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Rule) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Rule resources.
type RuleState struct {
	// The ARN of the config rule
	Arn pulumi.StringInput `pulumi:"arn"`
	// Description of the rule
	Description pulumi.StringInput `pulumi:"description"`
	// A string in JSON format that is passed to the AWS Config rule Lambda function.
	InputParameters pulumi.StringInput `pulumi:"inputParameters"`
	// The frequency that you want AWS Config to run evaluations for a rule that
	// is triggered periodically. If specified, requires `messageType` to be `ScheduledNotification`.
	MaximumExecutionFrequency pulumi.StringInput `pulumi:"maximumExecutionFrequency"`
	// The name of the rule
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the config rule
	RuleId pulumi.StringInput `pulumi:"ruleId"`
	// Scope defines which resources can trigger an evaluation for the rule as documented below.
	Scope pulumi.AnyInput `pulumi:"scope"`
	// Source specifies the rule owner, the rule identifier, and the notifications that cause
	// the function to evaluate your AWS resources as documented below.
	Source pulumi.AnyInput `pulumi:"source"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	// Description of the rule
	Description pulumi.StringInput `pulumi:"description"`
	// A string in JSON format that is passed to the AWS Config rule Lambda function.
	InputParameters pulumi.StringInput `pulumi:"inputParameters"`
	// The frequency that you want AWS Config to run evaluations for a rule that
	// is triggered periodically. If specified, requires `messageType` to be `ScheduledNotification`.
	MaximumExecutionFrequency pulumi.StringInput `pulumi:"maximumExecutionFrequency"`
	// The name of the rule
	Name pulumi.StringInput `pulumi:"name"`
	// Scope defines which resources can trigger an evaluation for the rule as documented below.
	Scope pulumi.AnyInput `pulumi:"scope"`
	// Source specifies the rule owner, the rule identifier, and the notifications that cause
	// the function to evaluate your AWS resources as documented below.
	Source pulumi.AnyInput `pulumi:"source"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
