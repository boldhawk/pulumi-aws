// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages status (recording / stopped) of an AWS Config Configuration Recorder.
// 
// > **Note:** Starting Configuration Recorder requires a [Delivery Channel](https://www.terraform.io/docs/providers/aws/r/config_delivery_channel.html) to be present. Use of `dependsOn` (as shown below) is recommended to avoid race conditions.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/config_configuration_recorder_status.html.markdown.
type RecorderStatus struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`

	// The name of the recorder
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewRecorderStatus registers a new resource with the given unique name, arguments, and options.
func NewRecorderStatus(ctx *pulumi.Context,
	name string, args *RecorderStatusArgs, opts ...pulumi.ResourceOpt) (*RecorderStatus, error) {
	if args == nil || args.IsEnabled == nil {
		return nil, errors.New("missing required argument 'IsEnabled'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["isEnabled"] = args.IsEnabled
		inputs["name"] = args.Name
	}
	var resource RecorderStatus
	err := ctx.RegisterResource("aws:cfg/recorderStatus:RecorderStatus", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecorderStatus gets an existing RecorderStatus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecorderStatus(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RecorderStatusState, opts ...pulumi.ResourceOpt) (*RecorderStatus, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["isEnabled"] = state.IsEnabled
		inputs["name"] = state.Name
	}
	var resource RecorderStatus
	err := ctx.ReadResource("aws:cfg/recorderStatus:RecorderStatus", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *RecorderStatus) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *RecorderStatus) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering RecorderStatus resources.
type RecorderStatusState struct {
	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The name of the recorder
	Name pulumi.StringInput `pulumi:"name"`
}

// The set of arguments for constructing a RecorderStatus resource.
type RecorderStatusArgs struct {
	// Whether the configuration recorder should be enabled or disabled.
	IsEnabled pulumi.BoolInput `pulumi:"isEnabled"`
	// The name of the recorder
	Name pulumi.StringInput `pulumi:"name"`
}
