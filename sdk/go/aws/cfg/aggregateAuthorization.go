// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an AWS Config Aggregate Authorization
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/config_aggregate_authorization.html.markdown.
type AggregateAuthorization struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Account ID
	AccountId pulumi.StringOutput `pulumi:"accountId"`

	// The ARN of the authorization
	Arn pulumi.StringOutput `pulumi:"arn"`

	// Region
	Region pulumi.StringOutput `pulumi:"region"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewAggregateAuthorization registers a new resource with the given unique name, arguments, and options.
func NewAggregateAuthorization(ctx *pulumi.Context,
	name string, args *AggregateAuthorizationArgs, opts ...pulumi.ResourceOpt) (*AggregateAuthorization, error) {
	if args == nil || args.AccountId == nil {
		return nil, errors.New("missing required argument 'AccountId'")
	}
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["accountId"] = args.AccountId
		inputs["region"] = args.Region
		inputs["tags"] = args.Tags
	}
	var resource AggregateAuthorization
	err := ctx.RegisterResource("aws:cfg/aggregateAuthorization:AggregateAuthorization", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAggregateAuthorization gets an existing AggregateAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAggregateAuthorization(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AggregateAuthorizationState, opts ...pulumi.ResourceOpt) (*AggregateAuthorization, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["accountId"] = state.AccountId
		inputs["arn"] = state.Arn
		inputs["region"] = state.Region
		inputs["tags"] = state.Tags
	}
	var resource AggregateAuthorization
	err := ctx.ReadResource("aws:cfg/aggregateAuthorization:AggregateAuthorization", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *AggregateAuthorization) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *AggregateAuthorization) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering AggregateAuthorization resources.
type AggregateAuthorizationState struct {
	// Account ID
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The ARN of the authorization
	Arn pulumi.StringInput `pulumi:"arn"`
	// Region
	Region pulumi.StringInput `pulumi:"region"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a AggregateAuthorization resource.
type AggregateAuthorizationArgs struct {
	// Account ID
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Region
	Region pulumi.StringInput `pulumi:"region"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
