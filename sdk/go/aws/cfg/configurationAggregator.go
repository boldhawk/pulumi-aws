// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cfg

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an AWS Config Configuration Aggregator
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/config_configuration_aggregator.html.markdown.
type ConfigurationAggregator struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The account(s) to aggregate config data from as documented below.
	AccountAggregationSource pulumi.AnyOutput `pulumi:"accountAggregationSource"`

	// The ARN of the aggregator
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The name of the configuration aggregator.
	Name pulumi.StringOutput `pulumi:"name"`

	// The organization to aggregate config data from as documented below.
	OrganizationAggregationSource pulumi.AnyOutput `pulumi:"organizationAggregationSource"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewConfigurationAggregator registers a new resource with the given unique name, arguments, and options.
func NewConfigurationAggregator(ctx *pulumi.Context,
	name string, args *ConfigurationAggregatorArgs, opts ...pulumi.ResourceOpt) (*ConfigurationAggregator, error) {
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["accountAggregationSource"] = args.AccountAggregationSource
		inputs["name"] = args.Name
		inputs["organizationAggregationSource"] = args.OrganizationAggregationSource
		inputs["tags"] = args.Tags
	}
	var resource ConfigurationAggregator
	err := ctx.RegisterResource("aws:cfg/configurationAggregator:ConfigurationAggregator", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationAggregator gets an existing ConfigurationAggregator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationAggregator(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ConfigurationAggregatorState, opts ...pulumi.ResourceOpt) (*ConfigurationAggregator, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["accountAggregationSource"] = state.AccountAggregationSource
		inputs["arn"] = state.Arn
		inputs["name"] = state.Name
		inputs["organizationAggregationSource"] = state.OrganizationAggregationSource
		inputs["tags"] = state.Tags
	}
	var resource ConfigurationAggregator
	err := ctx.ReadResource("aws:cfg/configurationAggregator:ConfigurationAggregator", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *ConfigurationAggregator) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *ConfigurationAggregator) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering ConfigurationAggregator resources.
type ConfigurationAggregatorState struct {
	// The account(s) to aggregate config data from as documented below.
	AccountAggregationSource pulumi.AnyInput `pulumi:"accountAggregationSource"`
	// The ARN of the aggregator
	Arn pulumi.StringInput `pulumi:"arn"`
	// The name of the configuration aggregator.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization to aggregate config data from as documented below.
	OrganizationAggregationSource pulumi.AnyInput `pulumi:"organizationAggregationSource"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a ConfigurationAggregator resource.
type ConfigurationAggregatorArgs struct {
	// The account(s) to aggregate config data from as documented below.
	AccountAggregationSource pulumi.AnyInput `pulumi:"accountAggregationSource"`
	// The name of the configuration aggregator.
	Name pulumi.StringInput `pulumi:"name"`
	// The organization to aggregate config data from as documented below.
	OrganizationAggregationSource pulumi.AnyInput `pulumi:"organizationAggregationSource"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
