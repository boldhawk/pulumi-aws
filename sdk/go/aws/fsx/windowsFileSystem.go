// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fsx

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a FSx Windows File System. See the [FSx Windows Guide](https://docs.aws.amazon.com/fsx/latest/WindowsGuide/what-is.html) for more information.
// 
// > **NOTE:** Either the `activeDirectoryId` argument or `selfManagedActiveDirectory` configuration block must be specified.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/fsx_windows_file_system.html.markdown.
type WindowsFileSystem struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ID for an existing Microsoft Active Directory instance that the file system should join when it's created. Cannot be specified with `selfManagedActiveDirectory`.
	ActiveDirectoryId pulumi.StringOutput `pulumi:"activeDirectoryId"`

	// Amazon Resource Name of the file system.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The number of days to retain automatic backups. Minimum of `0` and maximum of `35`. Defaults to `7`. Set to `0` to disable.
	AutomaticBackupRetentionDays pulumi.IntOutput `pulumi:"automaticBackupRetentionDays"`

	// A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to `false`.
	CopyTagsToBackups pulumi.BoolOutput `pulumi:"copyTagsToBackups"`

	// The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
	DailyAutomaticBackupStartTime pulumi.StringOutput `pulumi:"dailyAutomaticBackupStartTime"`

	// DNS name for the file system, e.g. `fs-12345678.corp.example.com` (domain name matching the Active Directory domain name)
	DnsName pulumi.StringOutput `pulumi:"dnsName"`

	// ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`

	// Set of Elastic Network Interface identifiers from which the file system is accessible.
	NetworkInterfaceIds pulumi.ArrayOutput `pulumi:"networkInterfaceIds"`

	// AWS account identifier that created the file system.
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`

	// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
	SecurityGroupIds pulumi.ArrayOutput `pulumi:"securityGroupIds"`

	// Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with `activeDirectoryId`. Detailed below.
	SelfManagedActiveDirectory pulumi.AnyOutput `pulumi:"selfManagedActiveDirectory"`

	// When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
	SkipFinalBackup pulumi.BoolOutput `pulumi:"skipFinalBackup"`

	// Storage capacity (GiB) of the file system. Minimum of 300 and maximum of 65536.
	StorageCapacity pulumi.IntOutput `pulumi:"storageCapacity"`

	// A list of IDs for the subnets that the file system will be accessible from. File systems support only one subnet. The file server is also launched in that subnet's Availability Zone.
	SubnetIds pulumi.StringOutput `pulumi:"subnetIds"`

	// A mapping of tags to assign to the file system.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of `8` and maximum of `2048`.
	ThroughputCapacity pulumi.IntOutput `pulumi:"throughputCapacity"`

	// Identifier of the Virtual Private Cloud for the file system.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`

	// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
	WeeklyMaintenanceStartTime pulumi.StringOutput `pulumi:"weeklyMaintenanceStartTime"`
}

// NewWindowsFileSystem registers a new resource with the given unique name, arguments, and options.
func NewWindowsFileSystem(ctx *pulumi.Context,
	name string, args *WindowsFileSystemArgs, opts ...pulumi.ResourceOpt) (*WindowsFileSystem, error) {
	if args == nil || args.StorageCapacity == nil {
		return nil, errors.New("missing required argument 'StorageCapacity'")
	}
	if args == nil || args.SubnetIds == nil {
		return nil, errors.New("missing required argument 'SubnetIds'")
	}
	if args == nil || args.ThroughputCapacity == nil {
		return nil, errors.New("missing required argument 'ThroughputCapacity'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["activeDirectoryId"] = args.ActiveDirectoryId
		inputs["automaticBackupRetentionDays"] = args.AutomaticBackupRetentionDays
		inputs["copyTagsToBackups"] = args.CopyTagsToBackups
		inputs["dailyAutomaticBackupStartTime"] = args.DailyAutomaticBackupStartTime
		inputs["kmsKeyId"] = args.KmsKeyId
		inputs["securityGroupIds"] = args.SecurityGroupIds
		inputs["selfManagedActiveDirectory"] = args.SelfManagedActiveDirectory
		inputs["skipFinalBackup"] = args.SkipFinalBackup
		inputs["storageCapacity"] = args.StorageCapacity
		inputs["subnetIds"] = args.SubnetIds
		inputs["tags"] = args.Tags
		inputs["throughputCapacity"] = args.ThroughputCapacity
		inputs["weeklyMaintenanceStartTime"] = args.WeeklyMaintenanceStartTime
	}
	var resource WindowsFileSystem
	err := ctx.RegisterResource("aws:fsx/windowsFileSystem:WindowsFileSystem", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWindowsFileSystem gets an existing WindowsFileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWindowsFileSystem(ctx *pulumi.Context,
	name string, id pulumi.ID, state *WindowsFileSystemState, opts ...pulumi.ResourceOpt) (*WindowsFileSystem, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["activeDirectoryId"] = state.ActiveDirectoryId
		inputs["arn"] = state.Arn
		inputs["automaticBackupRetentionDays"] = state.AutomaticBackupRetentionDays
		inputs["copyTagsToBackups"] = state.CopyTagsToBackups
		inputs["dailyAutomaticBackupStartTime"] = state.DailyAutomaticBackupStartTime
		inputs["dnsName"] = state.DnsName
		inputs["kmsKeyId"] = state.KmsKeyId
		inputs["networkInterfaceIds"] = state.NetworkInterfaceIds
		inputs["ownerId"] = state.OwnerId
		inputs["securityGroupIds"] = state.SecurityGroupIds
		inputs["selfManagedActiveDirectory"] = state.SelfManagedActiveDirectory
		inputs["skipFinalBackup"] = state.SkipFinalBackup
		inputs["storageCapacity"] = state.StorageCapacity
		inputs["subnetIds"] = state.SubnetIds
		inputs["tags"] = state.Tags
		inputs["throughputCapacity"] = state.ThroughputCapacity
		inputs["vpcId"] = state.VpcId
		inputs["weeklyMaintenanceStartTime"] = state.WeeklyMaintenanceStartTime
	}
	var resource WindowsFileSystem
	err := ctx.ReadResource("aws:fsx/windowsFileSystem:WindowsFileSystem", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *WindowsFileSystem) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *WindowsFileSystem) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering WindowsFileSystem resources.
type WindowsFileSystemState struct {
	// The ID for an existing Microsoft Active Directory instance that the file system should join when it's created. Cannot be specified with `selfManagedActiveDirectory`.
	ActiveDirectoryId pulumi.StringInput `pulumi:"activeDirectoryId"`
	// Amazon Resource Name of the file system.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The number of days to retain automatic backups. Minimum of `0` and maximum of `35`. Defaults to `7`. Set to `0` to disable.
	AutomaticBackupRetentionDays pulumi.IntInput `pulumi:"automaticBackupRetentionDays"`
	// A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to `false`.
	CopyTagsToBackups pulumi.BoolInput `pulumi:"copyTagsToBackups"`
	// The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
	DailyAutomaticBackupStartTime pulumi.StringInput `pulumi:"dailyAutomaticBackupStartTime"`
	// DNS name for the file system, e.g. `fs-12345678.corp.example.com` (domain name matching the Active Directory domain name)
	DnsName pulumi.StringInput `pulumi:"dnsName"`
	// ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// Set of Elastic Network Interface identifiers from which the file system is accessible.
	NetworkInterfaceIds pulumi.ArrayInput `pulumi:"networkInterfaceIds"`
	// AWS account identifier that created the file system.
	OwnerId pulumi.StringInput `pulumi:"ownerId"`
	// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
	SecurityGroupIds pulumi.ArrayInput `pulumi:"securityGroupIds"`
	// Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with `activeDirectoryId`. Detailed below.
	SelfManagedActiveDirectory pulumi.AnyInput `pulumi:"selfManagedActiveDirectory"`
	// When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
	SkipFinalBackup pulumi.BoolInput `pulumi:"skipFinalBackup"`
	// Storage capacity (GiB) of the file system. Minimum of 300 and maximum of 65536.
	StorageCapacity pulumi.IntInput `pulumi:"storageCapacity"`
	// A list of IDs for the subnets that the file system will be accessible from. File systems support only one subnet. The file server is also launched in that subnet's Availability Zone.
	SubnetIds pulumi.StringInput `pulumi:"subnetIds"`
	// A mapping of tags to assign to the file system.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of `8` and maximum of `2048`.
	ThroughputCapacity pulumi.IntInput `pulumi:"throughputCapacity"`
	// Identifier of the Virtual Private Cloud for the file system.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
	WeeklyMaintenanceStartTime pulumi.StringInput `pulumi:"weeklyMaintenanceStartTime"`
}

// The set of arguments for constructing a WindowsFileSystem resource.
type WindowsFileSystemArgs struct {
	// The ID for an existing Microsoft Active Directory instance that the file system should join when it's created. Cannot be specified with `selfManagedActiveDirectory`.
	ActiveDirectoryId pulumi.StringInput `pulumi:"activeDirectoryId"`
	// The number of days to retain automatic backups. Minimum of `0` and maximum of `35`. Defaults to `7`. Set to `0` to disable.
	AutomaticBackupRetentionDays pulumi.IntInput `pulumi:"automaticBackupRetentionDays"`
	// A boolean flag indicating whether tags on the file system should be copied to backups. Defaults to `false`.
	CopyTagsToBackups pulumi.BoolInput `pulumi:"copyTagsToBackups"`
	// The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
	DailyAutomaticBackupStartTime pulumi.StringInput `pulumi:"dailyAutomaticBackupStartTime"`
	// ARN for the KMS Key to encrypt the file system at rest. Defaults to an AWS managed KMS Key.
	KmsKeyId pulumi.StringInput `pulumi:"kmsKeyId"`
	// A list of IDs for the security groups that apply to the specified network interfaces created for file system access. These security groups will apply to all network interfaces.
	SecurityGroupIds pulumi.ArrayInput `pulumi:"securityGroupIds"`
	// Configuration block that Amazon FSx uses to join the Windows File Server instance to your self-managed (including on-premises) Microsoft Active Directory (AD) directory. Cannot be specified with `activeDirectoryId`. Detailed below.
	SelfManagedActiveDirectory pulumi.AnyInput `pulumi:"selfManagedActiveDirectory"`
	// When enabled, will skip the default final backup taken when the file system is deleted. This configuration must be applied separately before attempting to delete the resource to have the desired behavior. Defaults to `false`.
	SkipFinalBackup pulumi.BoolInput `pulumi:"skipFinalBackup"`
	// Storage capacity (GiB) of the file system. Minimum of 300 and maximum of 65536.
	StorageCapacity pulumi.IntInput `pulumi:"storageCapacity"`
	// A list of IDs for the subnets that the file system will be accessible from. File systems support only one subnet. The file server is also launched in that subnet's Availability Zone.
	SubnetIds pulumi.StringInput `pulumi:"subnetIds"`
	// A mapping of tags to assign to the file system.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of `8` and maximum of `2048`.
	ThroughputCapacity pulumi.IntInput `pulumi:"throughputCapacity"`
	// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
	WeeklyMaintenanceStartTime pulumi.StringInput `pulumi:"weeklyMaintenanceStartTime"`
}
