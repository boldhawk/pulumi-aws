// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ses

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an SES event destination
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ses_event_destination.html.markdown.
type EventDestination struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// CloudWatch destination for the events
	CloudwatchDestinations pulumi.ArrayOutput `pulumi:"cloudwatchDestinations"`

	// The name of the configuration set
	ConfigurationSetName pulumi.StringOutput `pulumi:"configurationSetName"`

	// If true, the event destination will be enabled
	Enabled pulumi.BoolOutput `pulumi:"enabled"`

	// Send the events to a kinesis firehose destination
	KinesisDestination pulumi.AnyOutput `pulumi:"kinesisDestination"`

	// A list of matching types. May be any of `"send"`, `"reject"`, `"bounce"`, `"complaint"`, `"delivery"`, `"open"`, `"click"`, or `"renderingFailure"`.
	MatchingTypes pulumi.ArrayOutput `pulumi:"matchingTypes"`

	// The name of the event destination
	Name pulumi.StringOutput `pulumi:"name"`

	// Send the events to an SNS Topic destination
	SnsDestination pulumi.AnyOutput `pulumi:"snsDestination"`
}

// NewEventDestination registers a new resource with the given unique name, arguments, and options.
func NewEventDestination(ctx *pulumi.Context,
	name string, args *EventDestinationArgs, opts ...pulumi.ResourceOpt) (*EventDestination, error) {
	if args == nil || args.ConfigurationSetName == nil {
		return nil, errors.New("missing required argument 'ConfigurationSetName'")
	}
	if args == nil || args.MatchingTypes == nil {
		return nil, errors.New("missing required argument 'MatchingTypes'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["cloudwatchDestinations"] = args.CloudwatchDestinations
		inputs["configurationSetName"] = args.ConfigurationSetName
		inputs["enabled"] = args.Enabled
		inputs["kinesisDestination"] = args.KinesisDestination
		inputs["matchingTypes"] = args.MatchingTypes
		inputs["name"] = args.Name
		inputs["snsDestination"] = args.SnsDestination
	}
	var resource EventDestination
	err := ctx.RegisterResource("aws:ses/eventDestination:EventDestination", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventDestination gets an existing EventDestination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventDestination(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EventDestinationState, opts ...pulumi.ResourceOpt) (*EventDestination, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["cloudwatchDestinations"] = state.CloudwatchDestinations
		inputs["configurationSetName"] = state.ConfigurationSetName
		inputs["enabled"] = state.Enabled
		inputs["kinesisDestination"] = state.KinesisDestination
		inputs["matchingTypes"] = state.MatchingTypes
		inputs["name"] = state.Name
		inputs["snsDestination"] = state.SnsDestination
	}
	var resource EventDestination
	err := ctx.ReadResource("aws:ses/eventDestination:EventDestination", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *EventDestination) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *EventDestination) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering EventDestination resources.
type EventDestinationState struct {
	// CloudWatch destination for the events
	CloudwatchDestinations pulumi.ArrayInput `pulumi:"cloudwatchDestinations"`
	// The name of the configuration set
	ConfigurationSetName pulumi.StringInput `pulumi:"configurationSetName"`
	// If true, the event destination will be enabled
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Send the events to a kinesis firehose destination
	KinesisDestination pulumi.AnyInput `pulumi:"kinesisDestination"`
	// A list of matching types. May be any of `"send"`, `"reject"`, `"bounce"`, `"complaint"`, `"delivery"`, `"open"`, `"click"`, or `"renderingFailure"`.
	MatchingTypes pulumi.ArrayInput `pulumi:"matchingTypes"`
	// The name of the event destination
	Name pulumi.StringInput `pulumi:"name"`
	// Send the events to an SNS Topic destination
	SnsDestination pulumi.AnyInput `pulumi:"snsDestination"`
}

// The set of arguments for constructing a EventDestination resource.
type EventDestinationArgs struct {
	// CloudWatch destination for the events
	CloudwatchDestinations pulumi.ArrayInput `pulumi:"cloudwatchDestinations"`
	// The name of the configuration set
	ConfigurationSetName pulumi.StringInput `pulumi:"configurationSetName"`
	// If true, the event destination will be enabled
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Send the events to a kinesis firehose destination
	KinesisDestination pulumi.AnyInput `pulumi:"kinesisDestination"`
	// A list of matching types. May be any of `"send"`, `"reject"`, `"bounce"`, `"complaint"`, `"delivery"`, `"open"`, `"click"`, or `"renderingFailure"`.
	MatchingTypes pulumi.ArrayInput `pulumi:"matchingTypes"`
	// The name of the event destination
	Name pulumi.StringInput `pulumi:"name"`
	// Send the events to an SNS Topic destination
	SnsDestination pulumi.AnyInput `pulumi:"snsDestination"`
}
