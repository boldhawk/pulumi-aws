// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package organizations

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage an [AWS Organizations policy](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/organizations_policy.html.markdown.
type Policy struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Amazon Resource Name (ARN) of the policy.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The policy content to add to the new policy. For example, if you create a [service control policy (SCP)](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html), this string must be JSON text that specifies the permissions that admins in attached accounts can delegate to their users, groups, and roles. For more information about the SCP syntax, see the [Service Control Policy Syntax documentation](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_scp-syntax.html).
	Content pulumi.StringOutput `pulumi:"content"`

	// A description to assign to the policy.
	Description pulumi.StringOutput `pulumi:"description"`

	// The friendly name to assign to the policy.
	Name pulumi.StringOutput `pulumi:"name"`

	// The type of policy to create. Currently, the only valid value is `SERVICE_CONTROL_POLICY` (SCP).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOpt) (*Policy, error) {
	if args == nil || args.Content == nil {
		return nil, errors.New("missing required argument 'Content'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["content"] = args.Content
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["type"] = args.Type
	}
	var resource Policy
	err := ctx.RegisterResource("aws:organizations/policy:Policy", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PolicyState, opts ...pulumi.ResourceOpt) (*Policy, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["content"] = state.Content
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["type"] = state.Type
	}
	var resource Policy
	err := ctx.ReadResource("aws:organizations/policy:Policy", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Policy) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Policy) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Policy resources.
type PolicyState struct {
	// Amazon Resource Name (ARN) of the policy.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The policy content to add to the new policy. For example, if you create a [service control policy (SCP)](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html), this string must be JSON text that specifies the permissions that admins in attached accounts can delegate to their users, groups, and roles. For more information about the SCP syntax, see the [Service Control Policy Syntax documentation](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_scp-syntax.html).
	Content pulumi.StringInput `pulumi:"content"`
	// A description to assign to the policy.
	Description pulumi.StringInput `pulumi:"description"`
	// The friendly name to assign to the policy.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of policy to create. Currently, the only valid value is `SERVICE_CONTROL_POLICY` (SCP).
	Type pulumi.StringInput `pulumi:"type"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// The policy content to add to the new policy. For example, if you create a [service control policy (SCP)](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html), this string must be JSON text that specifies the permissions that admins in attached accounts can delegate to their users, groups, and roles. For more information about the SCP syntax, see the [Service Control Policy Syntax documentation](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_reference_scp-syntax.html).
	Content pulumi.StringInput `pulumi:"content"`
	// A description to assign to the policy.
	Description pulumi.StringInput `pulumi:"description"`
	// The friendly name to assign to the policy.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of policy to create. Currently, the only valid value is `SERVICE_CONTROL_POLICY` (SCP).
	Type pulumi.StringInput `pulumi:"type"`
}
