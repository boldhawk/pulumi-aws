// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a revision of an ECS task definition to be used in `ecs.Service`.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ecs_task_definition.html.markdown.
type TaskDefinition struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Full ARN of the Task Definition (including both `family` and `revision`).
	Arn pulumi.StringOutput `pulumi:"arn"`

	// A list of valid [container definitions]
	// (http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a
	// single valid JSON document. Please note that you should only provide values that are part of the container
	// definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters]
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the
	// official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
	ContainerDefinitions pulumi.StringOutput `pulumi:"containerDefinitions"`

	// The number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Cpu pulumi.StringOutput `pulumi:"cpu"`

	// The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
	ExecutionRoleArn pulumi.StringOutput `pulumi:"executionRoleArn"`

	// A unique name for your task definition.
	Family pulumi.StringOutput `pulumi:"family"`

	// The IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode pulumi.StringOutput `pulumi:"ipcMode"`

	// The amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Memory pulumi.StringOutput `pulumi:"memory"`

	// The Docker networking mode to use for the containers in the task. The valid values are `none`, `bridge`, `awsvpc`, and `host`.
	NetworkMode pulumi.StringOutput `pulumi:"networkMode"`

	// The process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode pulumi.StringOutput `pulumi:"pidMode"`

	// A set of placement constraints rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`.
	PlacementConstraints pulumi.ArrayOutput `pulumi:"placementConstraints"`

	// The proxy configuration details for the App Mesh proxy.
	ProxyConfiguration pulumi.AnyOutput `pulumi:"proxyConfiguration"`

	// A set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
	RequiresCompatibilities pulumi.ArrayOutput `pulumi:"requiresCompatibilities"`

	// The revision of the task in a particular family.
	Revision pulumi.IntOutput `pulumi:"revision"`

	// Key-value mapping of resource tags
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	TaskRoleArn pulumi.StringOutput `pulumi:"taskRoleArn"`

	// A set of volume blocks that containers in your task may use.
	Volumes pulumi.ArrayOutput `pulumi:"volumes"`
}

// NewTaskDefinition registers a new resource with the given unique name, arguments, and options.
func NewTaskDefinition(ctx *pulumi.Context,
	name string, args *TaskDefinitionArgs, opts ...pulumi.ResourceOpt) (*TaskDefinition, error) {
	if args == nil || args.ContainerDefinitions == nil {
		return nil, errors.New("missing required argument 'ContainerDefinitions'")
	}
	if args == nil || args.Family == nil {
		return nil, errors.New("missing required argument 'Family'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["containerDefinitions"] = args.ContainerDefinitions
		inputs["cpu"] = args.Cpu
		inputs["executionRoleArn"] = args.ExecutionRoleArn
		inputs["family"] = args.Family
		inputs["ipcMode"] = args.IpcMode
		inputs["memory"] = args.Memory
		inputs["networkMode"] = args.NetworkMode
		inputs["pidMode"] = args.PidMode
		inputs["placementConstraints"] = args.PlacementConstraints
		inputs["proxyConfiguration"] = args.ProxyConfiguration
		inputs["requiresCompatibilities"] = args.RequiresCompatibilities
		inputs["tags"] = args.Tags
		inputs["taskRoleArn"] = args.TaskRoleArn
		inputs["volumes"] = args.Volumes
	}
	var resource TaskDefinition
	err := ctx.RegisterResource("aws:ecs/taskDefinition:TaskDefinition", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTaskDefinition gets an existing TaskDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTaskDefinition(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TaskDefinitionState, opts ...pulumi.ResourceOpt) (*TaskDefinition, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["containerDefinitions"] = state.ContainerDefinitions
		inputs["cpu"] = state.Cpu
		inputs["executionRoleArn"] = state.ExecutionRoleArn
		inputs["family"] = state.Family
		inputs["ipcMode"] = state.IpcMode
		inputs["memory"] = state.Memory
		inputs["networkMode"] = state.NetworkMode
		inputs["pidMode"] = state.PidMode
		inputs["placementConstraints"] = state.PlacementConstraints
		inputs["proxyConfiguration"] = state.ProxyConfiguration
		inputs["requiresCompatibilities"] = state.RequiresCompatibilities
		inputs["revision"] = state.Revision
		inputs["tags"] = state.Tags
		inputs["taskRoleArn"] = state.TaskRoleArn
		inputs["volumes"] = state.Volumes
	}
	var resource TaskDefinition
	err := ctx.ReadResource("aws:ecs/taskDefinition:TaskDefinition", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *TaskDefinition) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *TaskDefinition) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering TaskDefinition resources.
type TaskDefinitionState struct {
	// Full ARN of the Task Definition (including both `family` and `revision`).
	Arn pulumi.StringInput `pulumi:"arn"`
	// A list of valid [container definitions]
	// (http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a
	// single valid JSON document. Please note that you should only provide values that are part of the container
	// definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters]
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the
	// official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
	ContainerDefinitions pulumi.StringInput `pulumi:"containerDefinitions"`
	// The number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Cpu pulumi.StringInput `pulumi:"cpu"`
	// The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
	ExecutionRoleArn pulumi.StringInput `pulumi:"executionRoleArn"`
	// A unique name for your task definition.
	Family pulumi.StringInput `pulumi:"family"`
	// The IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode pulumi.StringInput `pulumi:"ipcMode"`
	// The amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Memory pulumi.StringInput `pulumi:"memory"`
	// The Docker networking mode to use for the containers in the task. The valid values are `none`, `bridge`, `awsvpc`, and `host`.
	NetworkMode pulumi.StringInput `pulumi:"networkMode"`
	// The process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode pulumi.StringInput `pulumi:"pidMode"`
	// A set of placement constraints rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`.
	PlacementConstraints pulumi.ArrayInput `pulumi:"placementConstraints"`
	// The proxy configuration details for the App Mesh proxy.
	ProxyConfiguration pulumi.AnyInput `pulumi:"proxyConfiguration"`
	// A set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
	RequiresCompatibilities pulumi.ArrayInput `pulumi:"requiresCompatibilities"`
	// The revision of the task in a particular family.
	Revision pulumi.IntInput `pulumi:"revision"`
	// Key-value mapping of resource tags
	Tags pulumi.MapInput `pulumi:"tags"`
	// The ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	TaskRoleArn pulumi.StringInput `pulumi:"taskRoleArn"`
	// A set of volume blocks that containers in your task may use.
	Volumes pulumi.ArrayInput `pulumi:"volumes"`
}

// The set of arguments for constructing a TaskDefinition resource.
type TaskDefinitionArgs struct {
	// A list of valid [container definitions]
	// (http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a
	// single valid JSON document. Please note that you should only provide values that are part of the container
	// definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters]
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the
	// official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
	ContainerDefinitions pulumi.StringInput `pulumi:"containerDefinitions"`
	// The number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Cpu pulumi.StringInput `pulumi:"cpu"`
	// The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
	ExecutionRoleArn pulumi.StringInput `pulumi:"executionRoleArn"`
	// A unique name for your task definition.
	Family pulumi.StringInput `pulumi:"family"`
	// The IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
	IpcMode pulumi.StringInput `pulumi:"ipcMode"`
	// The amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
	Memory pulumi.StringInput `pulumi:"memory"`
	// The Docker networking mode to use for the containers in the task. The valid values are `none`, `bridge`, `awsvpc`, and `host`.
	NetworkMode pulumi.StringInput `pulumi:"networkMode"`
	// The process namespace to use for the containers in the task. The valid values are `host` and `task`.
	PidMode pulumi.StringInput `pulumi:"pidMode"`
	// A set of placement constraints rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`.
	PlacementConstraints pulumi.ArrayInput `pulumi:"placementConstraints"`
	// The proxy configuration details for the App Mesh proxy.
	ProxyConfiguration pulumi.AnyInput `pulumi:"proxyConfiguration"`
	// A set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
	RequiresCompatibilities pulumi.ArrayInput `pulumi:"requiresCompatibilities"`
	// Key-value mapping of resource tags
	Tags pulumi.MapInput `pulumi:"tags"`
	// The ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
	TaskRoleArn pulumi.StringInput `pulumi:"taskRoleArn"`
	// A set of volume blocks that containers in your task may use.
	Volumes pulumi.ArrayInput `pulumi:"volumes"`
}
