// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an ECS cluster.
// 
// ## setting
// 
// The `setting` configuration block supports the following:
// 
// * `name` - (Required) Name of the setting to manage. Valid values: `containerInsights`.
// * `value` -  (Required) The value to assign to the setting. Value values are `enabled` and `disabled`.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ecs_cluster.html.markdown.
type Cluster struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The Amazon Resource Name (ARN) that identifies the cluster
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The name of the cluster (up to 255 letters, numbers, hyphens, and underscores)
	Name pulumi.StringOutput `pulumi:"name"`

	// Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. Defined below.
	Settings pulumi.ArrayOutput `pulumi:"settings"`

	// Key-value mapping of resource tags
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["name"] = args.Name
		inputs["settings"] = args.Settings
		inputs["tags"] = args.Tags
	}
	var resource Cluster
	err := ctx.RegisterResource("aws:ecs/cluster:Cluster", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClusterState, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["name"] = state.Name
		inputs["settings"] = state.Settings
		inputs["tags"] = state.Tags
	}
	var resource Cluster
	err := ctx.ReadResource("aws:ecs/cluster:Cluster", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Cluster) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Cluster) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Cluster resources.
type ClusterState struct {
	// The Amazon Resource Name (ARN) that identifies the cluster
	Arn pulumi.StringInput `pulumi:"arn"`
	// The name of the cluster (up to 255 letters, numbers, hyphens, and underscores)
	Name pulumi.StringInput `pulumi:"name"`
	// Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. Defined below.
	Settings pulumi.ArrayInput `pulumi:"settings"`
	// Key-value mapping of resource tags
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The name of the cluster (up to 255 letters, numbers, hyphens, and underscores)
	Name pulumi.StringInput `pulumi:"name"`
	// Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. Defined below.
	Settings pulumi.ArrayInput `pulumi:"settings"`
	// Key-value mapping of resource tags
	Tags pulumi.MapInput `pulumi:"tags"`
}
