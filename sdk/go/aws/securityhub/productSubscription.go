// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package securityhub

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Subscribes to a Security Hub product.
// 
// > **NOTE:** This AWS service is in Preview and may change before General Availability release. Backwards compatibility is not guaranteed between AWS Provider releases.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/securityhub_product_subscription.html.markdown.
type ProductSubscription struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ARN of a resource that represents your subscription to the product that generates the findings that you want to import into Security Hub.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The ARN of the product that generates findings that you want to import into Security Hub - see below.
	ProductArn pulumi.StringOutput `pulumi:"productArn"`
}

// NewProductSubscription registers a new resource with the given unique name, arguments, and options.
func NewProductSubscription(ctx *pulumi.Context,
	name string, args *ProductSubscriptionArgs, opts ...pulumi.ResourceOpt) (*ProductSubscription, error) {
	if args == nil || args.ProductArn == nil {
		return nil, errors.New("missing required argument 'ProductArn'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["productArn"] = args.ProductArn
	}
	var resource ProductSubscription
	err := ctx.RegisterResource("aws:securityhub/productSubscription:ProductSubscription", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProductSubscription gets an existing ProductSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProductSubscription(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProductSubscriptionState, opts ...pulumi.ResourceOpt) (*ProductSubscription, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["productArn"] = state.ProductArn
	}
	var resource ProductSubscription
	err := ctx.ReadResource("aws:securityhub/productSubscription:ProductSubscription", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *ProductSubscription) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *ProductSubscription) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering ProductSubscription resources.
type ProductSubscriptionState struct {
	// The ARN of a resource that represents your subscription to the product that generates the findings that you want to import into Security Hub.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The ARN of the product that generates findings that you want to import into Security Hub - see below.
	ProductArn pulumi.StringInput `pulumi:"productArn"`
}

// The set of arguments for constructing a ProductSubscription resource.
type ProductSubscriptionArgs struct {
	// The ARN of the product that generates findings that you want to import into Security Hub - see below.
	ProductArn pulumi.StringInput `pulumi:"productArn"`
}
