// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2clientvpn

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides network associations for AWS Client VPN endpoints. For more information on usage, please see the 
// [AWS Client VPN Administrator's Guide](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/what-is.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ec2_client_vpn_network_association.html.markdown.
type NetworkAssociation struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId pulumi.StringOutput `pulumi:"clientVpnEndpointId"`

	// The IDs of the security groups applied to the target network association.
	SecurityGroups pulumi.ArrayOutput `pulumi:"securityGroups"`

	// The current state of the target network association.
	Status pulumi.StringOutput `pulumi:"status"`

	// The ID of the subnet to associate with the Client VPN endpoint.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`

	// The ID of the VPC in which the target network (subnet) is located. 
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewNetworkAssociation registers a new resource with the given unique name, arguments, and options.
func NewNetworkAssociation(ctx *pulumi.Context,
	name string, args *NetworkAssociationArgs, opts ...pulumi.ResourceOpt) (*NetworkAssociation, error) {
	if args == nil || args.ClientVpnEndpointId == nil {
		return nil, errors.New("missing required argument 'ClientVpnEndpointId'")
	}
	if args == nil || args.SubnetId == nil {
		return nil, errors.New("missing required argument 'SubnetId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["clientVpnEndpointId"] = args.ClientVpnEndpointId
		inputs["subnetId"] = args.SubnetId
	}
	var resource NetworkAssociation
	err := ctx.RegisterResource("aws:ec2clientvpn/networkAssociation:NetworkAssociation", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAssociation gets an existing NetworkAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAssociation(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NetworkAssociationState, opts ...pulumi.ResourceOpt) (*NetworkAssociation, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["clientVpnEndpointId"] = state.ClientVpnEndpointId
		inputs["securityGroups"] = state.SecurityGroups
		inputs["status"] = state.Status
		inputs["subnetId"] = state.SubnetId
		inputs["vpcId"] = state.VpcId
	}
	var resource NetworkAssociation
	err := ctx.ReadResource("aws:ec2clientvpn/networkAssociation:NetworkAssociation", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *NetworkAssociation) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *NetworkAssociation) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering NetworkAssociation resources.
type NetworkAssociationState struct {
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId pulumi.StringInput `pulumi:"clientVpnEndpointId"`
	// The IDs of the security groups applied to the target network association.
	SecurityGroups pulumi.ArrayInput `pulumi:"securityGroups"`
	// The current state of the target network association.
	Status pulumi.StringInput `pulumi:"status"`
	// The ID of the subnet to associate with the Client VPN endpoint.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The ID of the VPC in which the target network (subnet) is located. 
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

// The set of arguments for constructing a NetworkAssociation resource.
type NetworkAssociationArgs struct {
	// The ID of the Client VPN endpoint.
	ClientVpnEndpointId pulumi.StringInput `pulumi:"clientVpnEndpointId"`
	// The ID of the subnet to associate with the Client VPN endpoint.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}
