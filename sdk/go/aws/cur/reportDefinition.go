// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cur

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages Cost and Usage Report Definitions.
// 
// > *NOTE:* The AWS Cost and Usage Report service is only available in `us-east-1` currently.
// 
// > *NOTE:* If AWS Organizations is enabled, only the master account can use this resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cur_report_definition.html.markdown.
type ReportDefinition struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// A list of additional artifacts. Valid values are: REDSHIFT, QUICKSIGHT.
	AdditionalArtifacts pulumi.ArrayOutput `pulumi:"additionalArtifacts"`

	// A list of schema elements. Valid values are: RESOURCES.
	AdditionalSchemaElements pulumi.ArrayOutput `pulumi:"additionalSchemaElements"`

	// Compression format for report. Valid values are: GZIP, ZIP.
	Compression pulumi.StringOutput `pulumi:"compression"`

	// Format for report. Valid values are: textORcsv.
	Format pulumi.StringOutput `pulumi:"format"`

	// Unique name for the report. Must start with a number/letter and is case sensitive. Limited to 256 characters.
	ReportName pulumi.StringOutput `pulumi:"reportName"`

	// Name of the existing S3 bucket to hold generated reports.
	S3Bucket pulumi.StringOutput `pulumi:"s3Bucket"`

	// Report path prefix. Limited to 256 characters.
	S3Prefix pulumi.StringOutput `pulumi:"s3Prefix"`

	// Region of the existing S3 bucket to hold generated reports.
	S3Region pulumi.StringOutput `pulumi:"s3Region"`

	// The frequency on which report data are measured and displayed.  Valid values are: HOURLY, DAILY.
	TimeUnit pulumi.StringOutput `pulumi:"timeUnit"`
}

// NewReportDefinition registers a new resource with the given unique name, arguments, and options.
func NewReportDefinition(ctx *pulumi.Context,
	name string, args *ReportDefinitionArgs, opts ...pulumi.ResourceOpt) (*ReportDefinition, error) {
	if args == nil || args.AdditionalSchemaElements == nil {
		return nil, errors.New("missing required argument 'AdditionalSchemaElements'")
	}
	if args == nil || args.Compression == nil {
		return nil, errors.New("missing required argument 'Compression'")
	}
	if args == nil || args.Format == nil {
		return nil, errors.New("missing required argument 'Format'")
	}
	if args == nil || args.ReportName == nil {
		return nil, errors.New("missing required argument 'ReportName'")
	}
	if args == nil || args.S3Bucket == nil {
		return nil, errors.New("missing required argument 'S3Bucket'")
	}
	if args == nil || args.S3Region == nil {
		return nil, errors.New("missing required argument 'S3Region'")
	}
	if args == nil || args.TimeUnit == nil {
		return nil, errors.New("missing required argument 'TimeUnit'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["additionalArtifacts"] = args.AdditionalArtifacts
		inputs["additionalSchemaElements"] = args.AdditionalSchemaElements
		inputs["compression"] = args.Compression
		inputs["format"] = args.Format
		inputs["reportName"] = args.ReportName
		inputs["s3Bucket"] = args.S3Bucket
		inputs["s3Prefix"] = args.S3Prefix
		inputs["s3Region"] = args.S3Region
		inputs["timeUnit"] = args.TimeUnit
	}
	var resource ReportDefinition
	err := ctx.RegisterResource("aws:cur/reportDefinition:ReportDefinition", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReportDefinition gets an existing ReportDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReportDefinition(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ReportDefinitionState, opts ...pulumi.ResourceOpt) (*ReportDefinition, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["additionalArtifacts"] = state.AdditionalArtifacts
		inputs["additionalSchemaElements"] = state.AdditionalSchemaElements
		inputs["compression"] = state.Compression
		inputs["format"] = state.Format
		inputs["reportName"] = state.ReportName
		inputs["s3Bucket"] = state.S3Bucket
		inputs["s3Prefix"] = state.S3Prefix
		inputs["s3Region"] = state.S3Region
		inputs["timeUnit"] = state.TimeUnit
	}
	var resource ReportDefinition
	err := ctx.ReadResource("aws:cur/reportDefinition:ReportDefinition", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *ReportDefinition) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *ReportDefinition) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering ReportDefinition resources.
type ReportDefinitionState struct {
	// A list of additional artifacts. Valid values are: REDSHIFT, QUICKSIGHT.
	AdditionalArtifacts pulumi.ArrayInput `pulumi:"additionalArtifacts"`
	// A list of schema elements. Valid values are: RESOURCES.
	AdditionalSchemaElements pulumi.ArrayInput `pulumi:"additionalSchemaElements"`
	// Compression format for report. Valid values are: GZIP, ZIP.
	Compression pulumi.StringInput `pulumi:"compression"`
	// Format for report. Valid values are: textORcsv.
	Format pulumi.StringInput `pulumi:"format"`
	// Unique name for the report. Must start with a number/letter and is case sensitive. Limited to 256 characters.
	ReportName pulumi.StringInput `pulumi:"reportName"`
	// Name of the existing S3 bucket to hold generated reports.
	S3Bucket pulumi.StringInput `pulumi:"s3Bucket"`
	// Report path prefix. Limited to 256 characters.
	S3Prefix pulumi.StringInput `pulumi:"s3Prefix"`
	// Region of the existing S3 bucket to hold generated reports.
	S3Region pulumi.StringInput `pulumi:"s3Region"`
	// The frequency on which report data are measured and displayed.  Valid values are: HOURLY, DAILY.
	TimeUnit pulumi.StringInput `pulumi:"timeUnit"`
}

// The set of arguments for constructing a ReportDefinition resource.
type ReportDefinitionArgs struct {
	// A list of additional artifacts. Valid values are: REDSHIFT, QUICKSIGHT.
	AdditionalArtifacts pulumi.ArrayInput `pulumi:"additionalArtifacts"`
	// A list of schema elements. Valid values are: RESOURCES.
	AdditionalSchemaElements pulumi.ArrayInput `pulumi:"additionalSchemaElements"`
	// Compression format for report. Valid values are: GZIP, ZIP.
	Compression pulumi.StringInput `pulumi:"compression"`
	// Format for report. Valid values are: textORcsv.
	Format pulumi.StringInput `pulumi:"format"`
	// Unique name for the report. Must start with a number/letter and is case sensitive. Limited to 256 characters.
	ReportName pulumi.StringInput `pulumi:"reportName"`
	// Name of the existing S3 bucket to hold generated reports.
	S3Bucket pulumi.StringInput `pulumi:"s3Bucket"`
	// Report path prefix. Limited to 256 characters.
	S3Prefix pulumi.StringInput `pulumi:"s3Prefix"`
	// Region of the existing S3 bucket to hold generated reports.
	S3Region pulumi.StringInput `pulumi:"s3Region"`
	// The frequency on which report data are measured and displayed.  Valid values are: HOURLY, DAILY.
	TimeUnit pulumi.StringInput `pulumi:"timeUnit"`
}
