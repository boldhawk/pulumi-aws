// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AWS Backup plan resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/backup_plan.html.markdown.
type Plan struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ARN of the backup plan.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// The display name of a backup plan.
	Name pulumi.StringOutput `pulumi:"name"`

	// A rule object that specifies a scheduled task that is used to back up a selection of resources.
	Rules pulumi.ArrayOutput `pulumi:"rules"`

	// Metadata that you can assign to help organize the plans you create.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Unique, randomly generated, Unicode, UTF-8 encoded string that serves as the version ID of the backup plan.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewPlan registers a new resource with the given unique name, arguments, and options.
func NewPlan(ctx *pulumi.Context,
	name string, args *PlanArgs, opts ...pulumi.ResourceOpt) (*Plan, error) {
	if args == nil || args.Rules == nil {
		return nil, errors.New("missing required argument 'Rules'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["name"] = args.Name
		inputs["rules"] = args.Rules
		inputs["tags"] = args.Tags
	}
	var resource Plan
	err := ctx.RegisterResource("aws:backup/plan:Plan", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlan gets an existing Plan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlan(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PlanState, opts ...pulumi.ResourceOpt) (*Plan, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["name"] = state.Name
		inputs["rules"] = state.Rules
		inputs["tags"] = state.Tags
		inputs["version"] = state.Version
	}
	var resource Plan
	err := ctx.ReadResource("aws:backup/plan:Plan", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Plan) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Plan) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Plan resources.
type PlanState struct {
	// The ARN of the backup plan.
	Arn pulumi.StringInput `pulumi:"arn"`
	// The display name of a backup plan.
	Name pulumi.StringInput `pulumi:"name"`
	// A rule object that specifies a scheduled task that is used to back up a selection of resources.
	Rules pulumi.ArrayInput `pulumi:"rules"`
	// Metadata that you can assign to help organize the plans you create.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Unique, randomly generated, Unicode, UTF-8 encoded string that serves as the version ID of the backup plan.
	Version pulumi.StringInput `pulumi:"version"`
}

// The set of arguments for constructing a Plan resource.
type PlanArgs struct {
	// The display name of a backup plan.
	Name pulumi.StringInput `pulumi:"name"`
	// A rule object that specifies a scheduled task that is used to back up a selection of resources.
	Rules pulumi.ArrayInput `pulumi:"rules"`
	// Metadata that you can assign to help organize the plans you create.
	Tags pulumi.MapInput `pulumi:"tags"`
}
