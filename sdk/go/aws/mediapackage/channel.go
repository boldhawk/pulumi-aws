// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mediapackage

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AWS Elemental MediaPackage Channel.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/media_package_channel.html.markdown.
type Channel struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ARN of the channel
	Arn pulumi.StringOutput `pulumi:"arn"`

	// A unique identifier describing the channel
	ChannelId pulumi.StringOutput `pulumi:"channelId"`

	// A description of the channel
	Description pulumi.StringOutput `pulumi:"description"`

	// A single item list of HLS ingest information
	HlsIngests pulumi.ArrayOutput `pulumi:"hlsIngests"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewChannel registers a new resource with the given unique name, arguments, and options.
func NewChannel(ctx *pulumi.Context,
	name string, args *ChannelArgs, opts ...pulumi.ResourceOpt) (*Channel, error) {
	if args == nil || args.ChannelId == nil {
		return nil, errors.New("missing required argument 'ChannelId'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["description"] = pulumi.Any("Managed by Pulumi")
	if args != nil {
		inputs["channelId"] = args.ChannelId
		inputs["description"] = args.Description
		inputs["tags"] = args.Tags
	}
	var resource Channel
	err := ctx.RegisterResource("aws:mediapackage/channel:Channel", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannel gets an existing Channel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannel(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ChannelState, opts ...pulumi.ResourceOpt) (*Channel, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["channelId"] = state.ChannelId
		inputs["description"] = state.Description
		inputs["hlsIngests"] = state.HlsIngests
		inputs["tags"] = state.Tags
	}
	var resource Channel
	err := ctx.ReadResource("aws:mediapackage/channel:Channel", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Channel) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Channel) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Channel resources.
type ChannelState struct {
	// The ARN of the channel
	Arn pulumi.StringInput `pulumi:"arn"`
	// A unique identifier describing the channel
	ChannelId pulumi.StringInput `pulumi:"channelId"`
	// A description of the channel
	Description pulumi.StringInput `pulumi:"description"`
	// A single item list of HLS ingest information
	HlsIngests pulumi.ArrayInput `pulumi:"hlsIngests"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Channel resource.
type ChannelArgs struct {
	// A unique identifier describing the channel
	ChannelId pulumi.StringInput `pulumi:"channelId"`
	// A description of the channel
	Description pulumi.StringInput `pulumi:"description"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
