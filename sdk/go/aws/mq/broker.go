// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mq

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an MQ Broker Resource. This resources also manages users for the broker.
// 
// For more information on Amazon MQ, see [Amazon MQ documentation](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/welcome.html).
// 
// Changes to an MQ Broker can occur when you change a
// parameter, such as `configuration` or `user`, and are reflected in the next maintenance
// window. Because of this, this provider may report a difference in its planning
// phase because a modification has not yet taken place. You can use the
// `applyImmediately` flag to instruct the service to apply the change immediately
// (see documentation below).
// 
// > **Note:** using `applyImmediately` can result in a
// brief downtime as the broker reboots.
// 
// > **Note:** All arguments including the username and password will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/mq_broker.html.markdown.
type Broker struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Specifies whether any broker modifications
	// are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumi.BoolOutput `pulumi:"applyImmediately"`

	// The ARN of the broker.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// Enables automatic upgrades to new minor versions for brokers, as Apache releases the versions.
	AutoMinorVersionUpgrade pulumi.BoolOutput `pulumi:"autoMinorVersionUpgrade"`

	// The name of the broker.
	BrokerName pulumi.StringOutput `pulumi:"brokerName"`

	// Configuration of the broker. See below.
	Configuration pulumi.AnyOutput `pulumi:"configuration"`

	// The deployment mode of the broker. Supported: `SINGLE_INSTANCE` and `ACTIVE_STANDBY_MULTI_AZ`. Defaults to `SINGLE_INSTANCE`.
	DeploymentMode pulumi.StringOutput `pulumi:"deploymentMode"`

	// Configuration block containing encryption options. See below.
	EncryptionOptions pulumi.AnyOutput `pulumi:"encryptionOptions"`

	// The type of broker engine. Currently, Amazon MQ supports only `ActiveMQ`.
	EngineType pulumi.StringOutput `pulumi:"engineType"`

	// The version of the broker engine. Currently, See the [AmazonMQ Broker Engine docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html) for supported versions.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`

	// The broker's instance type. e.g. `mq.t2.micro` or `mq.m4.large`
	HostInstanceType pulumi.StringOutput `pulumi:"hostInstanceType"`

	// A list of information about allocated brokers (both active & standby).
	// * `instances.0.console_url` - The URL of the broker's [ActiveMQ Web Console](http://activemq.apache.org/web-console.html).
	// * `instances.0.ip_address` - The IP Address of the broker.
	// * `instances.0.endpoints` - The broker's wire-level protocol endpoints in the following order & format referenceable e.g. as `instances.0.endpoints.0` (SSL):
	// * `ssl://broker-id.mq.us-west-2.amazonaws.com:61617`
	// * `amqp+ssl://broker-id.mq.us-west-2.amazonaws.com:5671`
	// * `stomp+ssl://broker-id.mq.us-west-2.amazonaws.com:61614`
	// * `mqtt+ssl://broker-id.mq.us-west-2.amazonaws.com:8883`
	// * `wss://broker-id.mq.us-west-2.amazonaws.com:61619`
	Instances pulumi.ArrayOutput `pulumi:"instances"`

	// Logging configuration of the broker. See below.
	Logs pulumi.AnyOutput `pulumi:"logs"`

	// Maintenance window start time. See below.
	MaintenanceWindowStartTime pulumi.AnyOutput `pulumi:"maintenanceWindowStartTime"`

	// Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
	PubliclyAccessible pulumi.BoolOutput `pulumi:"publiclyAccessible"`

	// The list of security group IDs assigned to the broker.
	SecurityGroups pulumi.ArrayOutput `pulumi:"securityGroups"`

	// The list of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires two subnets.
	SubnetIds pulumi.ArrayOutput `pulumi:"subnetIds"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The list of all ActiveMQ usernames for the specified broker. See below.
	Users pulumi.ArrayOutput `pulumi:"users"`
}

// NewBroker registers a new resource with the given unique name, arguments, and options.
func NewBroker(ctx *pulumi.Context,
	name string, args *BrokerArgs, opts ...pulumi.ResourceOpt) (*Broker, error) {
	if args == nil || args.BrokerName == nil {
		return nil, errors.New("missing required argument 'BrokerName'")
	}
	if args == nil || args.EngineType == nil {
		return nil, errors.New("missing required argument 'EngineType'")
	}
	if args == nil || args.EngineVersion == nil {
		return nil, errors.New("missing required argument 'EngineVersion'")
	}
	if args == nil || args.HostInstanceType == nil {
		return nil, errors.New("missing required argument 'HostInstanceType'")
	}
	if args == nil || args.SecurityGroups == nil {
		return nil, errors.New("missing required argument 'SecurityGroups'")
	}
	if args == nil || args.Users == nil {
		return nil, errors.New("missing required argument 'Users'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["applyImmediately"] = args.ApplyImmediately
		inputs["autoMinorVersionUpgrade"] = args.AutoMinorVersionUpgrade
		inputs["brokerName"] = args.BrokerName
		inputs["configuration"] = args.Configuration
		inputs["deploymentMode"] = args.DeploymentMode
		inputs["encryptionOptions"] = args.EncryptionOptions
		inputs["engineType"] = args.EngineType
		inputs["engineVersion"] = args.EngineVersion
		inputs["hostInstanceType"] = args.HostInstanceType
		inputs["logs"] = args.Logs
		inputs["maintenanceWindowStartTime"] = args.MaintenanceWindowStartTime
		inputs["publiclyAccessible"] = args.PubliclyAccessible
		inputs["securityGroups"] = args.SecurityGroups
		inputs["subnetIds"] = args.SubnetIds
		inputs["tags"] = args.Tags
		inputs["users"] = args.Users
	}
	var resource Broker
	err := ctx.RegisterResource("aws:mq/broker:Broker", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBroker gets an existing Broker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBroker(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BrokerState, opts ...pulumi.ResourceOpt) (*Broker, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["applyImmediately"] = state.ApplyImmediately
		inputs["arn"] = state.Arn
		inputs["autoMinorVersionUpgrade"] = state.AutoMinorVersionUpgrade
		inputs["brokerName"] = state.BrokerName
		inputs["configuration"] = state.Configuration
		inputs["deploymentMode"] = state.DeploymentMode
		inputs["encryptionOptions"] = state.EncryptionOptions
		inputs["engineType"] = state.EngineType
		inputs["engineVersion"] = state.EngineVersion
		inputs["hostInstanceType"] = state.HostInstanceType
		inputs["instances"] = state.Instances
		inputs["logs"] = state.Logs
		inputs["maintenanceWindowStartTime"] = state.MaintenanceWindowStartTime
		inputs["publiclyAccessible"] = state.PubliclyAccessible
		inputs["securityGroups"] = state.SecurityGroups
		inputs["subnetIds"] = state.SubnetIds
		inputs["tags"] = state.Tags
		inputs["users"] = state.Users
	}
	var resource Broker
	err := ctx.ReadResource("aws:mq/broker:Broker", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Broker) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Broker) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Broker resources.
type BrokerState struct {
	// Specifies whether any broker modifications
	// are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumi.BoolInput `pulumi:"applyImmediately"`
	// The ARN of the broker.
	Arn pulumi.StringInput `pulumi:"arn"`
	// Enables automatic upgrades to new minor versions for brokers, as Apache releases the versions.
	AutoMinorVersionUpgrade pulumi.BoolInput `pulumi:"autoMinorVersionUpgrade"`
	// The name of the broker.
	BrokerName pulumi.StringInput `pulumi:"brokerName"`
	// Configuration of the broker. See below.
	Configuration pulumi.AnyInput `pulumi:"configuration"`
	// The deployment mode of the broker. Supported: `SINGLE_INSTANCE` and `ACTIVE_STANDBY_MULTI_AZ`. Defaults to `SINGLE_INSTANCE`.
	DeploymentMode pulumi.StringInput `pulumi:"deploymentMode"`
	// Configuration block containing encryption options. See below.
	EncryptionOptions pulumi.AnyInput `pulumi:"encryptionOptions"`
	// The type of broker engine. Currently, Amazon MQ supports only `ActiveMQ`.
	EngineType pulumi.StringInput `pulumi:"engineType"`
	// The version of the broker engine. Currently, See the [AmazonMQ Broker Engine docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html) for supported versions.
	EngineVersion pulumi.StringInput `pulumi:"engineVersion"`
	// The broker's instance type. e.g. `mq.t2.micro` or `mq.m4.large`
	HostInstanceType pulumi.StringInput `pulumi:"hostInstanceType"`
	// A list of information about allocated brokers (both active & standby).
	// * `instances.0.console_url` - The URL of the broker's [ActiveMQ Web Console](http://activemq.apache.org/web-console.html).
	// * `instances.0.ip_address` - The IP Address of the broker.
	// * `instances.0.endpoints` - The broker's wire-level protocol endpoints in the following order & format referenceable e.g. as `instances.0.endpoints.0` (SSL):
	// * `ssl://broker-id.mq.us-west-2.amazonaws.com:61617`
	// * `amqp+ssl://broker-id.mq.us-west-2.amazonaws.com:5671`
	// * `stomp+ssl://broker-id.mq.us-west-2.amazonaws.com:61614`
	// * `mqtt+ssl://broker-id.mq.us-west-2.amazonaws.com:8883`
	// * `wss://broker-id.mq.us-west-2.amazonaws.com:61619`
	Instances pulumi.ArrayInput `pulumi:"instances"`
	// Logging configuration of the broker. See below.
	Logs pulumi.AnyInput `pulumi:"logs"`
	// Maintenance window start time. See below.
	MaintenanceWindowStartTime pulumi.AnyInput `pulumi:"maintenanceWindowStartTime"`
	// Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
	PubliclyAccessible pulumi.BoolInput `pulumi:"publiclyAccessible"`
	// The list of security group IDs assigned to the broker.
	SecurityGroups pulumi.ArrayInput `pulumi:"securityGroups"`
	// The list of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires two subnets.
	SubnetIds pulumi.ArrayInput `pulumi:"subnetIds"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The list of all ActiveMQ usernames for the specified broker. See below.
	Users pulumi.ArrayInput `pulumi:"users"`
}

// The set of arguments for constructing a Broker resource.
type BrokerArgs struct {
	// Specifies whether any broker modifications
	// are applied immediately, or during the next maintenance window. Default is `false`.
	ApplyImmediately pulumi.BoolInput `pulumi:"applyImmediately"`
	// Enables automatic upgrades to new minor versions for brokers, as Apache releases the versions.
	AutoMinorVersionUpgrade pulumi.BoolInput `pulumi:"autoMinorVersionUpgrade"`
	// The name of the broker.
	BrokerName pulumi.StringInput `pulumi:"brokerName"`
	// Configuration of the broker. See below.
	Configuration pulumi.AnyInput `pulumi:"configuration"`
	// The deployment mode of the broker. Supported: `SINGLE_INSTANCE` and `ACTIVE_STANDBY_MULTI_AZ`. Defaults to `SINGLE_INSTANCE`.
	DeploymentMode pulumi.StringInput `pulumi:"deploymentMode"`
	// Configuration block containing encryption options. See below.
	EncryptionOptions pulumi.AnyInput `pulumi:"encryptionOptions"`
	// The type of broker engine. Currently, Amazon MQ supports only `ActiveMQ`.
	EngineType pulumi.StringInput `pulumi:"engineType"`
	// The version of the broker engine. Currently, See the [AmazonMQ Broker Engine docs](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html) for supported versions.
	EngineVersion pulumi.StringInput `pulumi:"engineVersion"`
	// The broker's instance type. e.g. `mq.t2.micro` or `mq.m4.large`
	HostInstanceType pulumi.StringInput `pulumi:"hostInstanceType"`
	// Logging configuration of the broker. See below.
	Logs pulumi.AnyInput `pulumi:"logs"`
	// Maintenance window start time. See below.
	MaintenanceWindowStartTime pulumi.AnyInput `pulumi:"maintenanceWindowStartTime"`
	// Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
	PubliclyAccessible pulumi.BoolInput `pulumi:"publiclyAccessible"`
	// The list of security group IDs assigned to the broker.
	SecurityGroups pulumi.ArrayInput `pulumi:"securityGroups"`
	// The list of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires two subnets.
	SubnetIds pulumi.ArrayInput `pulumi:"subnetIds"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The list of all ActiveMQ usernames for the specified broker. See below.
	Users pulumi.ArrayInput `pulumi:"users"`
}
