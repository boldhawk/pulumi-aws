// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Gamelift Fleet resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/gamelift_fleet.html.markdown.
type Fleet struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Fleet ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// ID of the Gamelift Build to be deployed on the fleet.
	BuildId pulumi.StringOutput `pulumi:"buildId"`

	// Human-readable description of the fleet.
	Description pulumi.StringOutput `pulumi:"description"`

	// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. See below.
	Ec2InboundPermissions pulumi.ArrayOutput `pulumi:"ec2InboundPermissions"`

	// Name of an EC2 instance type. e.g. `t2.micro`
	Ec2InstanceType pulumi.StringOutput `pulumi:"ec2InstanceType"`

	LogPaths pulumi.ArrayOutput `pulumi:"logPaths"`

	// List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to `default`.
	MetricGroups pulumi.ArrayOutput `pulumi:"metricGroups"`

	// The name of the fleet.
	Name pulumi.StringOutput `pulumi:"name"`

	// Game session protection policy to apply to all instances in this fleet. e.g. `FullProtection`. Defaults to `NoProtection`.
	NewGameSessionProtectionPolicy pulumi.StringOutput `pulumi:"newGameSessionProtectionPolicy"`

	// Operating system of the fleet's computing resources.
	OperatingSystem pulumi.StringOutput `pulumi:"operatingSystem"`

	// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
	ResourceCreationLimitPolicy pulumi.AnyOutput `pulumi:"resourceCreationLimitPolicy"`

	// Instructions for launching server processes on each instance in the fleet. See below.
	RuntimeConfiguration pulumi.AnyOutput `pulumi:"runtimeConfiguration"`
}

// NewFleet registers a new resource with the given unique name, arguments, and options.
func NewFleet(ctx *pulumi.Context,
	name string, args *FleetArgs, opts ...pulumi.ResourceOpt) (*Fleet, error) {
	if args == nil || args.BuildId == nil {
		return nil, errors.New("missing required argument 'BuildId'")
	}
	if args == nil || args.Ec2InstanceType == nil {
		return nil, errors.New("missing required argument 'Ec2InstanceType'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["buildId"] = args.BuildId
		inputs["description"] = args.Description
		inputs["ec2InboundPermissions"] = args.Ec2InboundPermissions
		inputs["ec2InstanceType"] = args.Ec2InstanceType
		inputs["metricGroups"] = args.MetricGroups
		inputs["name"] = args.Name
		inputs["newGameSessionProtectionPolicy"] = args.NewGameSessionProtectionPolicy
		inputs["resourceCreationLimitPolicy"] = args.ResourceCreationLimitPolicy
		inputs["runtimeConfiguration"] = args.RuntimeConfiguration
	}
	var resource Fleet
	err := ctx.RegisterResource("aws:gamelift/fleet:Fleet", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleet gets an existing Fleet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleet(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FleetState, opts ...pulumi.ResourceOpt) (*Fleet, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["buildId"] = state.BuildId
		inputs["description"] = state.Description
		inputs["ec2InboundPermissions"] = state.Ec2InboundPermissions
		inputs["ec2InstanceType"] = state.Ec2InstanceType
		inputs["logPaths"] = state.LogPaths
		inputs["metricGroups"] = state.MetricGroups
		inputs["name"] = state.Name
		inputs["newGameSessionProtectionPolicy"] = state.NewGameSessionProtectionPolicy
		inputs["operatingSystem"] = state.OperatingSystem
		inputs["resourceCreationLimitPolicy"] = state.ResourceCreationLimitPolicy
		inputs["runtimeConfiguration"] = state.RuntimeConfiguration
	}
	var resource Fleet
	err := ctx.ReadResource("aws:gamelift/fleet:Fleet", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Fleet) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Fleet) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Fleet resources.
type FleetState struct {
	// Fleet ARN.
	Arn pulumi.StringInput `pulumi:"arn"`
	// ID of the Gamelift Build to be deployed on the fleet.
	BuildId pulumi.StringInput `pulumi:"buildId"`
	// Human-readable description of the fleet.
	Description pulumi.StringInput `pulumi:"description"`
	// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. See below.
	Ec2InboundPermissions pulumi.ArrayInput `pulumi:"ec2InboundPermissions"`
	// Name of an EC2 instance type. e.g. `t2.micro`
	Ec2InstanceType pulumi.StringInput `pulumi:"ec2InstanceType"`
	LogPaths pulumi.ArrayInput `pulumi:"logPaths"`
	// List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to `default`.
	MetricGroups pulumi.ArrayInput `pulumi:"metricGroups"`
	// The name of the fleet.
	Name pulumi.StringInput `pulumi:"name"`
	// Game session protection policy to apply to all instances in this fleet. e.g. `FullProtection`. Defaults to `NoProtection`.
	NewGameSessionProtectionPolicy pulumi.StringInput `pulumi:"newGameSessionProtectionPolicy"`
	// Operating system of the fleet's computing resources.
	OperatingSystem pulumi.StringInput `pulumi:"operatingSystem"`
	// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
	ResourceCreationLimitPolicy pulumi.AnyInput `pulumi:"resourceCreationLimitPolicy"`
	// Instructions for launching server processes on each instance in the fleet. See below.
	RuntimeConfiguration pulumi.AnyInput `pulumi:"runtimeConfiguration"`
}

// The set of arguments for constructing a Fleet resource.
type FleetArgs struct {
	// ID of the Gamelift Build to be deployed on the fleet.
	BuildId pulumi.StringInput `pulumi:"buildId"`
	// Human-readable description of the fleet.
	Description pulumi.StringInput `pulumi:"description"`
	// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. See below.
	Ec2InboundPermissions pulumi.ArrayInput `pulumi:"ec2InboundPermissions"`
	// Name of an EC2 instance type. e.g. `t2.micro`
	Ec2InstanceType pulumi.StringInput `pulumi:"ec2InstanceType"`
	// List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to `default`.
	MetricGroups pulumi.ArrayInput `pulumi:"metricGroups"`
	// The name of the fleet.
	Name pulumi.StringInput `pulumi:"name"`
	// Game session protection policy to apply to all instances in this fleet. e.g. `FullProtection`. Defaults to `NoProtection`.
	NewGameSessionProtectionPolicy pulumi.StringInput `pulumi:"newGameSessionProtectionPolicy"`
	// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
	ResourceCreationLimitPolicy pulumi.AnyInput `pulumi:"resourceCreationLimitPolicy"`
	// Instructions for launching server processes on each instance in the fleet. See below.
	RuntimeConfiguration pulumi.AnyInput `pulumi:"runtimeConfiguration"`
}
