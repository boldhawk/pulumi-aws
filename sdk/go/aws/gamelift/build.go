// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Gamelift Build resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/gamelift_build.html.markdown.
type Build struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Name of the build
	Name pulumi.StringOutput `pulumi:"name"`

	// Operating system that the game server binaries are built to run on. e.g. `WINDOWS_2012` or `AMAZON_LINUX`.
	OperatingSystem pulumi.StringOutput `pulumi:"operatingSystem"`

	// Information indicating where your game build files are stored. See below.
	StorageLocation pulumi.AnyOutput `pulumi:"storageLocation"`

	// Version that is associated with this build.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewBuild registers a new resource with the given unique name, arguments, and options.
func NewBuild(ctx *pulumi.Context,
	name string, args *BuildArgs, opts ...pulumi.ResourceOpt) (*Build, error) {
	if args == nil || args.OperatingSystem == nil {
		return nil, errors.New("missing required argument 'OperatingSystem'")
	}
	if args == nil || args.StorageLocation == nil {
		return nil, errors.New("missing required argument 'StorageLocation'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["name"] = args.Name
		inputs["operatingSystem"] = args.OperatingSystem
		inputs["storageLocation"] = args.StorageLocation
		inputs["version"] = args.Version
	}
	var resource Build
	err := ctx.RegisterResource("aws:gamelift/build:Build", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuild gets an existing Build resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuild(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BuildState, opts ...pulumi.ResourceOpt) (*Build, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["name"] = state.Name
		inputs["operatingSystem"] = state.OperatingSystem
		inputs["storageLocation"] = state.StorageLocation
		inputs["version"] = state.Version
	}
	var resource Build
	err := ctx.ReadResource("aws:gamelift/build:Build", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Build) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Build) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Build resources.
type BuildState struct {
	// Name of the build
	Name pulumi.StringInput `pulumi:"name"`
	// Operating system that the game server binaries are built to run on. e.g. `WINDOWS_2012` or `AMAZON_LINUX`.
	OperatingSystem pulumi.StringInput `pulumi:"operatingSystem"`
	// Information indicating where your game build files are stored. See below.
	StorageLocation pulumi.AnyInput `pulumi:"storageLocation"`
	// Version that is associated with this build.
	Version pulumi.StringInput `pulumi:"version"`
}

// The set of arguments for constructing a Build resource.
type BuildArgs struct {
	// Name of the build
	Name pulumi.StringInput `pulumi:"name"`
	// Operating system that the game server binaries are built to run on. e.g. `WINDOWS_2012` or `AMAZON_LINUX`.
	OperatingSystem pulumi.StringInput `pulumi:"operatingSystem"`
	// Information indicating where your game build files are stored. See below.
	StorageLocation pulumi.AnyInput `pulumi:"storageLocation"`
	// Version that is associated with this build.
	Version pulumi.StringInput `pulumi:"version"`
}
