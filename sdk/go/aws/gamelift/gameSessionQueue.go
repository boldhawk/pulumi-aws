// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package gamelift

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Gamelift Game Session Queue resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/gamelift_game_session_queue.html.markdown.
type GameSessionQueue struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Game Session Queue ARN.
	Arn pulumi.StringOutput `pulumi:"arn"`

	// List of fleet/alias ARNs used by session queue for placing game sessions.
	Destinations pulumi.ArrayOutput `pulumi:"destinations"`

	// Name of the session queue.
	Name pulumi.StringOutput `pulumi:"name"`

	// One or more policies used to choose fleet based on player latency. See below.
	PlayerLatencyPolicies pulumi.ArrayOutput `pulumi:"playerLatencyPolicies"`

	// Maximum time a game session request can remain in the queue.
	TimeoutInSeconds pulumi.IntOutput `pulumi:"timeoutInSeconds"`
}

// NewGameSessionQueue registers a new resource with the given unique name, arguments, and options.
func NewGameSessionQueue(ctx *pulumi.Context,
	name string, args *GameSessionQueueArgs, opts ...pulumi.ResourceOpt) (*GameSessionQueue, error) {
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["destinations"] = args.Destinations
		inputs["name"] = args.Name
		inputs["playerLatencyPolicies"] = args.PlayerLatencyPolicies
		inputs["timeoutInSeconds"] = args.TimeoutInSeconds
	}
	var resource GameSessionQueue
	err := ctx.RegisterResource("aws:gamelift/gameSessionQueue:GameSessionQueue", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGameSessionQueue gets an existing GameSessionQueue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGameSessionQueue(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GameSessionQueueState, opts ...pulumi.ResourceOpt) (*GameSessionQueue, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["destinations"] = state.Destinations
		inputs["name"] = state.Name
		inputs["playerLatencyPolicies"] = state.PlayerLatencyPolicies
		inputs["timeoutInSeconds"] = state.TimeoutInSeconds
	}
	var resource GameSessionQueue
	err := ctx.ReadResource("aws:gamelift/gameSessionQueue:GameSessionQueue", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *GameSessionQueue) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *GameSessionQueue) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering GameSessionQueue resources.
type GameSessionQueueState struct {
	// Game Session Queue ARN.
	Arn pulumi.StringInput `pulumi:"arn"`
	// List of fleet/alias ARNs used by session queue for placing game sessions.
	Destinations pulumi.ArrayInput `pulumi:"destinations"`
	// Name of the session queue.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more policies used to choose fleet based on player latency. See below.
	PlayerLatencyPolicies pulumi.ArrayInput `pulumi:"playerLatencyPolicies"`
	// Maximum time a game session request can remain in the queue.
	TimeoutInSeconds pulumi.IntInput `pulumi:"timeoutInSeconds"`
}

// The set of arguments for constructing a GameSessionQueue resource.
type GameSessionQueueArgs struct {
	// List of fleet/alias ARNs used by session queue for placing game sessions.
	Destinations pulumi.ArrayInput `pulumi:"destinations"`
	// Name of the session queue.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more policies used to choose fleet based on player latency. See below.
	PlayerLatencyPolicies pulumi.ArrayInput `pulumi:"playerLatencyPolicies"`
	// Maximum time a game session request can remain in the queue.
	TimeoutInSeconds pulumi.IntInput `pulumi:"timeoutInSeconds"`
}
