// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Model for a API Gateway.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/api_gateway_model.html.markdown.
type Model struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The content type of the model
	ContentType pulumi.StringOutput `pulumi:"contentType"`

	// The description of the model
	Description pulumi.StringOutput `pulumi:"description"`

	// The name of the model
	Name pulumi.StringOutput `pulumi:"name"`

	// The ID of the associated REST API
	RestApi pulumi.StringOutput `pulumi:"restApi"`

	// The schema of the model in a JSON form
	Schema pulumi.StringOutput `pulumi:"schema"`
}

// NewModel registers a new resource with the given unique name, arguments, and options.
func NewModel(ctx *pulumi.Context,
	name string, args *ModelArgs, opts ...pulumi.ResourceOpt) (*Model, error) {
	if args == nil || args.ContentType == nil {
		return nil, errors.New("missing required argument 'ContentType'")
	}
	if args == nil || args.RestApi == nil {
		return nil, errors.New("missing required argument 'RestApi'")
	}
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["contentType"] = args.ContentType
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["restApi"] = args.RestApi
		inputs["schema"] = args.Schema
	}
	var resource Model
	err := ctx.RegisterResource("aws:apigateway/model:Model", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModel gets an existing Model resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModel(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ModelState, opts ...pulumi.ResourceOpt) (*Model, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["contentType"] = state.ContentType
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["restApi"] = state.RestApi
		inputs["schema"] = state.Schema
	}
	var resource Model
	err := ctx.ReadResource("aws:apigateway/model:Model", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Model) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Model) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Model resources.
type ModelState struct {
	// The content type of the model
	ContentType pulumi.StringInput `pulumi:"contentType"`
	// The description of the model
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the model
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the associated REST API
	RestApi pulumi.StringInput `pulumi:"restApi"`
	// The schema of the model in a JSON form
	Schema pulumi.StringInput `pulumi:"schema"`
}

// The set of arguments for constructing a Model resource.
type ModelArgs struct {
	// The content type of the model
	ContentType pulumi.StringInput `pulumi:"contentType"`
	// The description of the model
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the model
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the associated REST API
	RestApi pulumi.StringInput `pulumi:"restApi"`
	// The schema of the model in a JSON form
	Schema pulumi.StringInput `pulumi:"schema"`
}
