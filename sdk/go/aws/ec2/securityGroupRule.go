// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a security group rule resource. Represents a single `ingress` or
// `egress` group rule, which can be added to external Security Groups.
// 
// > **NOTE on Security Groups and Security Group Rules:** This provider currently
// provides both a standalone Security Group Rule resource (a single `ingress` or
// `egress` rule), and a Security Group resource with `ingress` and `egress` rules
// defined in-line. At this time you cannot use a Security Group with in-line rules
// in conjunction with any Security Group Rule resources. Doing so will cause
// a conflict of rule settings and will overwrite rules.
// 
// > **NOTE:** Setting `protocol = "all"` or `protocol = -1` with `fromPort` and `toPort` will result in the EC2 API creating a security group rule with all ports open. This API behavior cannot be controlled by this provider and may generate warnings in the future.
// 
// > **NOTE:** Referencing Security Groups across VPC peering has certain restrictions. More information is available in the [VPC Peering User Guide](https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-security-groups.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/security_group_rule.html.markdown.
type SecurityGroupRule struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// List of CIDR blocks. Cannot be specified with `sourceSecurityGroupId`.
	CidrBlocks pulumi.ArrayOutput `pulumi:"cidrBlocks"`

	// Description of the rule.
	Description pulumi.StringOutput `pulumi:"description"`

	// The start port (or ICMP type number if protocol is "icmp").
	FromPort pulumi.IntOutput `pulumi:"fromPort"`

	// List of IPv6 CIDR blocks.
	Ipv6CidrBlocks pulumi.ArrayOutput `pulumi:"ipv6CidrBlocks"`

	// List of prefix list IDs (for allowing access to VPC endpoints).
	PrefixListIds pulumi.ArrayOutput `pulumi:"prefixListIds"`

	// The protocol. If not icmp, tcp, udp, or all use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
	Protocol pulumi.StringOutput `pulumi:"protocol"`

	// The security group to apply this rule to.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`

	// If true, the security group itself will be added as
	// a source to this ingress rule. Cannot be specified with `sourceSecurityGroupId`.
	Self pulumi.BoolOutput `pulumi:"self"`

	// The security group id to allow access to/from,
	// depending on the `type`. Cannot be specified with `cidrBlocks` and `self`.
	SourceSecurityGroupId pulumi.StringOutput `pulumi:"sourceSecurityGroupId"`

	// The end port (or ICMP code if protocol is "icmp").
	ToPort pulumi.IntOutput `pulumi:"toPort"`

	// The type of rule being created. Valid options are `ingress` (inbound)
	// or `egress` (outbound).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSecurityGroupRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroupRule(ctx *pulumi.Context,
	name string, args *SecurityGroupRuleArgs, opts ...pulumi.ResourceOpt) (*SecurityGroupRule, error) {
	if args == nil || args.FromPort == nil {
		return nil, errors.New("missing required argument 'FromPort'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	if args == nil || args.SecurityGroupId == nil {
		return nil, errors.New("missing required argument 'SecurityGroupId'")
	}
	if args == nil || args.ToPort == nil {
		return nil, errors.New("missing required argument 'ToPort'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["cidrBlocks"] = args.CidrBlocks
		inputs["description"] = args.Description
		inputs["fromPort"] = args.FromPort
		inputs["ipv6CidrBlocks"] = args.Ipv6CidrBlocks
		inputs["prefixListIds"] = args.PrefixListIds
		inputs["protocol"] = args.Protocol
		inputs["securityGroupId"] = args.SecurityGroupId
		inputs["self"] = args.Self
		inputs["sourceSecurityGroupId"] = args.SourceSecurityGroupId
		inputs["toPort"] = args.ToPort
		inputs["type"] = args.Type
	}
	var resource SecurityGroupRule
	err := ctx.RegisterResource("aws:ec2/securityGroupRule:SecurityGroupRule", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroupRule gets an existing SecurityGroupRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroupRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecurityGroupRuleState, opts ...pulumi.ResourceOpt) (*SecurityGroupRule, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["cidrBlocks"] = state.CidrBlocks
		inputs["description"] = state.Description
		inputs["fromPort"] = state.FromPort
		inputs["ipv6CidrBlocks"] = state.Ipv6CidrBlocks
		inputs["prefixListIds"] = state.PrefixListIds
		inputs["protocol"] = state.Protocol
		inputs["securityGroupId"] = state.SecurityGroupId
		inputs["self"] = state.Self
		inputs["sourceSecurityGroupId"] = state.SourceSecurityGroupId
		inputs["toPort"] = state.ToPort
		inputs["type"] = state.Type
	}
	var resource SecurityGroupRule
	err := ctx.ReadResource("aws:ec2/securityGroupRule:SecurityGroupRule", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *SecurityGroupRule) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *SecurityGroupRule) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering SecurityGroupRule resources.
type SecurityGroupRuleState struct {
	// List of CIDR blocks. Cannot be specified with `sourceSecurityGroupId`.
	CidrBlocks pulumi.ArrayInput `pulumi:"cidrBlocks"`
	// Description of the rule.
	Description pulumi.StringInput `pulumi:"description"`
	// The start port (or ICMP type number if protocol is "icmp").
	FromPort pulumi.IntInput `pulumi:"fromPort"`
	// List of IPv6 CIDR blocks.
	Ipv6CidrBlocks pulumi.ArrayInput `pulumi:"ipv6CidrBlocks"`
	// List of prefix list IDs (for allowing access to VPC endpoints).
	PrefixListIds pulumi.ArrayInput `pulumi:"prefixListIds"`
	// The protocol. If not icmp, tcp, udp, or all use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The security group to apply this rule to.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// If true, the security group itself will be added as
	// a source to this ingress rule. Cannot be specified with `sourceSecurityGroupId`.
	Self pulumi.BoolInput `pulumi:"self"`
	// The security group id to allow access to/from,
	// depending on the `type`. Cannot be specified with `cidrBlocks` and `self`.
	SourceSecurityGroupId pulumi.StringInput `pulumi:"sourceSecurityGroupId"`
	// The end port (or ICMP code if protocol is "icmp").
	ToPort pulumi.IntInput `pulumi:"toPort"`
	// The type of rule being created. Valid options are `ingress` (inbound)
	// or `egress` (outbound).
	Type pulumi.StringInput `pulumi:"type"`
}

// The set of arguments for constructing a SecurityGroupRule resource.
type SecurityGroupRuleArgs struct {
	// List of CIDR blocks. Cannot be specified with `sourceSecurityGroupId`.
	CidrBlocks pulumi.ArrayInput `pulumi:"cidrBlocks"`
	// Description of the rule.
	Description pulumi.StringInput `pulumi:"description"`
	// The start port (or ICMP type number if protocol is "icmp").
	FromPort pulumi.IntInput `pulumi:"fromPort"`
	// List of IPv6 CIDR blocks.
	Ipv6CidrBlocks pulumi.ArrayInput `pulumi:"ipv6CidrBlocks"`
	// List of prefix list IDs (for allowing access to VPC endpoints).
	PrefixListIds pulumi.ArrayInput `pulumi:"prefixListIds"`
	// The protocol. If not icmp, tcp, udp, or all use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The security group to apply this rule to.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// If true, the security group itself will be added as
	// a source to this ingress rule. Cannot be specified with `sourceSecurityGroupId`.
	Self pulumi.BoolInput `pulumi:"self"`
	// The security group id to allow access to/from,
	// depending on the `type`. Cannot be specified with `cidrBlocks` and `self`.
	SourceSecurityGroupId pulumi.StringInput `pulumi:"sourceSecurityGroupId"`
	// The end port (or ICMP code if protocol is "icmp").
	ToPort pulumi.IntInput `pulumi:"toPort"`
	// The type of rule being created. Valid options are `ingress` (inbound)
	// or `egress` (outbound).
	Type pulumi.StringInput `pulumi:"type"`
}
