// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage the default AWS Network ACL. VPC Only.
// 
// Each VPC created in AWS comes with a Default Network ACL that can be managed, but not
// destroyed. **This is an advanced resource**, and has special caveats to be aware
// of when using it. Please read this document in its entirety before using this
// resource.
// 
// The `ec2.DefaultNetworkAcl` behaves differently from normal resources, in that
// this provider does not _create_ this resource, but instead attempts to "adopt" it
// into management. We can do this because each VPC created has a Default Network
// ACL that cannot be destroyed, and is created with a known set of default rules.
// 
// When this provider first adopts the Default Network ACL, it **immediately removes all
// rules in the ACL**. It then proceeds to create any rules specified in the
// configuration. This step is required so that only the rules specified in the
// configuration are created.
// 
// This resource treats its inline rules as absolute; only the rules defined
// inline are created, and any additions/removals external to this resource will
// result in diffs being shown. For these reasons, this resource is incompatible with the
// `ec2.NetworkAclRule` resource.
// 
// For more information about Network ACLs, see the AWS Documentation on
// [Network ACLs][aws-network-acls].
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/default_network_acl.html.markdown.
type DefaultNetworkAcl struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The Network ACL ID to manage. This
	// attribute is exported from `ec2.Vpc`, or manually found via the AWS Console.
	DefaultNetworkAclId pulumi.StringOutput `pulumi:"defaultNetworkAclId"`

	// Specifies an egress rule. Parameters defined below.
	Egress pulumi.ArrayOutput `pulumi:"egress"`

	// Specifies an ingress rule. Parameters defined below.
	Ingress pulumi.ArrayOutput `pulumi:"ingress"`

	// The ID of the AWS account that owns the Default Network ACL
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`

	// A list of Subnet IDs to apply the ACL to. See the
	// notes below on managing Subnets in the Default Network ACL
	SubnetIds pulumi.ArrayOutput `pulumi:"subnetIds"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The ID of the associated VPC
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewDefaultNetworkAcl registers a new resource with the given unique name, arguments, and options.
func NewDefaultNetworkAcl(ctx *pulumi.Context,
	name string, args *DefaultNetworkAclArgs, opts ...pulumi.ResourceOpt) (*DefaultNetworkAcl, error) {
	if args == nil || args.DefaultNetworkAclId == nil {
		return nil, errors.New("missing required argument 'DefaultNetworkAclId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["defaultNetworkAclId"] = args.DefaultNetworkAclId
		inputs["egress"] = args.Egress
		inputs["ingress"] = args.Ingress
		inputs["subnetIds"] = args.SubnetIds
		inputs["tags"] = args.Tags
	}
	var resource DefaultNetworkAcl
	err := ctx.RegisterResource("aws:ec2/defaultNetworkAcl:DefaultNetworkAcl", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefaultNetworkAcl gets an existing DefaultNetworkAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultNetworkAcl(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DefaultNetworkAclState, opts ...pulumi.ResourceOpt) (*DefaultNetworkAcl, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["defaultNetworkAclId"] = state.DefaultNetworkAclId
		inputs["egress"] = state.Egress
		inputs["ingress"] = state.Ingress
		inputs["ownerId"] = state.OwnerId
		inputs["subnetIds"] = state.SubnetIds
		inputs["tags"] = state.Tags
		inputs["vpcId"] = state.VpcId
	}
	var resource DefaultNetworkAcl
	err := ctx.ReadResource("aws:ec2/defaultNetworkAcl:DefaultNetworkAcl", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *DefaultNetworkAcl) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *DefaultNetworkAcl) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering DefaultNetworkAcl resources.
type DefaultNetworkAclState struct {
	// The Network ACL ID to manage. This
	// attribute is exported from `ec2.Vpc`, or manually found via the AWS Console.
	DefaultNetworkAclId pulumi.StringInput `pulumi:"defaultNetworkAclId"`
	// Specifies an egress rule. Parameters defined below.
	Egress pulumi.ArrayInput `pulumi:"egress"`
	// Specifies an ingress rule. Parameters defined below.
	Ingress pulumi.ArrayInput `pulumi:"ingress"`
	// The ID of the AWS account that owns the Default Network ACL
	OwnerId pulumi.StringInput `pulumi:"ownerId"`
	// A list of Subnet IDs to apply the ACL to. See the
	// notes below on managing Subnets in the Default Network ACL
	SubnetIds pulumi.ArrayInput `pulumi:"subnetIds"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The ID of the associated VPC
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

// The set of arguments for constructing a DefaultNetworkAcl resource.
type DefaultNetworkAclArgs struct {
	// The Network ACL ID to manage. This
	// attribute is exported from `ec2.Vpc`, or manually found via the AWS Console.
	DefaultNetworkAclId pulumi.StringInput `pulumi:"defaultNetworkAclId"`
	// Specifies an egress rule. Parameters defined below.
	Egress pulumi.ArrayInput `pulumi:"egress"`
	// Specifies an ingress rule. Parameters defined below.
	Ingress pulumi.ArrayInput `pulumi:"ingress"`
	// A list of Subnet IDs to apply the ACL to. See the
	// notes below on managing Subnets in the Default Network ACL
	SubnetIds pulumi.ArrayInput `pulumi:"subnetIds"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
