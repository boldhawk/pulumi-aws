// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Elastic network interface (ENI) resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/network_interface.html.markdown.
type NetworkInterface struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Block to define the attachment of the ENI. Documented below.
	Attachments pulumi.ArrayOutput `pulumi:"attachments"`

	// A description for the network interface.
	Description pulumi.StringOutput `pulumi:"description"`

	PrivateDnsName pulumi.StringOutput `pulumi:"privateDnsName"`

	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`

	// List of private IPs to assign to the ENI.
	PrivateIps pulumi.ArrayOutput `pulumi:"privateIps"`

	// Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + private_ips_count, as a primary private IP will be assiged to an ENI by default. 
	PrivateIpsCount pulumi.IntOutput `pulumi:"privateIpsCount"`

	// List of security group IDs to assign to the ENI.
	SecurityGroups pulumi.ArrayOutput `pulumi:"securityGroups"`

	// Whether to enable source destination checking for the ENI. Default true.
	SourceDestCheck pulumi.BoolOutput `pulumi:"sourceDestCheck"`

	// Subnet ID to create the ENI in.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewNetworkInterface registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterface(ctx *pulumi.Context,
	name string, args *NetworkInterfaceArgs, opts ...pulumi.ResourceOpt) (*NetworkInterface, error) {
	if args == nil || args.SubnetId == nil {
		return nil, errors.New("missing required argument 'SubnetId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["attachments"] = args.Attachments
		inputs["description"] = args.Description
		inputs["privateIp"] = args.PrivateIp
		inputs["privateIps"] = args.PrivateIps
		inputs["privateIpsCount"] = args.PrivateIpsCount
		inputs["securityGroups"] = args.SecurityGroups
		inputs["sourceDestCheck"] = args.SourceDestCheck
		inputs["subnetId"] = args.SubnetId
		inputs["tags"] = args.Tags
	}
	var resource NetworkInterface
	err := ctx.RegisterResource("aws:ec2/networkInterface:NetworkInterface", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInterface gets an existing NetworkInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterface(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NetworkInterfaceState, opts ...pulumi.ResourceOpt) (*NetworkInterface, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["attachments"] = state.Attachments
		inputs["description"] = state.Description
		inputs["privateDnsName"] = state.PrivateDnsName
		inputs["privateIp"] = state.PrivateIp
		inputs["privateIps"] = state.PrivateIps
		inputs["privateIpsCount"] = state.PrivateIpsCount
		inputs["securityGroups"] = state.SecurityGroups
		inputs["sourceDestCheck"] = state.SourceDestCheck
		inputs["subnetId"] = state.SubnetId
		inputs["tags"] = state.Tags
	}
	var resource NetworkInterface
	err := ctx.ReadResource("aws:ec2/networkInterface:NetworkInterface", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *NetworkInterface) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *NetworkInterface) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering NetworkInterface resources.
type NetworkInterfaceState struct {
	// Block to define the attachment of the ENI. Documented below.
	Attachments pulumi.ArrayInput `pulumi:"attachments"`
	// A description for the network interface.
	Description pulumi.StringInput `pulumi:"description"`
	PrivateDnsName pulumi.StringInput `pulumi:"privateDnsName"`
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// List of private IPs to assign to the ENI.
	PrivateIps pulumi.ArrayInput `pulumi:"privateIps"`
	// Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + private_ips_count, as a primary private IP will be assiged to an ENI by default. 
	PrivateIpsCount pulumi.IntInput `pulumi:"privateIpsCount"`
	// List of security group IDs to assign to the ENI.
	SecurityGroups pulumi.ArrayInput `pulumi:"securityGroups"`
	// Whether to enable source destination checking for the ENI. Default true.
	SourceDestCheck pulumi.BoolInput `pulumi:"sourceDestCheck"`
	// Subnet ID to create the ENI in.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a NetworkInterface resource.
type NetworkInterfaceArgs struct {
	// Block to define the attachment of the ENI. Documented below.
	Attachments pulumi.ArrayInput `pulumi:"attachments"`
	// A description for the network interface.
	Description pulumi.StringInput `pulumi:"description"`
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// List of private IPs to assign to the ENI.
	PrivateIps pulumi.ArrayInput `pulumi:"privateIps"`
	// Number of secondary private IPs to assign to the ENI. The total number of private IPs will be 1 + private_ips_count, as a primary private IP will be assiged to an ENI by default. 
	PrivateIpsCount pulumi.IntInput `pulumi:"privateIpsCount"`
	// List of security group IDs to assign to the ENI.
	SecurityGroups pulumi.ArrayInput `pulumi:"securityGroups"`
	// Whether to enable source destination checking for the ENI. Default true.
	SourceDestCheck pulumi.BoolInput `pulumi:"sourceDestCheck"`
	// Subnet ID to create the ENI in.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
