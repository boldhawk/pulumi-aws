// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to create an association between a subnet and routing table.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/route_table_association.html.markdown.
type RouteTableAssociation struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The ID of the routing table to associate with.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`

	// The subnet ID to create an association.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewRouteTableAssociation registers a new resource with the given unique name, arguments, and options.
func NewRouteTableAssociation(ctx *pulumi.Context,
	name string, args *RouteTableAssociationArgs, opts ...pulumi.ResourceOpt) (*RouteTableAssociation, error) {
	if args == nil || args.RouteTableId == nil {
		return nil, errors.New("missing required argument 'RouteTableId'")
	}
	if args == nil || args.SubnetId == nil {
		return nil, errors.New("missing required argument 'SubnetId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["routeTableId"] = args.RouteTableId
		inputs["subnetId"] = args.SubnetId
	}
	var resource RouteTableAssociation
	err := ctx.RegisterResource("aws:ec2/routeTableAssociation:RouteTableAssociation", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTableAssociation gets an existing RouteTableAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTableAssociation(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RouteTableAssociationState, opts ...pulumi.ResourceOpt) (*RouteTableAssociation, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["routeTableId"] = state.RouteTableId
		inputs["subnetId"] = state.SubnetId
	}
	var resource RouteTableAssociation
	err := ctx.ReadResource("aws:ec2/routeTableAssociation:RouteTableAssociation", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *RouteTableAssociation) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *RouteTableAssociation) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering RouteTableAssociation resources.
type RouteTableAssociationState struct {
	// The ID of the routing table to associate with.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// The subnet ID to create an association.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

// The set of arguments for constructing a RouteTableAssociation resource.
type RouteTableAssociationArgs struct {
	// The ID of the routing table to associate with.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// The subnet ID to create an association.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}
