// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an EC2 Capacity Reservation. This allows you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ec2_capacity_reservation.html.markdown.
type CapacityReservation struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`

	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	EbsOptimized pulumi.BoolOutput `pulumi:"ebsOptimized"`

	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
	EndDate pulumi.StringOutput `pulumi:"endDate"`

	// Indicates the way in which the Capacity Reservation ends. Specify either `unlimited` or `limited`.
	EndDateType pulumi.StringOutput `pulumi:"endDateType"`

	// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
	EphemeralStorage pulumi.BoolOutput `pulumi:"ephemeralStorage"`

	// The number of instances for which to reserve capacity.
	InstanceCount pulumi.IntOutput `pulumi:"instanceCount"`

	// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either `open` or `targeted`.
	InstanceMatchCriteria pulumi.StringOutput `pulumi:"instanceMatchCriteria"`

	// The type of operating system for which to reserve capacity. Valid options are `Linux/UNIX`, `Red Hat Enterprise Linux`, `SUSE Linux`, `Windows`, `Windows with SQL Server`, `Windows with SQL Server Enterprise`, `Windows with SQL Server Standard` or `Windows with SQL Server Web`.
	InstancePlatform pulumi.StringOutput `pulumi:"instancePlatform"`

	// The instance type for which to reserve capacity.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Indicates the tenancy of the Capacity Reservation. Specify either `default` or `dedicated`.
	Tenancy pulumi.StringOutput `pulumi:"tenancy"`
}

// NewCapacityReservation registers a new resource with the given unique name, arguments, and options.
func NewCapacityReservation(ctx *pulumi.Context,
	name string, args *CapacityReservationArgs, opts ...pulumi.ResourceOpt) (*CapacityReservation, error) {
	if args == nil || args.AvailabilityZone == nil {
		return nil, errors.New("missing required argument 'AvailabilityZone'")
	}
	if args == nil || args.InstanceCount == nil {
		return nil, errors.New("missing required argument 'InstanceCount'")
	}
	if args == nil || args.InstancePlatform == nil {
		return nil, errors.New("missing required argument 'InstancePlatform'")
	}
	if args == nil || args.InstanceType == nil {
		return nil, errors.New("missing required argument 'InstanceType'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["availabilityZone"] = args.AvailabilityZone
		inputs["ebsOptimized"] = args.EbsOptimized
		inputs["endDate"] = args.EndDate
		inputs["endDateType"] = args.EndDateType
		inputs["ephemeralStorage"] = args.EphemeralStorage
		inputs["instanceCount"] = args.InstanceCount
		inputs["instanceMatchCriteria"] = args.InstanceMatchCriteria
		inputs["instancePlatform"] = args.InstancePlatform
		inputs["instanceType"] = args.InstanceType
		inputs["tags"] = args.Tags
		inputs["tenancy"] = args.Tenancy
	}
	var resource CapacityReservation
	err := ctx.RegisterResource("aws:ec2/capacityReservation:CapacityReservation", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCapacityReservation gets an existing CapacityReservation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCapacityReservation(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CapacityReservationState, opts ...pulumi.ResourceOpt) (*CapacityReservation, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["availabilityZone"] = state.AvailabilityZone
		inputs["ebsOptimized"] = state.EbsOptimized
		inputs["endDate"] = state.EndDate
		inputs["endDateType"] = state.EndDateType
		inputs["ephemeralStorage"] = state.EphemeralStorage
		inputs["instanceCount"] = state.InstanceCount
		inputs["instanceMatchCriteria"] = state.InstanceMatchCriteria
		inputs["instancePlatform"] = state.InstancePlatform
		inputs["instanceType"] = state.InstanceType
		inputs["tags"] = state.Tags
		inputs["tenancy"] = state.Tenancy
	}
	var resource CapacityReservation
	err := ctx.ReadResource("aws:ec2/capacityReservation:CapacityReservation", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *CapacityReservation) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *CapacityReservation) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering CapacityReservation resources.
type CapacityReservationState struct {
	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	EbsOptimized pulumi.BoolInput `pulumi:"ebsOptimized"`
	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
	EndDate pulumi.StringInput `pulumi:"endDate"`
	// Indicates the way in which the Capacity Reservation ends. Specify either `unlimited` or `limited`.
	EndDateType pulumi.StringInput `pulumi:"endDateType"`
	// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
	EphemeralStorage pulumi.BoolInput `pulumi:"ephemeralStorage"`
	// The number of instances for which to reserve capacity.
	InstanceCount pulumi.IntInput `pulumi:"instanceCount"`
	// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either `open` or `targeted`.
	InstanceMatchCriteria pulumi.StringInput `pulumi:"instanceMatchCriteria"`
	// The type of operating system for which to reserve capacity. Valid options are `Linux/UNIX`, `Red Hat Enterprise Linux`, `SUSE Linux`, `Windows`, `Windows with SQL Server`, `Windows with SQL Server Enterprise`, `Windows with SQL Server Standard` or `Windows with SQL Server Web`.
	InstancePlatform pulumi.StringInput `pulumi:"instancePlatform"`
	// The instance type for which to reserve capacity.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Indicates the tenancy of the Capacity Reservation. Specify either `default` or `dedicated`.
	Tenancy pulumi.StringInput `pulumi:"tenancy"`
}

// The set of arguments for constructing a CapacityReservation resource.
type CapacityReservationArgs struct {
	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	EbsOptimized pulumi.BoolInput `pulumi:"ebsOptimized"`
	// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. Valid values: [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) (`YYYY-MM-DDTHH:MM:SSZ`)
	EndDate pulumi.StringInput `pulumi:"endDate"`
	// Indicates the way in which the Capacity Reservation ends. Specify either `unlimited` or `limited`.
	EndDateType pulumi.StringInput `pulumi:"endDateType"`
	// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
	EphemeralStorage pulumi.BoolInput `pulumi:"ephemeralStorage"`
	// The number of instances for which to reserve capacity.
	InstanceCount pulumi.IntInput `pulumi:"instanceCount"`
	// Indicates the type of instance launches that the Capacity Reservation accepts. Specify either `open` or `targeted`.
	InstanceMatchCriteria pulumi.StringInput `pulumi:"instanceMatchCriteria"`
	// The type of operating system for which to reserve capacity. Valid options are `Linux/UNIX`, `Red Hat Enterprise Linux`, `SUSE Linux`, `Windows`, `Windows with SQL Server`, `Windows with SQL Server Enterprise`, `Windows with SQL Server Standard` or `Windows with SQL Server Web`.
	InstancePlatform pulumi.StringInput `pulumi:"instancePlatform"`
	// The instance type for which to reserve capacity.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Indicates the tenancy of the Capacity Reservation. Specify either `default` or `dedicated`.
	Tenancy pulumi.StringInput `pulumi:"tenancy"`
}
