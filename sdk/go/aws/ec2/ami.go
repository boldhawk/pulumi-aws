// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The AMI resource allows the creation and management of a completely-custom
// *Amazon Machine Image* (AMI).
// 
// If you just want to duplicate an existing AMI, possibly copying it to another
// region, it's better to use `ec2.AmiCopy` instead.
// 
// If you just want to share an existing AMI with another AWS account,
// it's better to use `ec2.AmiLaunchPermission` instead.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ami.html.markdown.
type Ami struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Machine architecture for created instances. Defaults to "x8664".
	Architecture pulumi.StringOutput `pulumi:"architecture"`

	// A longer, human-readable description for the AMI.
	Description pulumi.StringOutput `pulumi:"description"`

	// Nested block describing an EBS block device that should be
	// attached to created instances. The structure of this block is described below.
	EbsBlockDevices pulumi.ArrayOutput `pulumi:"ebsBlockDevices"`

	// Specifies whether enhanced networking with ENA is enabled. Defaults to `false`.
	EnaSupport pulumi.BoolOutput `pulumi:"enaSupport"`

	// Nested block describing an ephemeral block device that
	// should be attached to created instances. The structure of this block is described below.
	EphemeralBlockDevices pulumi.ArrayOutput `pulumi:"ephemeralBlockDevices"`

	// Path to an S3 object containing an image manifest, e.g. created
	// by the `ec2-upload-bundle` command in the EC2 command line tools.
	ImageLocation pulumi.StringOutput `pulumi:"imageLocation"`

	// The id of the kernel image (AKI) that will be used as the paravirtual
	// kernel in created instances.
	KernelId pulumi.StringOutput `pulumi:"kernelId"`

	ManageEbsSnapshots pulumi.BoolOutput `pulumi:"manageEbsSnapshots"`

	// A region-unique name for the AMI.
	Name pulumi.StringOutput `pulumi:"name"`

	// The id of an initrd image (ARI) that will be used when booting the
	// created instances.
	RamdiskId pulumi.StringOutput `pulumi:"ramdiskId"`

	// The name of the root device (for example, `/dev/sda1`, or `/dev/xvda`).
	RootDeviceName pulumi.StringOutput `pulumi:"rootDeviceName"`

	// The Snapshot ID for the root volume (for EBS-backed AMIs)
	RootSnapshotId pulumi.StringOutput `pulumi:"rootSnapshotId"`

	// When set to "simple" (the default), enables enhanced networking
	// for created instances. No other value is supported at this time.
	SriovNetSupport pulumi.StringOutput `pulumi:"sriovNetSupport"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Keyword to choose what virtualization mode created instances
	// will use. Can be either "paravirtual" (the default) or "hvm". The choice of virtualization type
	// changes the set of further arguments that are required, as described below.
	VirtualizationType pulumi.StringOutput `pulumi:"virtualizationType"`
}

// NewAmi registers a new resource with the given unique name, arguments, and options.
func NewAmi(ctx *pulumi.Context,
	name string, args *AmiArgs, opts ...pulumi.ResourceOpt) (*Ami, error) {
	inputs := map[string]pulumi.Input{}
	inputs["name"] = pulumi.Any()
	if args != nil {
		inputs["architecture"] = args.Architecture
		inputs["description"] = args.Description
		inputs["ebsBlockDevices"] = args.EbsBlockDevices
		inputs["enaSupport"] = args.EnaSupport
		inputs["ephemeralBlockDevices"] = args.EphemeralBlockDevices
		inputs["imageLocation"] = args.ImageLocation
		inputs["kernelId"] = args.KernelId
		inputs["name"] = args.Name
		inputs["ramdiskId"] = args.RamdiskId
		inputs["rootDeviceName"] = args.RootDeviceName
		inputs["sriovNetSupport"] = args.SriovNetSupport
		inputs["tags"] = args.Tags
		inputs["virtualizationType"] = args.VirtualizationType
	}
	var resource Ami
	err := ctx.RegisterResource("aws:ec2/ami:Ami", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAmi gets an existing Ami resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAmi(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AmiState, opts ...pulumi.ResourceOpt) (*Ami, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["architecture"] = state.Architecture
		inputs["description"] = state.Description
		inputs["ebsBlockDevices"] = state.EbsBlockDevices
		inputs["enaSupport"] = state.EnaSupport
		inputs["ephemeralBlockDevices"] = state.EphemeralBlockDevices
		inputs["imageLocation"] = state.ImageLocation
		inputs["kernelId"] = state.KernelId
		inputs["manageEbsSnapshots"] = state.ManageEbsSnapshots
		inputs["name"] = state.Name
		inputs["ramdiskId"] = state.RamdiskId
		inputs["rootDeviceName"] = state.RootDeviceName
		inputs["rootSnapshotId"] = state.RootSnapshotId
		inputs["sriovNetSupport"] = state.SriovNetSupport
		inputs["tags"] = state.Tags
		inputs["virtualizationType"] = state.VirtualizationType
	}
	var resource Ami
	err := ctx.ReadResource("aws:ec2/ami:Ami", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *Ami) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *Ami) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering Ami resources.
type AmiState struct {
	// Machine architecture for created instances. Defaults to "x8664".
	Architecture pulumi.StringInput `pulumi:"architecture"`
	// A longer, human-readable description for the AMI.
	Description pulumi.StringInput `pulumi:"description"`
	// Nested block describing an EBS block device that should be
	// attached to created instances. The structure of this block is described below.
	EbsBlockDevices pulumi.ArrayInput `pulumi:"ebsBlockDevices"`
	// Specifies whether enhanced networking with ENA is enabled. Defaults to `false`.
	EnaSupport pulumi.BoolInput `pulumi:"enaSupport"`
	// Nested block describing an ephemeral block device that
	// should be attached to created instances. The structure of this block is described below.
	EphemeralBlockDevices pulumi.ArrayInput `pulumi:"ephemeralBlockDevices"`
	// Path to an S3 object containing an image manifest, e.g. created
	// by the `ec2-upload-bundle` command in the EC2 command line tools.
	ImageLocation pulumi.StringInput `pulumi:"imageLocation"`
	// The id of the kernel image (AKI) that will be used as the paravirtual
	// kernel in created instances.
	KernelId pulumi.StringInput `pulumi:"kernelId"`
	ManageEbsSnapshots pulumi.BoolInput `pulumi:"manageEbsSnapshots"`
	// A region-unique name for the AMI.
	Name pulumi.StringInput `pulumi:"name"`
	// The id of an initrd image (ARI) that will be used when booting the
	// created instances.
	RamdiskId pulumi.StringInput `pulumi:"ramdiskId"`
	// The name of the root device (for example, `/dev/sda1`, or `/dev/xvda`).
	RootDeviceName pulumi.StringInput `pulumi:"rootDeviceName"`
	// The Snapshot ID for the root volume (for EBS-backed AMIs)
	RootSnapshotId pulumi.StringInput `pulumi:"rootSnapshotId"`
	// When set to "simple" (the default), enables enhanced networking
	// for created instances. No other value is supported at this time.
	SriovNetSupport pulumi.StringInput `pulumi:"sriovNetSupport"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Keyword to choose what virtualization mode created instances
	// will use. Can be either "paravirtual" (the default) or "hvm". The choice of virtualization type
	// changes the set of further arguments that are required, as described below.
	VirtualizationType pulumi.StringInput `pulumi:"virtualizationType"`
}

// The set of arguments for constructing a Ami resource.
type AmiArgs struct {
	// Machine architecture for created instances. Defaults to "x8664".
	Architecture pulumi.StringInput `pulumi:"architecture"`
	// A longer, human-readable description for the AMI.
	Description pulumi.StringInput `pulumi:"description"`
	// Nested block describing an EBS block device that should be
	// attached to created instances. The structure of this block is described below.
	EbsBlockDevices pulumi.ArrayInput `pulumi:"ebsBlockDevices"`
	// Specifies whether enhanced networking with ENA is enabled. Defaults to `false`.
	EnaSupport pulumi.BoolInput `pulumi:"enaSupport"`
	// Nested block describing an ephemeral block device that
	// should be attached to created instances. The structure of this block is described below.
	EphemeralBlockDevices pulumi.ArrayInput `pulumi:"ephemeralBlockDevices"`
	// Path to an S3 object containing an image manifest, e.g. created
	// by the `ec2-upload-bundle` command in the EC2 command line tools.
	ImageLocation pulumi.StringInput `pulumi:"imageLocation"`
	// The id of the kernel image (AKI) that will be used as the paravirtual
	// kernel in created instances.
	KernelId pulumi.StringInput `pulumi:"kernelId"`
	// A region-unique name for the AMI.
	Name pulumi.StringInput `pulumi:"name"`
	// The id of an initrd image (ARI) that will be used when booting the
	// created instances.
	RamdiskId pulumi.StringInput `pulumi:"ramdiskId"`
	// The name of the root device (for example, `/dev/sda1`, or `/dev/xvda`).
	RootDeviceName pulumi.StringInput `pulumi:"rootDeviceName"`
	// When set to "simple" (the default), enables enhanced networking
	// for created instances. No other value is supported at this time.
	SriovNetSupport pulumi.StringInput `pulumi:"sriovNetSupport"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Keyword to choose what virtualization mode created instances
	// will use. Can be either "paravirtual" (the default) or "hvm". The choice of virtualization type
	// changes the set of further arguments that are required, as described below.
	VirtualizationType pulumi.StringInput `pulumi:"virtualizationType"`
}
