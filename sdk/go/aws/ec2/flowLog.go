// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a VPC/Subnet/ENI Flow Log to capture IP traffic for a specific network
// interface, subnet, or VPC. Logs are sent to a CloudWatch Log Group or a S3 Bucket.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/flow_log.html.markdown.
type FlowLog struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// Elastic Network Interface ID to attach to
	EniId pulumi.StringOutput `pulumi:"eniId"`

	// The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group
	IamRoleArn pulumi.StringOutput `pulumi:"iamRoleArn"`

	// The ARN of the logging destination.
	LogDestination pulumi.StringOutput `pulumi:"logDestination"`

	// The type of the logging destination. Valid values: `cloud-watch-logs`, `s3`. Default: `cloud-watch-logs`.
	LogDestinationType pulumi.StringOutput `pulumi:"logDestinationType"`

	// *Deprecated:* Use `logDestination` instead. The name of the CloudWatch log group.
	LogGroupName pulumi.StringOutput `pulumi:"logGroupName"`

	// Subnet ID to attach to
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`

	// The type of traffic to capture. Valid values: `ACCEPT`,`REJECT`, `ALL`.
	TrafficType pulumi.StringOutput `pulumi:"trafficType"`

	// VPC ID to attach to
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewFlowLog registers a new resource with the given unique name, arguments, and options.
func NewFlowLog(ctx *pulumi.Context,
	name string, args *FlowLogArgs, opts ...pulumi.ResourceOpt) (*FlowLog, error) {
	if args == nil || args.TrafficType == nil {
		return nil, errors.New("missing required argument 'TrafficType'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["eniId"] = args.EniId
		inputs["iamRoleArn"] = args.IamRoleArn
		inputs["logDestination"] = args.LogDestination
		inputs["logDestinationType"] = args.LogDestinationType
		inputs["logGroupName"] = args.LogGroupName
		inputs["subnetId"] = args.SubnetId
		inputs["trafficType"] = args.TrafficType
		inputs["vpcId"] = args.VpcId
	}
	var resource FlowLog
	err := ctx.RegisterResource("aws:ec2/flowLog:FlowLog", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlowLog gets an existing FlowLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlowLog(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FlowLogState, opts ...pulumi.ResourceOpt) (*FlowLog, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["eniId"] = state.EniId
		inputs["iamRoleArn"] = state.IamRoleArn
		inputs["logDestination"] = state.LogDestination
		inputs["logDestinationType"] = state.LogDestinationType
		inputs["logGroupName"] = state.LogGroupName
		inputs["subnetId"] = state.SubnetId
		inputs["trafficType"] = state.TrafficType
		inputs["vpcId"] = state.VpcId
	}
	var resource FlowLog
	err := ctx.ReadResource("aws:ec2/flowLog:FlowLog", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *FlowLog) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *FlowLog) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering FlowLog resources.
type FlowLogState struct {
	// Elastic Network Interface ID to attach to
	EniId pulumi.StringInput `pulumi:"eniId"`
	// The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group
	IamRoleArn pulumi.StringInput `pulumi:"iamRoleArn"`
	// The ARN of the logging destination.
	LogDestination pulumi.StringInput `pulumi:"logDestination"`
	// The type of the logging destination. Valid values: `cloud-watch-logs`, `s3`. Default: `cloud-watch-logs`.
	LogDestinationType pulumi.StringInput `pulumi:"logDestinationType"`
	// *Deprecated:* Use `logDestination` instead. The name of the CloudWatch log group.
	LogGroupName pulumi.StringInput `pulumi:"logGroupName"`
	// Subnet ID to attach to
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The type of traffic to capture. Valid values: `ACCEPT`,`REJECT`, `ALL`.
	TrafficType pulumi.StringInput `pulumi:"trafficType"`
	// VPC ID to attach to
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

// The set of arguments for constructing a FlowLog resource.
type FlowLogArgs struct {
	// Elastic Network Interface ID to attach to
	EniId pulumi.StringInput `pulumi:"eniId"`
	// The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group
	IamRoleArn pulumi.StringInput `pulumi:"iamRoleArn"`
	// The ARN of the logging destination.
	LogDestination pulumi.StringInput `pulumi:"logDestination"`
	// The type of the logging destination. Valid values: `cloud-watch-logs`, `s3`. Default: `cloud-watch-logs`.
	LogDestinationType pulumi.StringInput `pulumi:"logDestinationType"`
	// *Deprecated:* Use `logDestination` instead. The name of the CloudWatch log group.
	LogGroupName pulumi.StringInput `pulumi:"logGroupName"`
	// Subnet ID to attach to
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The type of traffic to capture. Valid values: `ACCEPT`,`REJECT`, `ALL`.
	TrafficType pulumi.StringInput `pulumi:"trafficType"`
	// VPC ID to attach to
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}
