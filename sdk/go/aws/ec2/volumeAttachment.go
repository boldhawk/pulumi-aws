// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AWS EBS Volume Attachment as a top level resource, to attach and
// detach volumes from AWS Instances.
// 
// > **NOTE on EBS block devices:** If you use `ebsBlockDevice` on an `ec2.Instance`, this provider will assume management over the full set of non-root EBS block devices for the instance, and treats additional block devices as drift. For this reason, `ebsBlockDevice` cannot be mixed with external `ebs.Volume` + `awsEbsVolumeAttachment` resources for a given instance.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/volume_attachment.html.markdown.
type VolumeAttachment struct {
	// URN is this resource's unique name assigned by Pulumi.
	URN pulumi.URNOutput `pulumi:"urn"`

	// ID is this resource's unique identifier assigned by its provider.
	ID pulumi.IDOutput `pulumi:"id"`

	// The device name to expose to the instance (for
	// example, `/dev/sdh` or `xvdh`).  See [Device Naming on Linux Instances][1] and [Device Naming on Windows Instances][2] for more information.
	DeviceName pulumi.StringOutput `pulumi:"deviceName"`

	// Set to `true` if you want to force the
	// volume to detach. Useful if previous attempts failed, but use this option only
	// as a last resort, as this can result in **data loss**. See
	// [Detaching an Amazon EBS Volume from an Instance][3] for more information.
	ForceDetach pulumi.BoolOutput `pulumi:"forceDetach"`

	// ID of the Instance to attach to
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`

	// Set this to true if you do not wish
	// to detach the volume from the instance to which it is attached at destroy
	// time, and instead just remove the attachment from this provider state. This is
	// useful when destroying an instance which has volumes created by some other
	// means attached.
	SkipDestroy pulumi.BoolOutput `pulumi:"skipDestroy"`

	// ID of the Volume to be attached
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewVolumeAttachment registers a new resource with the given unique name, arguments, and options.
func NewVolumeAttachment(ctx *pulumi.Context,
	name string, args *VolumeAttachmentArgs, opts ...pulumi.ResourceOpt) (*VolumeAttachment, error) {
	if args == nil || args.DeviceName == nil {
		return nil, errors.New("missing required argument 'DeviceName'")
	}
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.VolumeId == nil {
		return nil, errors.New("missing required argument 'VolumeId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		inputs["deviceName"] = args.DeviceName
		inputs["forceDetach"] = args.ForceDetach
		inputs["instanceId"] = args.InstanceId
		inputs["skipDestroy"] = args.SkipDestroy
		inputs["volumeId"] = args.VolumeId
	}
	var resource VolumeAttachment
	err := ctx.RegisterResource("aws:ec2/volumeAttachment:VolumeAttachment", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeAttachment gets an existing VolumeAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VolumeAttachmentState, opts ...pulumi.ResourceOpt) (*VolumeAttachment, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		inputs["deviceName"] = state.DeviceName
		inputs["forceDetach"] = state.ForceDetach
		inputs["instanceId"] = state.InstanceId
		inputs["skipDestroy"] = state.SkipDestroy
		inputs["volumeId"] = state.VolumeId
	}
	var resource VolumeAttachment
	err := ctx.ReadResource("aws:ec2/volumeAttachment:VolumeAttachment", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetURN returns this resource's unique name assigned by Pulumi.
func (r *VolumeAttachment) GetURN() pulumi.URNOutput {
	return r.URN
}

// GetID returns this resource's unique identifier assigned by its provider.
func (r *VolumeAttachment) GetID() pulumi.IDOutput {
	return r.ID
}
// Input properties used for looking up and filtering VolumeAttachment resources.
type VolumeAttachmentState struct {
	// The device name to expose to the instance (for
	// example, `/dev/sdh` or `xvdh`).  See [Device Naming on Linux Instances][1] and [Device Naming on Windows Instances][2] for more information.
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	// Set to `true` if you want to force the
	// volume to detach. Useful if previous attempts failed, but use this option only
	// as a last resort, as this can result in **data loss**. See
	// [Detaching an Amazon EBS Volume from an Instance][3] for more information.
	ForceDetach pulumi.BoolInput `pulumi:"forceDetach"`
	// ID of the Instance to attach to
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Set this to true if you do not wish
	// to detach the volume from the instance to which it is attached at destroy
	// time, and instead just remove the attachment from this provider state. This is
	// useful when destroying an instance which has volumes created by some other
	// means attached.
	SkipDestroy pulumi.BoolInput `pulumi:"skipDestroy"`
	// ID of the Volume to be attached
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
}

// The set of arguments for constructing a VolumeAttachment resource.
type VolumeAttachmentArgs struct {
	// The device name to expose to the instance (for
	// example, `/dev/sdh` or `xvdh`).  See [Device Naming on Linux Instances][1] and [Device Naming on Windows Instances][2] for more information.
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	// Set to `true` if you want to force the
	// volume to detach. Useful if previous attempts failed, but use this option only
	// as a last resort, as this can result in **data loss**. See
	// [Detaching an Amazon EBS Volume from an Instance][3] for more information.
	ForceDetach pulumi.BoolInput `pulumi:"forceDetach"`
	// ID of the Instance to attach to
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Set this to true if you do not wish
	// to detach the volume from the instance to which it is attached at destroy
	// time, and instead just remove the attachment from this provider state. This is
	// useful when destroying an instance which has volumes created by some other
	// means attached.
	SkipDestroy pulumi.BoolInput `pulumi:"skipDestroy"`
	// ID of the Volume to be attached
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
}
